// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "NLDEvent.pb.h"
// @@protoc_insertion_point(imports)

@implementation NldeventRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [NldeventRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface AppColdStartMsg ()
@property (strong) NSString* eventName;
@property (strong) NSString* eventTime;
@property (strong) NSString* sessionId;
@property (strong) NSString* appKey;
@property (strong) NSString* deviceId;
@property (strong) NSString* idfa;
@property (strong) NSString* channel;
@property (strong) NSString* appBundle;
@property (strong) NSString* appVersion;
@property (strong) NSString* appBuildVersion;
@property (strong) NSString* systemName;
@property (strong) NSString* systemVersion;
@property (strong) NSString* avalibleDisk;
@property (strong) NSString* totalDisk;
@property (strong) NSString* appMemory;
@property (strong) NSString* avalibleMemory;
@property (strong) NSString* totalMemory;
@property (strong) NSString* batteryLevel;
@property (strong) NSString* carrier;
@property (strong) NSString* deviceModel;
@property (strong) NSString* screenResolution;
@end

@implementation AppColdStartMsg

- (BOOL) hasEventName {
  return !!hasEventName_;
}
- (void) setHasEventName:(BOOL) _value_ {
  hasEventName_ = !!_value_;
}
@synthesize eventName;
- (BOOL) hasEventTime {
  return !!hasEventTime_;
}
- (void) setHasEventTime:(BOOL) _value_ {
  hasEventTime_ = !!_value_;
}
@synthesize eventTime;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (BOOL) hasAppKey {
  return !!hasAppKey_;
}
- (void) setHasAppKey:(BOOL) _value_ {
  hasAppKey_ = !!_value_;
}
@synthesize appKey;
- (BOOL) hasDeviceId {
  return !!hasDeviceId_;
}
- (void) setHasDeviceId:(BOOL) _value_ {
  hasDeviceId_ = !!_value_;
}
@synthesize deviceId;
- (BOOL) hasIdfa {
  return !!hasIdfa_;
}
- (void) setHasIdfa:(BOOL) _value_ {
  hasIdfa_ = !!_value_;
}
@synthesize idfa;
- (BOOL) hasChannel {
  return !!hasChannel_;
}
- (void) setHasChannel:(BOOL) _value_ {
  hasChannel_ = !!_value_;
}
@synthesize channel;
- (BOOL) hasAppBundle {
  return !!hasAppBundle_;
}
- (void) setHasAppBundle:(BOOL) _value_ {
  hasAppBundle_ = !!_value_;
}
@synthesize appBundle;
- (BOOL) hasAppVersion {
  return !!hasAppVersion_;
}
- (void) setHasAppVersion:(BOOL) _value_ {
  hasAppVersion_ = !!_value_;
}
@synthesize appVersion;
- (BOOL) hasAppBuildVersion {
  return !!hasAppBuildVersion_;
}
- (void) setHasAppBuildVersion:(BOOL) _value_ {
  hasAppBuildVersion_ = !!_value_;
}
@synthesize appBuildVersion;
- (BOOL) hasSystemName {
  return !!hasSystemName_;
}
- (void) setHasSystemName:(BOOL) _value_ {
  hasSystemName_ = !!_value_;
}
@synthesize systemName;
- (BOOL) hasSystemVersion {
  return !!hasSystemVersion_;
}
- (void) setHasSystemVersion:(BOOL) _value_ {
  hasSystemVersion_ = !!_value_;
}
@synthesize systemVersion;
- (BOOL) hasAvalibleDisk {
  return !!hasAvalibleDisk_;
}
- (void) setHasAvalibleDisk:(BOOL) _value_ {
  hasAvalibleDisk_ = !!_value_;
}
@synthesize avalibleDisk;
- (BOOL) hasTotalDisk {
  return !!hasTotalDisk_;
}
- (void) setHasTotalDisk:(BOOL) _value_ {
  hasTotalDisk_ = !!_value_;
}
@synthesize totalDisk;
- (BOOL) hasAppMemory {
  return !!hasAppMemory_;
}
- (void) setHasAppMemory:(BOOL) _value_ {
  hasAppMemory_ = !!_value_;
}
@synthesize appMemory;
- (BOOL) hasAvalibleMemory {
  return !!hasAvalibleMemory_;
}
- (void) setHasAvalibleMemory:(BOOL) _value_ {
  hasAvalibleMemory_ = !!_value_;
}
@synthesize avalibleMemory;
- (BOOL) hasTotalMemory {
  return !!hasTotalMemory_;
}
- (void) setHasTotalMemory:(BOOL) _value_ {
  hasTotalMemory_ = !!_value_;
}
@synthesize totalMemory;
- (BOOL) hasBatteryLevel {
  return !!hasBatteryLevel_;
}
- (void) setHasBatteryLevel:(BOOL) _value_ {
  hasBatteryLevel_ = !!_value_;
}
@synthesize batteryLevel;
- (BOOL) hasCarrier {
  return !!hasCarrier_;
}
- (void) setHasCarrier:(BOOL) _value_ {
  hasCarrier_ = !!_value_;
}
@synthesize carrier;
- (BOOL) hasDeviceModel {
  return !!hasDeviceModel_;
}
- (void) setHasDeviceModel:(BOOL) _value_ {
  hasDeviceModel_ = !!_value_;
}
@synthesize deviceModel;
- (BOOL) hasScreenResolution {
  return !!hasScreenResolution_;
}
- (void) setHasScreenResolution:(BOOL) _value_ {
  hasScreenResolution_ = !!_value_;
}
@synthesize screenResolution;
- (instancetype) init {
  if ((self = [super init])) {
    self.eventName = @"";
    self.eventTime = @"";
    self.sessionId = @"";
    self.appKey = @"";
    self.deviceId = @"";
    self.idfa = @"";
    self.channel = @"";
    self.appBundle = @"";
    self.appVersion = @"";
    self.appBuildVersion = @"";
    self.systemName = @"";
    self.systemVersion = @"";
    self.avalibleDisk = @"";
    self.totalDisk = @"";
    self.appMemory = @"";
    self.avalibleMemory = @"";
    self.totalMemory = @"";
    self.batteryLevel = @"";
    self.carrier = @"";
    self.deviceModel = @"";
    self.screenResolution = @"";
  }
  return self;
}
static AppColdStartMsg* defaultAppColdStartMsgInstance = nil;
+ (void) initialize {
  if (self == [AppColdStartMsg class]) {
    defaultAppColdStartMsgInstance = [[AppColdStartMsg alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAppColdStartMsgInstance;
}
- (instancetype) defaultInstance {
  return defaultAppColdStartMsgInstance;
}
- (BOOL) isInitialized {
  if (!self.hasEventName) {
    return NO;
  }
  if (!self.hasEventTime) {
    return NO;
  }
  if (!self.hasSessionId) {
    return NO;
  }
  if (!self.hasAppKey) {
    return NO;
  }
  if (!self.hasDeviceId) {
    return NO;
  }
  if (!self.hasChannel) {
    return NO;
  }
  if (!self.hasAppVersion) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasEventName) {
    [output writeString:1 value:self.eventName];
  }
  if (self.hasEventTime) {
    [output writeString:2 value:self.eventTime];
  }
  if (self.hasSessionId) {
    [output writeString:3 value:self.sessionId];
  }
  if (self.hasAppKey) {
    [output writeString:4 value:self.appKey];
  }
  if (self.hasDeviceId) {
    [output writeString:5 value:self.deviceId];
  }
  if (self.hasIdfa) {
    [output writeString:6 value:self.idfa];
  }
  if (self.hasChannel) {
    [output writeString:7 value:self.channel];
  }
  if (self.hasAppBundle) {
    [output writeString:8 value:self.appBundle];
  }
  if (self.hasAppVersion) {
    [output writeString:9 value:self.appVersion];
  }
  if (self.hasAppBuildVersion) {
    [output writeString:10 value:self.appBuildVersion];
  }
  if (self.hasSystemName) {
    [output writeString:11 value:self.systemName];
  }
  if (self.hasSystemVersion) {
    [output writeString:12 value:self.systemVersion];
  }
  if (self.hasAvalibleDisk) {
    [output writeString:13 value:self.avalibleDisk];
  }
  if (self.hasTotalDisk) {
    [output writeString:14 value:self.totalDisk];
  }
  if (self.hasAppMemory) {
    [output writeString:15 value:self.appMemory];
  }
  if (self.hasAvalibleMemory) {
    [output writeString:16 value:self.avalibleMemory];
  }
  if (self.hasTotalMemory) {
    [output writeString:17 value:self.totalMemory];
  }
  if (self.hasBatteryLevel) {
    [output writeString:18 value:self.batteryLevel];
  }
  if (self.hasCarrier) {
    [output writeString:19 value:self.carrier];
  }
  if (self.hasDeviceModel) {
    [output writeString:20 value:self.deviceModel];
  }
  if (self.hasScreenResolution) {
    [output writeString:21 value:self.screenResolution];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasEventName) {
    size_ += computeStringSize(1, self.eventName);
  }
  if (self.hasEventTime) {
    size_ += computeStringSize(2, self.eventTime);
  }
  if (self.hasSessionId) {
    size_ += computeStringSize(3, self.sessionId);
  }
  if (self.hasAppKey) {
    size_ += computeStringSize(4, self.appKey);
  }
  if (self.hasDeviceId) {
    size_ += computeStringSize(5, self.deviceId);
  }
  if (self.hasIdfa) {
    size_ += computeStringSize(6, self.idfa);
  }
  if (self.hasChannel) {
    size_ += computeStringSize(7, self.channel);
  }
  if (self.hasAppBundle) {
    size_ += computeStringSize(8, self.appBundle);
  }
  if (self.hasAppVersion) {
    size_ += computeStringSize(9, self.appVersion);
  }
  if (self.hasAppBuildVersion) {
    size_ += computeStringSize(10, self.appBuildVersion);
  }
  if (self.hasSystemName) {
    size_ += computeStringSize(11, self.systemName);
  }
  if (self.hasSystemVersion) {
    size_ += computeStringSize(12, self.systemVersion);
  }
  if (self.hasAvalibleDisk) {
    size_ += computeStringSize(13, self.avalibleDisk);
  }
  if (self.hasTotalDisk) {
    size_ += computeStringSize(14, self.totalDisk);
  }
  if (self.hasAppMemory) {
    size_ += computeStringSize(15, self.appMemory);
  }
  if (self.hasAvalibleMemory) {
    size_ += computeStringSize(16, self.avalibleMemory);
  }
  if (self.hasTotalMemory) {
    size_ += computeStringSize(17, self.totalMemory);
  }
  if (self.hasBatteryLevel) {
    size_ += computeStringSize(18, self.batteryLevel);
  }
  if (self.hasCarrier) {
    size_ += computeStringSize(19, self.carrier);
  }
  if (self.hasDeviceModel) {
    size_ += computeStringSize(20, self.deviceModel);
  }
  if (self.hasScreenResolution) {
    size_ += computeStringSize(21, self.screenResolution);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AppColdStartMsg*) parseFromData:(NSData*) data {
  return (AppColdStartMsg*)[[[AppColdStartMsg builder] mergeFromData:data] build];
}
+ (AppColdStartMsg*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppColdStartMsg*)[[[AppColdStartMsg builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AppColdStartMsg*) parseFromInputStream:(NSInputStream*) input {
  return (AppColdStartMsg*)[[[AppColdStartMsg builder] mergeFromInputStream:input] build];
}
+ (AppColdStartMsg*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppColdStartMsg*)[[[AppColdStartMsg builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppColdStartMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AppColdStartMsg*)[[[AppColdStartMsg builder] mergeFromCodedInputStream:input] build];
}
+ (AppColdStartMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppColdStartMsg*)[[[AppColdStartMsg builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppColdStartMsgBuilder*) builder {
  return [[AppColdStartMsgBuilder alloc] init];
}
+ (AppColdStartMsgBuilder*) builderWithPrototype:(AppColdStartMsg*) prototype {
  return [[AppColdStartMsg builder] mergeFrom:prototype];
}
- (AppColdStartMsgBuilder*) builder {
  return [AppColdStartMsg builder];
}
- (AppColdStartMsgBuilder*) toBuilder {
  return [AppColdStartMsg builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasEventName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventName", self.eventName];
  }
  if (self.hasEventTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventTime", self.eventTime];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", self.sessionId];
  }
  if (self.hasAppKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appKey", self.appKey];
  }
  if (self.hasDeviceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceId", self.deviceId];
  }
  if (self.hasIdfa) {
    [output appendFormat:@"%@%@: %@\n", indent, @"idfa", self.idfa];
  }
  if (self.hasChannel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channel", self.channel];
  }
  if (self.hasAppBundle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appBundle", self.appBundle];
  }
  if (self.hasAppVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appVersion", self.appVersion];
  }
  if (self.hasAppBuildVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appBuildVersion", self.appBuildVersion];
  }
  if (self.hasSystemName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"systemName", self.systemName];
  }
  if (self.hasSystemVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"systemVersion", self.systemVersion];
  }
  if (self.hasAvalibleDisk) {
    [output appendFormat:@"%@%@: %@\n", indent, @"avalibleDisk", self.avalibleDisk];
  }
  if (self.hasTotalDisk) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalDisk", self.totalDisk];
  }
  if (self.hasAppMemory) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appMemory", self.appMemory];
  }
  if (self.hasAvalibleMemory) {
    [output appendFormat:@"%@%@: %@\n", indent, @"avalibleMemory", self.avalibleMemory];
  }
  if (self.hasTotalMemory) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalMemory", self.totalMemory];
  }
  if (self.hasBatteryLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"batteryLevel", self.batteryLevel];
  }
  if (self.hasCarrier) {
    [output appendFormat:@"%@%@: %@\n", indent, @"carrier", self.carrier];
  }
  if (self.hasDeviceModel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceModel", self.deviceModel];
  }
  if (self.hasScreenResolution) {
    [output appendFormat:@"%@%@: %@\n", indent, @"screenResolution", self.screenResolution];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasEventName) {
    [dictionary setObject: self.eventName forKey: @"eventName"];
  }
  if (self.hasEventTime) {
    [dictionary setObject: self.eventTime forKey: @"eventTime"];
  }
  if (self.hasSessionId) {
    [dictionary setObject: self.sessionId forKey: @"sessionId"];
  }
  if (self.hasAppKey) {
    [dictionary setObject: self.appKey forKey: @"appKey"];
  }
  if (self.hasDeviceId) {
    [dictionary setObject: self.deviceId forKey: @"deviceId"];
  }
  if (self.hasIdfa) {
    [dictionary setObject: self.idfa forKey: @"idfa"];
  }
  if (self.hasChannel) {
    [dictionary setObject: self.channel forKey: @"channel"];
  }
  if (self.hasAppBundle) {
    [dictionary setObject: self.appBundle forKey: @"appBundle"];
  }
  if (self.hasAppVersion) {
    [dictionary setObject: self.appVersion forKey: @"appVersion"];
  }
  if (self.hasAppBuildVersion) {
    [dictionary setObject: self.appBuildVersion forKey: @"appBuildVersion"];
  }
  if (self.hasSystemName) {
    [dictionary setObject: self.systemName forKey: @"systemName"];
  }
  if (self.hasSystemVersion) {
    [dictionary setObject: self.systemVersion forKey: @"systemVersion"];
  }
  if (self.hasAvalibleDisk) {
    [dictionary setObject: self.avalibleDisk forKey: @"avalibleDisk"];
  }
  if (self.hasTotalDisk) {
    [dictionary setObject: self.totalDisk forKey: @"totalDisk"];
  }
  if (self.hasAppMemory) {
    [dictionary setObject: self.appMemory forKey: @"appMemory"];
  }
  if (self.hasAvalibleMemory) {
    [dictionary setObject: self.avalibleMemory forKey: @"avalibleMemory"];
  }
  if (self.hasTotalMemory) {
    [dictionary setObject: self.totalMemory forKey: @"totalMemory"];
  }
  if (self.hasBatteryLevel) {
    [dictionary setObject: self.batteryLevel forKey: @"batteryLevel"];
  }
  if (self.hasCarrier) {
    [dictionary setObject: self.carrier forKey: @"carrier"];
  }
  if (self.hasDeviceModel) {
    [dictionary setObject: self.deviceModel forKey: @"deviceModel"];
  }
  if (self.hasScreenResolution) {
    [dictionary setObject: self.screenResolution forKey: @"screenResolution"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AppColdStartMsg class]]) {
    return NO;
  }
  AppColdStartMsg *otherMessage = other;
  return
      self.hasEventName == otherMessage.hasEventName &&
      (!self.hasEventName || [self.eventName isEqual:otherMessage.eventName]) &&
      self.hasEventTime == otherMessage.hasEventTime &&
      (!self.hasEventTime || [self.eventTime isEqual:otherMessage.eventTime]) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || [self.sessionId isEqual:otherMessage.sessionId]) &&
      self.hasAppKey == otherMessage.hasAppKey &&
      (!self.hasAppKey || [self.appKey isEqual:otherMessage.appKey]) &&
      self.hasDeviceId == otherMessage.hasDeviceId &&
      (!self.hasDeviceId || [self.deviceId isEqual:otherMessage.deviceId]) &&
      self.hasIdfa == otherMessage.hasIdfa &&
      (!self.hasIdfa || [self.idfa isEqual:otherMessage.idfa]) &&
      self.hasChannel == otherMessage.hasChannel &&
      (!self.hasChannel || [self.channel isEqual:otherMessage.channel]) &&
      self.hasAppBundle == otherMessage.hasAppBundle &&
      (!self.hasAppBundle || [self.appBundle isEqual:otherMessage.appBundle]) &&
      self.hasAppVersion == otherMessage.hasAppVersion &&
      (!self.hasAppVersion || [self.appVersion isEqual:otherMessage.appVersion]) &&
      self.hasAppBuildVersion == otherMessage.hasAppBuildVersion &&
      (!self.hasAppBuildVersion || [self.appBuildVersion isEqual:otherMessage.appBuildVersion]) &&
      self.hasSystemName == otherMessage.hasSystemName &&
      (!self.hasSystemName || [self.systemName isEqual:otherMessage.systemName]) &&
      self.hasSystemVersion == otherMessage.hasSystemVersion &&
      (!self.hasSystemVersion || [self.systemVersion isEqual:otherMessage.systemVersion]) &&
      self.hasAvalibleDisk == otherMessage.hasAvalibleDisk &&
      (!self.hasAvalibleDisk || [self.avalibleDisk isEqual:otherMessage.avalibleDisk]) &&
      self.hasTotalDisk == otherMessage.hasTotalDisk &&
      (!self.hasTotalDisk || [self.totalDisk isEqual:otherMessage.totalDisk]) &&
      self.hasAppMemory == otherMessage.hasAppMemory &&
      (!self.hasAppMemory || [self.appMemory isEqual:otherMessage.appMemory]) &&
      self.hasAvalibleMemory == otherMessage.hasAvalibleMemory &&
      (!self.hasAvalibleMemory || [self.avalibleMemory isEqual:otherMessage.avalibleMemory]) &&
      self.hasTotalMemory == otherMessage.hasTotalMemory &&
      (!self.hasTotalMemory || [self.totalMemory isEqual:otherMessage.totalMemory]) &&
      self.hasBatteryLevel == otherMessage.hasBatteryLevel &&
      (!self.hasBatteryLevel || [self.batteryLevel isEqual:otherMessage.batteryLevel]) &&
      self.hasCarrier == otherMessage.hasCarrier &&
      (!self.hasCarrier || [self.carrier isEqual:otherMessage.carrier]) &&
      self.hasDeviceModel == otherMessage.hasDeviceModel &&
      (!self.hasDeviceModel || [self.deviceModel isEqual:otherMessage.deviceModel]) &&
      self.hasScreenResolution == otherMessage.hasScreenResolution &&
      (!self.hasScreenResolution || [self.screenResolution isEqual:otherMessage.screenResolution]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasEventName) {
    hashCode = hashCode * 31 + [self.eventName hash];
  }
  if (self.hasEventTime) {
    hashCode = hashCode * 31 + [self.eventTime hash];
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [self.sessionId hash];
  }
  if (self.hasAppKey) {
    hashCode = hashCode * 31 + [self.appKey hash];
  }
  if (self.hasDeviceId) {
    hashCode = hashCode * 31 + [self.deviceId hash];
  }
  if (self.hasIdfa) {
    hashCode = hashCode * 31 + [self.idfa hash];
  }
  if (self.hasChannel) {
    hashCode = hashCode * 31 + [self.channel hash];
  }
  if (self.hasAppBundle) {
    hashCode = hashCode * 31 + [self.appBundle hash];
  }
  if (self.hasAppVersion) {
    hashCode = hashCode * 31 + [self.appVersion hash];
  }
  if (self.hasAppBuildVersion) {
    hashCode = hashCode * 31 + [self.appBuildVersion hash];
  }
  if (self.hasSystemName) {
    hashCode = hashCode * 31 + [self.systemName hash];
  }
  if (self.hasSystemVersion) {
    hashCode = hashCode * 31 + [self.systemVersion hash];
  }
  if (self.hasAvalibleDisk) {
    hashCode = hashCode * 31 + [self.avalibleDisk hash];
  }
  if (self.hasTotalDisk) {
    hashCode = hashCode * 31 + [self.totalDisk hash];
  }
  if (self.hasAppMemory) {
    hashCode = hashCode * 31 + [self.appMemory hash];
  }
  if (self.hasAvalibleMemory) {
    hashCode = hashCode * 31 + [self.avalibleMemory hash];
  }
  if (self.hasTotalMemory) {
    hashCode = hashCode * 31 + [self.totalMemory hash];
  }
  if (self.hasBatteryLevel) {
    hashCode = hashCode * 31 + [self.batteryLevel hash];
  }
  if (self.hasCarrier) {
    hashCode = hashCode * 31 + [self.carrier hash];
  }
  if (self.hasDeviceModel) {
    hashCode = hashCode * 31 + [self.deviceModel hash];
  }
  if (self.hasScreenResolution) {
    hashCode = hashCode * 31 + [self.screenResolution hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AppColdStartMsgBuilder()
@property (strong) AppColdStartMsg* resultAppColdStartMsg;
@end

@implementation AppColdStartMsgBuilder
@synthesize resultAppColdStartMsg;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAppColdStartMsg = [[AppColdStartMsg alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAppColdStartMsg;
}
- (AppColdStartMsgBuilder*) clear {
  self.resultAppColdStartMsg = [[AppColdStartMsg alloc] init];
  return self;
}
- (AppColdStartMsgBuilder*) clone {
  return [AppColdStartMsg builderWithPrototype:resultAppColdStartMsg];
}
- (AppColdStartMsg*) defaultInstance {
  return [AppColdStartMsg defaultInstance];
}
- (AppColdStartMsg*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AppColdStartMsg*) buildPartial {
  AppColdStartMsg* returnMe = resultAppColdStartMsg;
  self.resultAppColdStartMsg = nil;
  return returnMe;
}
- (AppColdStartMsgBuilder*) mergeFrom:(AppColdStartMsg*) other {
  if (other == [AppColdStartMsg defaultInstance]) {
    return self;
  }
  if (other.hasEventName) {
    [self setEventName:other.eventName];
  }
  if (other.hasEventTime) {
    [self setEventTime:other.eventTime];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasAppKey) {
    [self setAppKey:other.appKey];
  }
  if (other.hasDeviceId) {
    [self setDeviceId:other.deviceId];
  }
  if (other.hasIdfa) {
    [self setIdfa:other.idfa];
  }
  if (other.hasChannel) {
    [self setChannel:other.channel];
  }
  if (other.hasAppBundle) {
    [self setAppBundle:other.appBundle];
  }
  if (other.hasAppVersion) {
    [self setAppVersion:other.appVersion];
  }
  if (other.hasAppBuildVersion) {
    [self setAppBuildVersion:other.appBuildVersion];
  }
  if (other.hasSystemName) {
    [self setSystemName:other.systemName];
  }
  if (other.hasSystemVersion) {
    [self setSystemVersion:other.systemVersion];
  }
  if (other.hasAvalibleDisk) {
    [self setAvalibleDisk:other.avalibleDisk];
  }
  if (other.hasTotalDisk) {
    [self setTotalDisk:other.totalDisk];
  }
  if (other.hasAppMemory) {
    [self setAppMemory:other.appMemory];
  }
  if (other.hasAvalibleMemory) {
    [self setAvalibleMemory:other.avalibleMemory];
  }
  if (other.hasTotalMemory) {
    [self setTotalMemory:other.totalMemory];
  }
  if (other.hasBatteryLevel) {
    [self setBatteryLevel:other.batteryLevel];
  }
  if (other.hasCarrier) {
    [self setCarrier:other.carrier];
  }
  if (other.hasDeviceModel) {
    [self setDeviceModel:other.deviceModel];
  }
  if (other.hasScreenResolution) {
    [self setScreenResolution:other.screenResolution];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AppColdStartMsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AppColdStartMsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setEventName:[input readString]];
        break;
      }
      case 18: {
        [self setEventTime:[input readString]];
        break;
      }
      case 26: {
        [self setSessionId:[input readString]];
        break;
      }
      case 34: {
        [self setAppKey:[input readString]];
        break;
      }
      case 42: {
        [self setDeviceId:[input readString]];
        break;
      }
      case 50: {
        [self setIdfa:[input readString]];
        break;
      }
      case 58: {
        [self setChannel:[input readString]];
        break;
      }
      case 66: {
        [self setAppBundle:[input readString]];
        break;
      }
      case 74: {
        [self setAppVersion:[input readString]];
        break;
      }
      case 82: {
        [self setAppBuildVersion:[input readString]];
        break;
      }
      case 90: {
        [self setSystemName:[input readString]];
        break;
      }
      case 98: {
        [self setSystemVersion:[input readString]];
        break;
      }
      case 106: {
        [self setAvalibleDisk:[input readString]];
        break;
      }
      case 114: {
        [self setTotalDisk:[input readString]];
        break;
      }
      case 122: {
        [self setAppMemory:[input readString]];
        break;
      }
      case 130: {
        [self setAvalibleMemory:[input readString]];
        break;
      }
      case 138: {
        [self setTotalMemory:[input readString]];
        break;
      }
      case 146: {
        [self setBatteryLevel:[input readString]];
        break;
      }
      case 154: {
        [self setCarrier:[input readString]];
        break;
      }
      case 162: {
        [self setDeviceModel:[input readString]];
        break;
      }
      case 170: {
        [self setScreenResolution:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasEventName {
  return resultAppColdStartMsg.hasEventName;
}
- (NSString*) eventName {
  return resultAppColdStartMsg.eventName;
}
- (AppColdStartMsgBuilder*) setEventName:(NSString*) value {
  resultAppColdStartMsg.hasEventName = YES;
  resultAppColdStartMsg.eventName = value;
  return self;
}
- (AppColdStartMsgBuilder*) clearEventName {
  resultAppColdStartMsg.hasEventName = NO;
  resultAppColdStartMsg.eventName = @"";
  return self;
}
- (BOOL) hasEventTime {
  return resultAppColdStartMsg.hasEventTime;
}
- (NSString*) eventTime {
  return resultAppColdStartMsg.eventTime;
}
- (AppColdStartMsgBuilder*) setEventTime:(NSString*) value {
  resultAppColdStartMsg.hasEventTime = YES;
  resultAppColdStartMsg.eventTime = value;
  return self;
}
- (AppColdStartMsgBuilder*) clearEventTime {
  resultAppColdStartMsg.hasEventTime = NO;
  resultAppColdStartMsg.eventTime = @"";
  return self;
}
- (BOOL) hasSessionId {
  return resultAppColdStartMsg.hasSessionId;
}
- (NSString*) sessionId {
  return resultAppColdStartMsg.sessionId;
}
- (AppColdStartMsgBuilder*) setSessionId:(NSString*) value {
  resultAppColdStartMsg.hasSessionId = YES;
  resultAppColdStartMsg.sessionId = value;
  return self;
}
- (AppColdStartMsgBuilder*) clearSessionId {
  resultAppColdStartMsg.hasSessionId = NO;
  resultAppColdStartMsg.sessionId = @"";
  return self;
}
- (BOOL) hasAppKey {
  return resultAppColdStartMsg.hasAppKey;
}
- (NSString*) appKey {
  return resultAppColdStartMsg.appKey;
}
- (AppColdStartMsgBuilder*) setAppKey:(NSString*) value {
  resultAppColdStartMsg.hasAppKey = YES;
  resultAppColdStartMsg.appKey = value;
  return self;
}
- (AppColdStartMsgBuilder*) clearAppKey {
  resultAppColdStartMsg.hasAppKey = NO;
  resultAppColdStartMsg.appKey = @"";
  return self;
}
- (BOOL) hasDeviceId {
  return resultAppColdStartMsg.hasDeviceId;
}
- (NSString*) deviceId {
  return resultAppColdStartMsg.deviceId;
}
- (AppColdStartMsgBuilder*) setDeviceId:(NSString*) value {
  resultAppColdStartMsg.hasDeviceId = YES;
  resultAppColdStartMsg.deviceId = value;
  return self;
}
- (AppColdStartMsgBuilder*) clearDeviceId {
  resultAppColdStartMsg.hasDeviceId = NO;
  resultAppColdStartMsg.deviceId = @"";
  return self;
}
- (BOOL) hasIdfa {
  return resultAppColdStartMsg.hasIdfa;
}
- (NSString*) idfa {
  return resultAppColdStartMsg.idfa;
}
- (AppColdStartMsgBuilder*) setIdfa:(NSString*) value {
  resultAppColdStartMsg.hasIdfa = YES;
  resultAppColdStartMsg.idfa = value;
  return self;
}
- (AppColdStartMsgBuilder*) clearIdfa {
  resultAppColdStartMsg.hasIdfa = NO;
  resultAppColdStartMsg.idfa = @"";
  return self;
}
- (BOOL) hasChannel {
  return resultAppColdStartMsg.hasChannel;
}
- (NSString*) channel {
  return resultAppColdStartMsg.channel;
}
- (AppColdStartMsgBuilder*) setChannel:(NSString*) value {
  resultAppColdStartMsg.hasChannel = YES;
  resultAppColdStartMsg.channel = value;
  return self;
}
- (AppColdStartMsgBuilder*) clearChannel {
  resultAppColdStartMsg.hasChannel = NO;
  resultAppColdStartMsg.channel = @"";
  return self;
}
- (BOOL) hasAppBundle {
  return resultAppColdStartMsg.hasAppBundle;
}
- (NSString*) appBundle {
  return resultAppColdStartMsg.appBundle;
}
- (AppColdStartMsgBuilder*) setAppBundle:(NSString*) value {
  resultAppColdStartMsg.hasAppBundle = YES;
  resultAppColdStartMsg.appBundle = value;
  return self;
}
- (AppColdStartMsgBuilder*) clearAppBundle {
  resultAppColdStartMsg.hasAppBundle = NO;
  resultAppColdStartMsg.appBundle = @"";
  return self;
}
- (BOOL) hasAppVersion {
  return resultAppColdStartMsg.hasAppVersion;
}
- (NSString*) appVersion {
  return resultAppColdStartMsg.appVersion;
}
- (AppColdStartMsgBuilder*) setAppVersion:(NSString*) value {
  resultAppColdStartMsg.hasAppVersion = YES;
  resultAppColdStartMsg.appVersion = value;
  return self;
}
- (AppColdStartMsgBuilder*) clearAppVersion {
  resultAppColdStartMsg.hasAppVersion = NO;
  resultAppColdStartMsg.appVersion = @"";
  return self;
}
- (BOOL) hasAppBuildVersion {
  return resultAppColdStartMsg.hasAppBuildVersion;
}
- (NSString*) appBuildVersion {
  return resultAppColdStartMsg.appBuildVersion;
}
- (AppColdStartMsgBuilder*) setAppBuildVersion:(NSString*) value {
  resultAppColdStartMsg.hasAppBuildVersion = YES;
  resultAppColdStartMsg.appBuildVersion = value;
  return self;
}
- (AppColdStartMsgBuilder*) clearAppBuildVersion {
  resultAppColdStartMsg.hasAppBuildVersion = NO;
  resultAppColdStartMsg.appBuildVersion = @"";
  return self;
}
- (BOOL) hasSystemName {
  return resultAppColdStartMsg.hasSystemName;
}
- (NSString*) systemName {
  return resultAppColdStartMsg.systemName;
}
- (AppColdStartMsgBuilder*) setSystemName:(NSString*) value {
  resultAppColdStartMsg.hasSystemName = YES;
  resultAppColdStartMsg.systemName = value;
  return self;
}
- (AppColdStartMsgBuilder*) clearSystemName {
  resultAppColdStartMsg.hasSystemName = NO;
  resultAppColdStartMsg.systemName = @"";
  return self;
}
- (BOOL) hasSystemVersion {
  return resultAppColdStartMsg.hasSystemVersion;
}
- (NSString*) systemVersion {
  return resultAppColdStartMsg.systemVersion;
}
- (AppColdStartMsgBuilder*) setSystemVersion:(NSString*) value {
  resultAppColdStartMsg.hasSystemVersion = YES;
  resultAppColdStartMsg.systemVersion = value;
  return self;
}
- (AppColdStartMsgBuilder*) clearSystemVersion {
  resultAppColdStartMsg.hasSystemVersion = NO;
  resultAppColdStartMsg.systemVersion = @"";
  return self;
}
- (BOOL) hasAvalibleDisk {
  return resultAppColdStartMsg.hasAvalibleDisk;
}
- (NSString*) avalibleDisk {
  return resultAppColdStartMsg.avalibleDisk;
}
- (AppColdStartMsgBuilder*) setAvalibleDisk:(NSString*) value {
  resultAppColdStartMsg.hasAvalibleDisk = YES;
  resultAppColdStartMsg.avalibleDisk = value;
  return self;
}
- (AppColdStartMsgBuilder*) clearAvalibleDisk {
  resultAppColdStartMsg.hasAvalibleDisk = NO;
  resultAppColdStartMsg.avalibleDisk = @"";
  return self;
}
- (BOOL) hasTotalDisk {
  return resultAppColdStartMsg.hasTotalDisk;
}
- (NSString*) totalDisk {
  return resultAppColdStartMsg.totalDisk;
}
- (AppColdStartMsgBuilder*) setTotalDisk:(NSString*) value {
  resultAppColdStartMsg.hasTotalDisk = YES;
  resultAppColdStartMsg.totalDisk = value;
  return self;
}
- (AppColdStartMsgBuilder*) clearTotalDisk {
  resultAppColdStartMsg.hasTotalDisk = NO;
  resultAppColdStartMsg.totalDisk = @"";
  return self;
}
- (BOOL) hasAppMemory {
  return resultAppColdStartMsg.hasAppMemory;
}
- (NSString*) appMemory {
  return resultAppColdStartMsg.appMemory;
}
- (AppColdStartMsgBuilder*) setAppMemory:(NSString*) value {
  resultAppColdStartMsg.hasAppMemory = YES;
  resultAppColdStartMsg.appMemory = value;
  return self;
}
- (AppColdStartMsgBuilder*) clearAppMemory {
  resultAppColdStartMsg.hasAppMemory = NO;
  resultAppColdStartMsg.appMemory = @"";
  return self;
}
- (BOOL) hasAvalibleMemory {
  return resultAppColdStartMsg.hasAvalibleMemory;
}
- (NSString*) avalibleMemory {
  return resultAppColdStartMsg.avalibleMemory;
}
- (AppColdStartMsgBuilder*) setAvalibleMemory:(NSString*) value {
  resultAppColdStartMsg.hasAvalibleMemory = YES;
  resultAppColdStartMsg.avalibleMemory = value;
  return self;
}
- (AppColdStartMsgBuilder*) clearAvalibleMemory {
  resultAppColdStartMsg.hasAvalibleMemory = NO;
  resultAppColdStartMsg.avalibleMemory = @"";
  return self;
}
- (BOOL) hasTotalMemory {
  return resultAppColdStartMsg.hasTotalMemory;
}
- (NSString*) totalMemory {
  return resultAppColdStartMsg.totalMemory;
}
- (AppColdStartMsgBuilder*) setTotalMemory:(NSString*) value {
  resultAppColdStartMsg.hasTotalMemory = YES;
  resultAppColdStartMsg.totalMemory = value;
  return self;
}
- (AppColdStartMsgBuilder*) clearTotalMemory {
  resultAppColdStartMsg.hasTotalMemory = NO;
  resultAppColdStartMsg.totalMemory = @"";
  return self;
}
- (BOOL) hasBatteryLevel {
  return resultAppColdStartMsg.hasBatteryLevel;
}
- (NSString*) batteryLevel {
  return resultAppColdStartMsg.batteryLevel;
}
- (AppColdStartMsgBuilder*) setBatteryLevel:(NSString*) value {
  resultAppColdStartMsg.hasBatteryLevel = YES;
  resultAppColdStartMsg.batteryLevel = value;
  return self;
}
- (AppColdStartMsgBuilder*) clearBatteryLevel {
  resultAppColdStartMsg.hasBatteryLevel = NO;
  resultAppColdStartMsg.batteryLevel = @"";
  return self;
}
- (BOOL) hasCarrier {
  return resultAppColdStartMsg.hasCarrier;
}
- (NSString*) carrier {
  return resultAppColdStartMsg.carrier;
}
- (AppColdStartMsgBuilder*) setCarrier:(NSString*) value {
  resultAppColdStartMsg.hasCarrier = YES;
  resultAppColdStartMsg.carrier = value;
  return self;
}
- (AppColdStartMsgBuilder*) clearCarrier {
  resultAppColdStartMsg.hasCarrier = NO;
  resultAppColdStartMsg.carrier = @"";
  return self;
}
- (BOOL) hasDeviceModel {
  return resultAppColdStartMsg.hasDeviceModel;
}
- (NSString*) deviceModel {
  return resultAppColdStartMsg.deviceModel;
}
- (AppColdStartMsgBuilder*) setDeviceModel:(NSString*) value {
  resultAppColdStartMsg.hasDeviceModel = YES;
  resultAppColdStartMsg.deviceModel = value;
  return self;
}
- (AppColdStartMsgBuilder*) clearDeviceModel {
  resultAppColdStartMsg.hasDeviceModel = NO;
  resultAppColdStartMsg.deviceModel = @"";
  return self;
}
- (BOOL) hasScreenResolution {
  return resultAppColdStartMsg.hasScreenResolution;
}
- (NSString*) screenResolution {
  return resultAppColdStartMsg.screenResolution;
}
- (AppColdStartMsgBuilder*) setScreenResolution:(NSString*) value {
  resultAppColdStartMsg.hasScreenResolution = YES;
  resultAppColdStartMsg.screenResolution = value;
  return self;
}
- (AppColdStartMsgBuilder*) clearScreenResolution {
  resultAppColdStartMsg.hasScreenResolution = NO;
  resultAppColdStartMsg.screenResolution = @"";
  return self;
}
@end

@interface AppEnterForeBackgroundMsg ()
@property (strong) NSString* eventName;
@property (strong) NSString* eventTime;
@property (strong) NSString* sessionId;
@property (strong) NSString* appKey;
@property (strong) NSString* deviceId;
@property (strong) NSString* appMemory;
@property (strong) NSString* avalibleMemory;
@property (strong) NSString* avalibleDisk;
@property (strong) NSString* channel;
@end

@implementation AppEnterForeBackgroundMsg

- (BOOL) hasEventName {
  return !!hasEventName_;
}
- (void) setHasEventName:(BOOL) _value_ {
  hasEventName_ = !!_value_;
}
@synthesize eventName;
- (BOOL) hasEventTime {
  return !!hasEventTime_;
}
- (void) setHasEventTime:(BOOL) _value_ {
  hasEventTime_ = !!_value_;
}
@synthesize eventTime;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (BOOL) hasAppKey {
  return !!hasAppKey_;
}
- (void) setHasAppKey:(BOOL) _value_ {
  hasAppKey_ = !!_value_;
}
@synthesize appKey;
- (BOOL) hasDeviceId {
  return !!hasDeviceId_;
}
- (void) setHasDeviceId:(BOOL) _value_ {
  hasDeviceId_ = !!_value_;
}
@synthesize deviceId;
- (BOOL) hasAppMemory {
  return !!hasAppMemory_;
}
- (void) setHasAppMemory:(BOOL) _value_ {
  hasAppMemory_ = !!_value_;
}
@synthesize appMemory;
- (BOOL) hasAvalibleMemory {
  return !!hasAvalibleMemory_;
}
- (void) setHasAvalibleMemory:(BOOL) _value_ {
  hasAvalibleMemory_ = !!_value_;
}
@synthesize avalibleMemory;
- (BOOL) hasAvalibleDisk {
  return !!hasAvalibleDisk_;
}
- (void) setHasAvalibleDisk:(BOOL) _value_ {
  hasAvalibleDisk_ = !!_value_;
}
@synthesize avalibleDisk;
- (BOOL) hasChannel {
  return !!hasChannel_;
}
- (void) setHasChannel:(BOOL) _value_ {
  hasChannel_ = !!_value_;
}
@synthesize channel;
- (instancetype) init {
  if ((self = [super init])) {
    self.eventName = @"";
    self.eventTime = @"";
    self.sessionId = @"";
    self.appKey = @"";
    self.deviceId = @"";
    self.appMemory = @"";
    self.avalibleMemory = @"";
    self.avalibleDisk = @"";
    self.channel = @"";
  }
  return self;
}
static AppEnterForeBackgroundMsg* defaultAppEnterForeBackgroundMsgInstance = nil;
+ (void) initialize {
  if (self == [AppEnterForeBackgroundMsg class]) {
    defaultAppEnterForeBackgroundMsgInstance = [[AppEnterForeBackgroundMsg alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAppEnterForeBackgroundMsgInstance;
}
- (instancetype) defaultInstance {
  return defaultAppEnterForeBackgroundMsgInstance;
}
- (BOOL) isInitialized {
  if (!self.hasEventName) {
    return NO;
  }
  if (!self.hasEventTime) {
    return NO;
  }
  if (!self.hasSessionId) {
    return NO;
  }
  if (!self.hasAppKey) {
    return NO;
  }
  if (!self.hasDeviceId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasEventName) {
    [output writeString:1 value:self.eventName];
  }
  if (self.hasEventTime) {
    [output writeString:2 value:self.eventTime];
  }
  if (self.hasSessionId) {
    [output writeString:3 value:self.sessionId];
  }
  if (self.hasAppKey) {
    [output writeString:4 value:self.appKey];
  }
  if (self.hasDeviceId) {
    [output writeString:5 value:self.deviceId];
  }
  if (self.hasAppMemory) {
    [output writeString:6 value:self.appMemory];
  }
  if (self.hasAvalibleMemory) {
    [output writeString:7 value:self.avalibleMemory];
  }
  if (self.hasAvalibleDisk) {
    [output writeString:8 value:self.avalibleDisk];
  }
  if (self.hasChannel) {
    [output writeString:9 value:self.channel];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasEventName) {
    size_ += computeStringSize(1, self.eventName);
  }
  if (self.hasEventTime) {
    size_ += computeStringSize(2, self.eventTime);
  }
  if (self.hasSessionId) {
    size_ += computeStringSize(3, self.sessionId);
  }
  if (self.hasAppKey) {
    size_ += computeStringSize(4, self.appKey);
  }
  if (self.hasDeviceId) {
    size_ += computeStringSize(5, self.deviceId);
  }
  if (self.hasAppMemory) {
    size_ += computeStringSize(6, self.appMemory);
  }
  if (self.hasAvalibleMemory) {
    size_ += computeStringSize(7, self.avalibleMemory);
  }
  if (self.hasAvalibleDisk) {
    size_ += computeStringSize(8, self.avalibleDisk);
  }
  if (self.hasChannel) {
    size_ += computeStringSize(9, self.channel);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AppEnterForeBackgroundMsg*) parseFromData:(NSData*) data {
  return (AppEnterForeBackgroundMsg*)[[[AppEnterForeBackgroundMsg builder] mergeFromData:data] build];
}
+ (AppEnterForeBackgroundMsg*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppEnterForeBackgroundMsg*)[[[AppEnterForeBackgroundMsg builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AppEnterForeBackgroundMsg*) parseFromInputStream:(NSInputStream*) input {
  return (AppEnterForeBackgroundMsg*)[[[AppEnterForeBackgroundMsg builder] mergeFromInputStream:input] build];
}
+ (AppEnterForeBackgroundMsg*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppEnterForeBackgroundMsg*)[[[AppEnterForeBackgroundMsg builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppEnterForeBackgroundMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AppEnterForeBackgroundMsg*)[[[AppEnterForeBackgroundMsg builder] mergeFromCodedInputStream:input] build];
}
+ (AppEnterForeBackgroundMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppEnterForeBackgroundMsg*)[[[AppEnterForeBackgroundMsg builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppEnterForeBackgroundMsgBuilder*) builder {
  return [[AppEnterForeBackgroundMsgBuilder alloc] init];
}
+ (AppEnterForeBackgroundMsgBuilder*) builderWithPrototype:(AppEnterForeBackgroundMsg*) prototype {
  return [[AppEnterForeBackgroundMsg builder] mergeFrom:prototype];
}
- (AppEnterForeBackgroundMsgBuilder*) builder {
  return [AppEnterForeBackgroundMsg builder];
}
- (AppEnterForeBackgroundMsgBuilder*) toBuilder {
  return [AppEnterForeBackgroundMsg builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasEventName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventName", self.eventName];
  }
  if (self.hasEventTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventTime", self.eventTime];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", self.sessionId];
  }
  if (self.hasAppKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appKey", self.appKey];
  }
  if (self.hasDeviceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceId", self.deviceId];
  }
  if (self.hasAppMemory) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appMemory", self.appMemory];
  }
  if (self.hasAvalibleMemory) {
    [output appendFormat:@"%@%@: %@\n", indent, @"avalibleMemory", self.avalibleMemory];
  }
  if (self.hasAvalibleDisk) {
    [output appendFormat:@"%@%@: %@\n", indent, @"avalibleDisk", self.avalibleDisk];
  }
  if (self.hasChannel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channel", self.channel];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasEventName) {
    [dictionary setObject: self.eventName forKey: @"eventName"];
  }
  if (self.hasEventTime) {
    [dictionary setObject: self.eventTime forKey: @"eventTime"];
  }
  if (self.hasSessionId) {
    [dictionary setObject: self.sessionId forKey: @"sessionId"];
  }
  if (self.hasAppKey) {
    [dictionary setObject: self.appKey forKey: @"appKey"];
  }
  if (self.hasDeviceId) {
    [dictionary setObject: self.deviceId forKey: @"deviceId"];
  }
  if (self.hasAppMemory) {
    [dictionary setObject: self.appMemory forKey: @"appMemory"];
  }
  if (self.hasAvalibleMemory) {
    [dictionary setObject: self.avalibleMemory forKey: @"avalibleMemory"];
  }
  if (self.hasAvalibleDisk) {
    [dictionary setObject: self.avalibleDisk forKey: @"avalibleDisk"];
  }
  if (self.hasChannel) {
    [dictionary setObject: self.channel forKey: @"channel"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AppEnterForeBackgroundMsg class]]) {
    return NO;
  }
  AppEnterForeBackgroundMsg *otherMessage = other;
  return
      self.hasEventName == otherMessage.hasEventName &&
      (!self.hasEventName || [self.eventName isEqual:otherMessage.eventName]) &&
      self.hasEventTime == otherMessage.hasEventTime &&
      (!self.hasEventTime || [self.eventTime isEqual:otherMessage.eventTime]) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || [self.sessionId isEqual:otherMessage.sessionId]) &&
      self.hasAppKey == otherMessage.hasAppKey &&
      (!self.hasAppKey || [self.appKey isEqual:otherMessage.appKey]) &&
      self.hasDeviceId == otherMessage.hasDeviceId &&
      (!self.hasDeviceId || [self.deviceId isEqual:otherMessage.deviceId]) &&
      self.hasAppMemory == otherMessage.hasAppMemory &&
      (!self.hasAppMemory || [self.appMemory isEqual:otherMessage.appMemory]) &&
      self.hasAvalibleMemory == otherMessage.hasAvalibleMemory &&
      (!self.hasAvalibleMemory || [self.avalibleMemory isEqual:otherMessage.avalibleMemory]) &&
      self.hasAvalibleDisk == otherMessage.hasAvalibleDisk &&
      (!self.hasAvalibleDisk || [self.avalibleDisk isEqual:otherMessage.avalibleDisk]) &&
      self.hasChannel == otherMessage.hasChannel &&
      (!self.hasChannel || [self.channel isEqual:otherMessage.channel]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasEventName) {
    hashCode = hashCode * 31 + [self.eventName hash];
  }
  if (self.hasEventTime) {
    hashCode = hashCode * 31 + [self.eventTime hash];
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [self.sessionId hash];
  }
  if (self.hasAppKey) {
    hashCode = hashCode * 31 + [self.appKey hash];
  }
  if (self.hasDeviceId) {
    hashCode = hashCode * 31 + [self.deviceId hash];
  }
  if (self.hasAppMemory) {
    hashCode = hashCode * 31 + [self.appMemory hash];
  }
  if (self.hasAvalibleMemory) {
    hashCode = hashCode * 31 + [self.avalibleMemory hash];
  }
  if (self.hasAvalibleDisk) {
    hashCode = hashCode * 31 + [self.avalibleDisk hash];
  }
  if (self.hasChannel) {
    hashCode = hashCode * 31 + [self.channel hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AppEnterForeBackgroundMsgBuilder()
@property (strong) AppEnterForeBackgroundMsg* resultAppEnterForeBackgroundMsg;
@end

@implementation AppEnterForeBackgroundMsgBuilder
@synthesize resultAppEnterForeBackgroundMsg;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAppEnterForeBackgroundMsg = [[AppEnterForeBackgroundMsg alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAppEnterForeBackgroundMsg;
}
- (AppEnterForeBackgroundMsgBuilder*) clear {
  self.resultAppEnterForeBackgroundMsg = [[AppEnterForeBackgroundMsg alloc] init];
  return self;
}
- (AppEnterForeBackgroundMsgBuilder*) clone {
  return [AppEnterForeBackgroundMsg builderWithPrototype:resultAppEnterForeBackgroundMsg];
}
- (AppEnterForeBackgroundMsg*) defaultInstance {
  return [AppEnterForeBackgroundMsg defaultInstance];
}
- (AppEnterForeBackgroundMsg*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AppEnterForeBackgroundMsg*) buildPartial {
  AppEnterForeBackgroundMsg* returnMe = resultAppEnterForeBackgroundMsg;
  self.resultAppEnterForeBackgroundMsg = nil;
  return returnMe;
}
- (AppEnterForeBackgroundMsgBuilder*) mergeFrom:(AppEnterForeBackgroundMsg*) other {
  if (other == [AppEnterForeBackgroundMsg defaultInstance]) {
    return self;
  }
  if (other.hasEventName) {
    [self setEventName:other.eventName];
  }
  if (other.hasEventTime) {
    [self setEventTime:other.eventTime];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasAppKey) {
    [self setAppKey:other.appKey];
  }
  if (other.hasDeviceId) {
    [self setDeviceId:other.deviceId];
  }
  if (other.hasAppMemory) {
    [self setAppMemory:other.appMemory];
  }
  if (other.hasAvalibleMemory) {
    [self setAvalibleMemory:other.avalibleMemory];
  }
  if (other.hasAvalibleDisk) {
    [self setAvalibleDisk:other.avalibleDisk];
  }
  if (other.hasChannel) {
    [self setChannel:other.channel];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AppEnterForeBackgroundMsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AppEnterForeBackgroundMsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setEventName:[input readString]];
        break;
      }
      case 18: {
        [self setEventTime:[input readString]];
        break;
      }
      case 26: {
        [self setSessionId:[input readString]];
        break;
      }
      case 34: {
        [self setAppKey:[input readString]];
        break;
      }
      case 42: {
        [self setDeviceId:[input readString]];
        break;
      }
      case 50: {
        [self setAppMemory:[input readString]];
        break;
      }
      case 58: {
        [self setAvalibleMemory:[input readString]];
        break;
      }
      case 66: {
        [self setAvalibleDisk:[input readString]];
        break;
      }
      case 74: {
        [self setChannel:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasEventName {
  return resultAppEnterForeBackgroundMsg.hasEventName;
}
- (NSString*) eventName {
  return resultAppEnterForeBackgroundMsg.eventName;
}
- (AppEnterForeBackgroundMsgBuilder*) setEventName:(NSString*) value {
  resultAppEnterForeBackgroundMsg.hasEventName = YES;
  resultAppEnterForeBackgroundMsg.eventName = value;
  return self;
}
- (AppEnterForeBackgroundMsgBuilder*) clearEventName {
  resultAppEnterForeBackgroundMsg.hasEventName = NO;
  resultAppEnterForeBackgroundMsg.eventName = @"";
  return self;
}
- (BOOL) hasEventTime {
  return resultAppEnterForeBackgroundMsg.hasEventTime;
}
- (NSString*) eventTime {
  return resultAppEnterForeBackgroundMsg.eventTime;
}
- (AppEnterForeBackgroundMsgBuilder*) setEventTime:(NSString*) value {
  resultAppEnterForeBackgroundMsg.hasEventTime = YES;
  resultAppEnterForeBackgroundMsg.eventTime = value;
  return self;
}
- (AppEnterForeBackgroundMsgBuilder*) clearEventTime {
  resultAppEnterForeBackgroundMsg.hasEventTime = NO;
  resultAppEnterForeBackgroundMsg.eventTime = @"";
  return self;
}
- (BOOL) hasSessionId {
  return resultAppEnterForeBackgroundMsg.hasSessionId;
}
- (NSString*) sessionId {
  return resultAppEnterForeBackgroundMsg.sessionId;
}
- (AppEnterForeBackgroundMsgBuilder*) setSessionId:(NSString*) value {
  resultAppEnterForeBackgroundMsg.hasSessionId = YES;
  resultAppEnterForeBackgroundMsg.sessionId = value;
  return self;
}
- (AppEnterForeBackgroundMsgBuilder*) clearSessionId {
  resultAppEnterForeBackgroundMsg.hasSessionId = NO;
  resultAppEnterForeBackgroundMsg.sessionId = @"";
  return self;
}
- (BOOL) hasAppKey {
  return resultAppEnterForeBackgroundMsg.hasAppKey;
}
- (NSString*) appKey {
  return resultAppEnterForeBackgroundMsg.appKey;
}
- (AppEnterForeBackgroundMsgBuilder*) setAppKey:(NSString*) value {
  resultAppEnterForeBackgroundMsg.hasAppKey = YES;
  resultAppEnterForeBackgroundMsg.appKey = value;
  return self;
}
- (AppEnterForeBackgroundMsgBuilder*) clearAppKey {
  resultAppEnterForeBackgroundMsg.hasAppKey = NO;
  resultAppEnterForeBackgroundMsg.appKey = @"";
  return self;
}
- (BOOL) hasDeviceId {
  return resultAppEnterForeBackgroundMsg.hasDeviceId;
}
- (NSString*) deviceId {
  return resultAppEnterForeBackgroundMsg.deviceId;
}
- (AppEnterForeBackgroundMsgBuilder*) setDeviceId:(NSString*) value {
  resultAppEnterForeBackgroundMsg.hasDeviceId = YES;
  resultAppEnterForeBackgroundMsg.deviceId = value;
  return self;
}
- (AppEnterForeBackgroundMsgBuilder*) clearDeviceId {
  resultAppEnterForeBackgroundMsg.hasDeviceId = NO;
  resultAppEnterForeBackgroundMsg.deviceId = @"";
  return self;
}
- (BOOL) hasAppMemory {
  return resultAppEnterForeBackgroundMsg.hasAppMemory;
}
- (NSString*) appMemory {
  return resultAppEnterForeBackgroundMsg.appMemory;
}
- (AppEnterForeBackgroundMsgBuilder*) setAppMemory:(NSString*) value {
  resultAppEnterForeBackgroundMsg.hasAppMemory = YES;
  resultAppEnterForeBackgroundMsg.appMemory = value;
  return self;
}
- (AppEnterForeBackgroundMsgBuilder*) clearAppMemory {
  resultAppEnterForeBackgroundMsg.hasAppMemory = NO;
  resultAppEnterForeBackgroundMsg.appMemory = @"";
  return self;
}
- (BOOL) hasAvalibleMemory {
  return resultAppEnterForeBackgroundMsg.hasAvalibleMemory;
}
- (NSString*) avalibleMemory {
  return resultAppEnterForeBackgroundMsg.avalibleMemory;
}
- (AppEnterForeBackgroundMsgBuilder*) setAvalibleMemory:(NSString*) value {
  resultAppEnterForeBackgroundMsg.hasAvalibleMemory = YES;
  resultAppEnterForeBackgroundMsg.avalibleMemory = value;
  return self;
}
- (AppEnterForeBackgroundMsgBuilder*) clearAvalibleMemory {
  resultAppEnterForeBackgroundMsg.hasAvalibleMemory = NO;
  resultAppEnterForeBackgroundMsg.avalibleMemory = @"";
  return self;
}
- (BOOL) hasAvalibleDisk {
  return resultAppEnterForeBackgroundMsg.hasAvalibleDisk;
}
- (NSString*) avalibleDisk {
  return resultAppEnterForeBackgroundMsg.avalibleDisk;
}
- (AppEnterForeBackgroundMsgBuilder*) setAvalibleDisk:(NSString*) value {
  resultAppEnterForeBackgroundMsg.hasAvalibleDisk = YES;
  resultAppEnterForeBackgroundMsg.avalibleDisk = value;
  return self;
}
- (AppEnterForeBackgroundMsgBuilder*) clearAvalibleDisk {
  resultAppEnterForeBackgroundMsg.hasAvalibleDisk = NO;
  resultAppEnterForeBackgroundMsg.avalibleDisk = @"";
  return self;
}
- (BOOL) hasChannel {
  return resultAppEnterForeBackgroundMsg.hasChannel;
}
- (NSString*) channel {
  return resultAppEnterForeBackgroundMsg.channel;
}
- (AppEnterForeBackgroundMsgBuilder*) setChannel:(NSString*) value {
  resultAppEnterForeBackgroundMsg.hasChannel = YES;
  resultAppEnterForeBackgroundMsg.channel = value;
  return self;
}
- (AppEnterForeBackgroundMsgBuilder*) clearChannel {
  resultAppEnterForeBackgroundMsg.hasChannel = NO;
  resultAppEnterForeBackgroundMsg.channel = @"";
  return self;
}
@end

@interface ButtonViewMsg ()
@property (strong) NSString* eventName;
@property (strong) NSString* eventTime;
@property (strong) NSString* sessionId;
@property (strong) NSString* appKey;
@property (strong) NSString* deviceId;
@property (strong) NSString* page;
@property (strong) ViewItem* view;
@property (strong) NSMutableArray * itemArray;
@end

@implementation ButtonViewMsg

- (BOOL) hasEventName {
  return !!hasEventName_;
}
- (void) setHasEventName:(BOOL) _value_ {
  hasEventName_ = !!_value_;
}
@synthesize eventName;
- (BOOL) hasEventTime {
  return !!hasEventTime_;
}
- (void) setHasEventTime:(BOOL) _value_ {
  hasEventTime_ = !!_value_;
}
@synthesize eventTime;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (BOOL) hasAppKey {
  return !!hasAppKey_;
}
- (void) setHasAppKey:(BOOL) _value_ {
  hasAppKey_ = !!_value_;
}
@synthesize appKey;
- (BOOL) hasDeviceId {
  return !!hasDeviceId_;
}
- (void) setHasDeviceId:(BOOL) _value_ {
  hasDeviceId_ = !!_value_;
}
@synthesize deviceId;
- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) _value_ {
  hasPage_ = !!_value_;
}
@synthesize page;
- (BOOL) hasView {
  return !!hasView_;
}
- (void) setHasView:(BOOL) _value_ {
  hasView_ = !!_value_;
}
@synthesize view;
@synthesize itemArray;
@dynamic item;
- (instancetype) init {
  if ((self = [super init])) {
    self.eventName = @"";
    self.eventTime = @"";
    self.sessionId = @"";
    self.appKey = @"";
    self.deviceId = @"";
    self.page = @"";
    self.view = [ViewItem defaultInstance];
  }
  return self;
}
static ButtonViewMsg* defaultButtonViewMsgInstance = nil;
+ (void) initialize {
  if (self == [ButtonViewMsg class]) {
    defaultButtonViewMsgInstance = [[ButtonViewMsg alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultButtonViewMsgInstance;
}
- (instancetype) defaultInstance {
  return defaultButtonViewMsgInstance;
}
- (NSArray *)item {
  return itemArray;
}
- (MapItem*)itemAtIndex:(NSUInteger)index {
  return [itemArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasEventName) {
    return NO;
  }
  if (!self.hasEventTime) {
    return NO;
  }
  if (!self.hasSessionId) {
    return NO;
  }
  if (!self.hasAppKey) {
    return NO;
  }
  if (!self.hasDeviceId) {
    return NO;
  }
  if (!self.hasPage) {
    return NO;
  }
  __block BOOL isInititem = YES;
   [self.item enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInititem = NO;
      *stop = YES;
    }
  }];
  if (!isInititem) return isInititem;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasEventName) {
    [output writeString:1 value:self.eventName];
  }
  if (self.hasEventTime) {
    [output writeString:2 value:self.eventTime];
  }
  if (self.hasSessionId) {
    [output writeString:3 value:self.sessionId];
  }
  if (self.hasAppKey) {
    [output writeString:4 value:self.appKey];
  }
  if (self.hasDeviceId) {
    [output writeString:5 value:self.deviceId];
  }
  if (self.hasPage) {
    [output writeString:6 value:self.page];
  }
  if (self.hasView) {
    [output writeMessage:7 value:self.view];
  }
  [self.itemArray enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:8 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasEventName) {
    size_ += computeStringSize(1, self.eventName);
  }
  if (self.hasEventTime) {
    size_ += computeStringSize(2, self.eventTime);
  }
  if (self.hasSessionId) {
    size_ += computeStringSize(3, self.sessionId);
  }
  if (self.hasAppKey) {
    size_ += computeStringSize(4, self.appKey);
  }
  if (self.hasDeviceId) {
    size_ += computeStringSize(5, self.deviceId);
  }
  if (self.hasPage) {
    size_ += computeStringSize(6, self.page);
  }
  if (self.hasView) {
    size_ += computeMessageSize(7, self.view);
  }
  [self.itemArray enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(8, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ButtonViewMsg*) parseFromData:(NSData*) data {
  return (ButtonViewMsg*)[[[ButtonViewMsg builder] mergeFromData:data] build];
}
+ (ButtonViewMsg*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ButtonViewMsg*)[[[ButtonViewMsg builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ButtonViewMsg*) parseFromInputStream:(NSInputStream*) input {
  return (ButtonViewMsg*)[[[ButtonViewMsg builder] mergeFromInputStream:input] build];
}
+ (ButtonViewMsg*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ButtonViewMsg*)[[[ButtonViewMsg builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ButtonViewMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ButtonViewMsg*)[[[ButtonViewMsg builder] mergeFromCodedInputStream:input] build];
}
+ (ButtonViewMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ButtonViewMsg*)[[[ButtonViewMsg builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ButtonViewMsgBuilder*) builder {
  return [[ButtonViewMsgBuilder alloc] init];
}
+ (ButtonViewMsgBuilder*) builderWithPrototype:(ButtonViewMsg*) prototype {
  return [[ButtonViewMsg builder] mergeFrom:prototype];
}
- (ButtonViewMsgBuilder*) builder {
  return [ButtonViewMsg builder];
}
- (ButtonViewMsgBuilder*) toBuilder {
  return [ButtonViewMsg builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasEventName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventName", self.eventName];
  }
  if (self.hasEventTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventTime", self.eventTime];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", self.sessionId];
  }
  if (self.hasAppKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appKey", self.appKey];
  }
  if (self.hasDeviceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceId", self.deviceId];
  }
  if (self.hasPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"page", self.page];
  }
  if (self.hasView) {
    [output appendFormat:@"%@%@ {\n", indent, @"view"];
    [self.view writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.itemArray enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"item"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasEventName) {
    [dictionary setObject: self.eventName forKey: @"eventName"];
  }
  if (self.hasEventTime) {
    [dictionary setObject: self.eventTime forKey: @"eventTime"];
  }
  if (self.hasSessionId) {
    [dictionary setObject: self.sessionId forKey: @"sessionId"];
  }
  if (self.hasAppKey) {
    [dictionary setObject: self.appKey forKey: @"appKey"];
  }
  if (self.hasDeviceId) {
    [dictionary setObject: self.deviceId forKey: @"deviceId"];
  }
  if (self.hasPage) {
    [dictionary setObject: self.page forKey: @"page"];
  }
  if (self.hasView) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.view storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"view"];
  }
  for (MapItem* element in self.itemArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"item"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ButtonViewMsg class]]) {
    return NO;
  }
  ButtonViewMsg *otherMessage = other;
  return
      self.hasEventName == otherMessage.hasEventName &&
      (!self.hasEventName || [self.eventName isEqual:otherMessage.eventName]) &&
      self.hasEventTime == otherMessage.hasEventTime &&
      (!self.hasEventTime || [self.eventTime isEqual:otherMessage.eventTime]) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || [self.sessionId isEqual:otherMessage.sessionId]) &&
      self.hasAppKey == otherMessage.hasAppKey &&
      (!self.hasAppKey || [self.appKey isEqual:otherMessage.appKey]) &&
      self.hasDeviceId == otherMessage.hasDeviceId &&
      (!self.hasDeviceId || [self.deviceId isEqual:otherMessage.deviceId]) &&
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || [self.page isEqual:otherMessage.page]) &&
      self.hasView == otherMessage.hasView &&
      (!self.hasView || [self.view isEqual:otherMessage.view]) &&
      [self.itemArray isEqualToArray:otherMessage.itemArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasEventName) {
    hashCode = hashCode * 31 + [self.eventName hash];
  }
  if (self.hasEventTime) {
    hashCode = hashCode * 31 + [self.eventTime hash];
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [self.sessionId hash];
  }
  if (self.hasAppKey) {
    hashCode = hashCode * 31 + [self.appKey hash];
  }
  if (self.hasDeviceId) {
    hashCode = hashCode * 31 + [self.deviceId hash];
  }
  if (self.hasPage) {
    hashCode = hashCode * 31 + [self.page hash];
  }
  if (self.hasView) {
    hashCode = hashCode * 31 + [self.view hash];
  }
  [self.itemArray enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ButtonViewMsgBuilder()
@property (strong) ButtonViewMsg* resultButtonViewMsg;
@end

@implementation ButtonViewMsgBuilder
@synthesize resultButtonViewMsg;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultButtonViewMsg = [[ButtonViewMsg alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultButtonViewMsg;
}
- (ButtonViewMsgBuilder*) clear {
  self.resultButtonViewMsg = [[ButtonViewMsg alloc] init];
  return self;
}
- (ButtonViewMsgBuilder*) clone {
  return [ButtonViewMsg builderWithPrototype:resultButtonViewMsg];
}
- (ButtonViewMsg*) defaultInstance {
  return [ButtonViewMsg defaultInstance];
}
- (ButtonViewMsg*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ButtonViewMsg*) buildPartial {
  ButtonViewMsg* returnMe = resultButtonViewMsg;
  self.resultButtonViewMsg = nil;
  return returnMe;
}
- (ButtonViewMsgBuilder*) mergeFrom:(ButtonViewMsg*) other {
  if (other == [ButtonViewMsg defaultInstance]) {
    return self;
  }
  if (other.hasEventName) {
    [self setEventName:other.eventName];
  }
  if (other.hasEventTime) {
    [self setEventTime:other.eventTime];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasAppKey) {
    [self setAppKey:other.appKey];
  }
  if (other.hasDeviceId) {
    [self setDeviceId:other.deviceId];
  }
  if (other.hasPage) {
    [self setPage:other.page];
  }
  if (other.hasView) {
    [self mergeView:other.view];
  }
  if (other.itemArray.count > 0) {
    if (resultButtonViewMsg.itemArray == nil) {
      resultButtonViewMsg.itemArray = [[NSMutableArray alloc] initWithArray:other.itemArray];
    } else {
      [resultButtonViewMsg.itemArray addObjectsFromArray:other.itemArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ButtonViewMsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ButtonViewMsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setEventName:[input readString]];
        break;
      }
      case 18: {
        [self setEventTime:[input readString]];
        break;
      }
      case 26: {
        [self setSessionId:[input readString]];
        break;
      }
      case 34: {
        [self setAppKey:[input readString]];
        break;
      }
      case 42: {
        [self setDeviceId:[input readString]];
        break;
      }
      case 50: {
        [self setPage:[input readString]];
        break;
      }
      case 58: {
        ViewItemBuilder* subBuilder = [ViewItem builder];
        if (self.hasView) {
          [subBuilder mergeFrom:self.view];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setView:[subBuilder buildPartial]];
        break;
      }
      case 66: {
        MapItemBuilder* subBuilder = [MapItem builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addItem:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasEventName {
  return resultButtonViewMsg.hasEventName;
}
- (NSString*) eventName {
  return resultButtonViewMsg.eventName;
}
- (ButtonViewMsgBuilder*) setEventName:(NSString*) value {
  resultButtonViewMsg.hasEventName = YES;
  resultButtonViewMsg.eventName = value;
  return self;
}
- (ButtonViewMsgBuilder*) clearEventName {
  resultButtonViewMsg.hasEventName = NO;
  resultButtonViewMsg.eventName = @"";
  return self;
}
- (BOOL) hasEventTime {
  return resultButtonViewMsg.hasEventTime;
}
- (NSString*) eventTime {
  return resultButtonViewMsg.eventTime;
}
- (ButtonViewMsgBuilder*) setEventTime:(NSString*) value {
  resultButtonViewMsg.hasEventTime = YES;
  resultButtonViewMsg.eventTime = value;
  return self;
}
- (ButtonViewMsgBuilder*) clearEventTime {
  resultButtonViewMsg.hasEventTime = NO;
  resultButtonViewMsg.eventTime = @"";
  return self;
}
- (BOOL) hasSessionId {
  return resultButtonViewMsg.hasSessionId;
}
- (NSString*) sessionId {
  return resultButtonViewMsg.sessionId;
}
- (ButtonViewMsgBuilder*) setSessionId:(NSString*) value {
  resultButtonViewMsg.hasSessionId = YES;
  resultButtonViewMsg.sessionId = value;
  return self;
}
- (ButtonViewMsgBuilder*) clearSessionId {
  resultButtonViewMsg.hasSessionId = NO;
  resultButtonViewMsg.sessionId = @"";
  return self;
}
- (BOOL) hasAppKey {
  return resultButtonViewMsg.hasAppKey;
}
- (NSString*) appKey {
  return resultButtonViewMsg.appKey;
}
- (ButtonViewMsgBuilder*) setAppKey:(NSString*) value {
  resultButtonViewMsg.hasAppKey = YES;
  resultButtonViewMsg.appKey = value;
  return self;
}
- (ButtonViewMsgBuilder*) clearAppKey {
  resultButtonViewMsg.hasAppKey = NO;
  resultButtonViewMsg.appKey = @"";
  return self;
}
- (BOOL) hasDeviceId {
  return resultButtonViewMsg.hasDeviceId;
}
- (NSString*) deviceId {
  return resultButtonViewMsg.deviceId;
}
- (ButtonViewMsgBuilder*) setDeviceId:(NSString*) value {
  resultButtonViewMsg.hasDeviceId = YES;
  resultButtonViewMsg.deviceId = value;
  return self;
}
- (ButtonViewMsgBuilder*) clearDeviceId {
  resultButtonViewMsg.hasDeviceId = NO;
  resultButtonViewMsg.deviceId = @"";
  return self;
}
- (BOOL) hasPage {
  return resultButtonViewMsg.hasPage;
}
- (NSString*) page {
  return resultButtonViewMsg.page;
}
- (ButtonViewMsgBuilder*) setPage:(NSString*) value {
  resultButtonViewMsg.hasPage = YES;
  resultButtonViewMsg.page = value;
  return self;
}
- (ButtonViewMsgBuilder*) clearPage {
  resultButtonViewMsg.hasPage = NO;
  resultButtonViewMsg.page = @"";
  return self;
}
- (BOOL) hasView {
  return resultButtonViewMsg.hasView;
}
- (ViewItem*) view {
  return resultButtonViewMsg.view;
}
- (ButtonViewMsgBuilder*) setView:(ViewItem*) value {
  resultButtonViewMsg.hasView = YES;
  resultButtonViewMsg.view = value;
  return self;
}
- (ButtonViewMsgBuilder*) setViewBuilder:(ViewItemBuilder*) builderForValue {
  return [self setView:[builderForValue build]];
}
- (ButtonViewMsgBuilder*) mergeView:(ViewItem*) value {
  if (resultButtonViewMsg.hasView &&
      resultButtonViewMsg.view != [ViewItem defaultInstance]) {
    resultButtonViewMsg.view =
      [[[ViewItem builderWithPrototype:resultButtonViewMsg.view] mergeFrom:value] buildPartial];
  } else {
    resultButtonViewMsg.view = value;
  }
  resultButtonViewMsg.hasView = YES;
  return self;
}
- (ButtonViewMsgBuilder*) clearView {
  resultButtonViewMsg.hasView = NO;
  resultButtonViewMsg.view = [ViewItem defaultInstance];
  return self;
}
- (NSMutableArray *)item {
  return resultButtonViewMsg.itemArray;
}
- (MapItem*)itemAtIndex:(NSUInteger)index {
  return [resultButtonViewMsg itemAtIndex:index];
}
- (ButtonViewMsgBuilder *)addItem:(MapItem*)value {
  if (resultButtonViewMsg.itemArray == nil) {
    resultButtonViewMsg.itemArray = [[NSMutableArray alloc]init];
  }
  [resultButtonViewMsg.itemArray addObject:value];
  return self;
}
- (ButtonViewMsgBuilder *)setItemArray:(NSArray *)array {
  resultButtonViewMsg.itemArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ButtonViewMsgBuilder *)clearItem {
  resultButtonViewMsg.itemArray = nil;
  return self;
}
@end

@interface ListItemClickMsg ()
@property (strong) NSString* eventName;
@property (strong) NSString* eventTime;
@property (strong) NSString* sessionId;
@property (strong) NSString* appKey;
@property (strong) NSString* deviceId;
@property (strong) NSString* page;
@property (strong) NSString* indexPath;
@property (strong) ViewItem* view;
@property (strong) NSMutableArray * itemArray;
@end

@implementation ListItemClickMsg

- (BOOL) hasEventName {
  return !!hasEventName_;
}
- (void) setHasEventName:(BOOL) _value_ {
  hasEventName_ = !!_value_;
}
@synthesize eventName;
- (BOOL) hasEventTime {
  return !!hasEventTime_;
}
- (void) setHasEventTime:(BOOL) _value_ {
  hasEventTime_ = !!_value_;
}
@synthesize eventTime;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (BOOL) hasAppKey {
  return !!hasAppKey_;
}
- (void) setHasAppKey:(BOOL) _value_ {
  hasAppKey_ = !!_value_;
}
@synthesize appKey;
- (BOOL) hasDeviceId {
  return !!hasDeviceId_;
}
- (void) setHasDeviceId:(BOOL) _value_ {
  hasDeviceId_ = !!_value_;
}
@synthesize deviceId;
- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) _value_ {
  hasPage_ = !!_value_;
}
@synthesize page;
- (BOOL) hasIndexPath {
  return !!hasIndexPath_;
}
- (void) setHasIndexPath:(BOOL) _value_ {
  hasIndexPath_ = !!_value_;
}
@synthesize indexPath;
- (BOOL) hasView {
  return !!hasView_;
}
- (void) setHasView:(BOOL) _value_ {
  hasView_ = !!_value_;
}
@synthesize view;
@synthesize itemArray;
@dynamic item;
- (instancetype) init {
  if ((self = [super init])) {
    self.eventName = @"";
    self.eventTime = @"";
    self.sessionId = @"";
    self.appKey = @"";
    self.deviceId = @"";
    self.page = @"";
    self.indexPath = @"";
    self.view = [ViewItem defaultInstance];
  }
  return self;
}
static ListItemClickMsg* defaultListItemClickMsgInstance = nil;
+ (void) initialize {
  if (self == [ListItemClickMsg class]) {
    defaultListItemClickMsgInstance = [[ListItemClickMsg alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultListItemClickMsgInstance;
}
- (instancetype) defaultInstance {
  return defaultListItemClickMsgInstance;
}
- (NSArray *)item {
  return itemArray;
}
- (MapItem*)itemAtIndex:(NSUInteger)index {
  return [itemArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasEventName) {
    return NO;
  }
  if (!self.hasEventTime) {
    return NO;
  }
  if (!self.hasSessionId) {
    return NO;
  }
  if (!self.hasAppKey) {
    return NO;
  }
  if (!self.hasDeviceId) {
    return NO;
  }
  if (!self.hasPage) {
    return NO;
  }
  __block BOOL isInititem = YES;
   [self.item enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInititem = NO;
      *stop = YES;
    }
  }];
  if (!isInititem) return isInititem;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasEventName) {
    [output writeString:1 value:self.eventName];
  }
  if (self.hasEventTime) {
    [output writeString:2 value:self.eventTime];
  }
  if (self.hasSessionId) {
    [output writeString:3 value:self.sessionId];
  }
  if (self.hasAppKey) {
    [output writeString:4 value:self.appKey];
  }
  if (self.hasDeviceId) {
    [output writeString:5 value:self.deviceId];
  }
  if (self.hasPage) {
    [output writeString:6 value:self.page];
  }
  if (self.hasIndexPath) {
    [output writeString:7 value:self.indexPath];
  }
  if (self.hasView) {
    [output writeMessage:8 value:self.view];
  }
  [self.itemArray enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:9 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasEventName) {
    size_ += computeStringSize(1, self.eventName);
  }
  if (self.hasEventTime) {
    size_ += computeStringSize(2, self.eventTime);
  }
  if (self.hasSessionId) {
    size_ += computeStringSize(3, self.sessionId);
  }
  if (self.hasAppKey) {
    size_ += computeStringSize(4, self.appKey);
  }
  if (self.hasDeviceId) {
    size_ += computeStringSize(5, self.deviceId);
  }
  if (self.hasPage) {
    size_ += computeStringSize(6, self.page);
  }
  if (self.hasIndexPath) {
    size_ += computeStringSize(7, self.indexPath);
  }
  if (self.hasView) {
    size_ += computeMessageSize(8, self.view);
  }
  [self.itemArray enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(9, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ListItemClickMsg*) parseFromData:(NSData*) data {
  return (ListItemClickMsg*)[[[ListItemClickMsg builder] mergeFromData:data] build];
}
+ (ListItemClickMsg*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ListItemClickMsg*)[[[ListItemClickMsg builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ListItemClickMsg*) parseFromInputStream:(NSInputStream*) input {
  return (ListItemClickMsg*)[[[ListItemClickMsg builder] mergeFromInputStream:input] build];
}
+ (ListItemClickMsg*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ListItemClickMsg*)[[[ListItemClickMsg builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ListItemClickMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ListItemClickMsg*)[[[ListItemClickMsg builder] mergeFromCodedInputStream:input] build];
}
+ (ListItemClickMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ListItemClickMsg*)[[[ListItemClickMsg builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ListItemClickMsgBuilder*) builder {
  return [[ListItemClickMsgBuilder alloc] init];
}
+ (ListItemClickMsgBuilder*) builderWithPrototype:(ListItemClickMsg*) prototype {
  return [[ListItemClickMsg builder] mergeFrom:prototype];
}
- (ListItemClickMsgBuilder*) builder {
  return [ListItemClickMsg builder];
}
- (ListItemClickMsgBuilder*) toBuilder {
  return [ListItemClickMsg builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasEventName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventName", self.eventName];
  }
  if (self.hasEventTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventTime", self.eventTime];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", self.sessionId];
  }
  if (self.hasAppKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appKey", self.appKey];
  }
  if (self.hasDeviceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceId", self.deviceId];
  }
  if (self.hasPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"page", self.page];
  }
  if (self.hasIndexPath) {
    [output appendFormat:@"%@%@: %@\n", indent, @"indexPath", self.indexPath];
  }
  if (self.hasView) {
    [output appendFormat:@"%@%@ {\n", indent, @"view"];
    [self.view writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.itemArray enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"item"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasEventName) {
    [dictionary setObject: self.eventName forKey: @"eventName"];
  }
  if (self.hasEventTime) {
    [dictionary setObject: self.eventTime forKey: @"eventTime"];
  }
  if (self.hasSessionId) {
    [dictionary setObject: self.sessionId forKey: @"sessionId"];
  }
  if (self.hasAppKey) {
    [dictionary setObject: self.appKey forKey: @"appKey"];
  }
  if (self.hasDeviceId) {
    [dictionary setObject: self.deviceId forKey: @"deviceId"];
  }
  if (self.hasPage) {
    [dictionary setObject: self.page forKey: @"page"];
  }
  if (self.hasIndexPath) {
    [dictionary setObject: self.indexPath forKey: @"indexPath"];
  }
  if (self.hasView) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.view storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"view"];
  }
  for (MapItem* element in self.itemArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"item"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ListItemClickMsg class]]) {
    return NO;
  }
  ListItemClickMsg *otherMessage = other;
  return
      self.hasEventName == otherMessage.hasEventName &&
      (!self.hasEventName || [self.eventName isEqual:otherMessage.eventName]) &&
      self.hasEventTime == otherMessage.hasEventTime &&
      (!self.hasEventTime || [self.eventTime isEqual:otherMessage.eventTime]) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || [self.sessionId isEqual:otherMessage.sessionId]) &&
      self.hasAppKey == otherMessage.hasAppKey &&
      (!self.hasAppKey || [self.appKey isEqual:otherMessage.appKey]) &&
      self.hasDeviceId == otherMessage.hasDeviceId &&
      (!self.hasDeviceId || [self.deviceId isEqual:otherMessage.deviceId]) &&
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || [self.page isEqual:otherMessage.page]) &&
      self.hasIndexPath == otherMessage.hasIndexPath &&
      (!self.hasIndexPath || [self.indexPath isEqual:otherMessage.indexPath]) &&
      self.hasView == otherMessage.hasView &&
      (!self.hasView || [self.view isEqual:otherMessage.view]) &&
      [self.itemArray isEqualToArray:otherMessage.itemArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasEventName) {
    hashCode = hashCode * 31 + [self.eventName hash];
  }
  if (self.hasEventTime) {
    hashCode = hashCode * 31 + [self.eventTime hash];
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [self.sessionId hash];
  }
  if (self.hasAppKey) {
    hashCode = hashCode * 31 + [self.appKey hash];
  }
  if (self.hasDeviceId) {
    hashCode = hashCode * 31 + [self.deviceId hash];
  }
  if (self.hasPage) {
    hashCode = hashCode * 31 + [self.page hash];
  }
  if (self.hasIndexPath) {
    hashCode = hashCode * 31 + [self.indexPath hash];
  }
  if (self.hasView) {
    hashCode = hashCode * 31 + [self.view hash];
  }
  [self.itemArray enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ListItemClickMsgBuilder()
@property (strong) ListItemClickMsg* resultListItemClickMsg;
@end

@implementation ListItemClickMsgBuilder
@synthesize resultListItemClickMsg;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultListItemClickMsg = [[ListItemClickMsg alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultListItemClickMsg;
}
- (ListItemClickMsgBuilder*) clear {
  self.resultListItemClickMsg = [[ListItemClickMsg alloc] init];
  return self;
}
- (ListItemClickMsgBuilder*) clone {
  return [ListItemClickMsg builderWithPrototype:resultListItemClickMsg];
}
- (ListItemClickMsg*) defaultInstance {
  return [ListItemClickMsg defaultInstance];
}
- (ListItemClickMsg*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ListItemClickMsg*) buildPartial {
  ListItemClickMsg* returnMe = resultListItemClickMsg;
  self.resultListItemClickMsg = nil;
  return returnMe;
}
- (ListItemClickMsgBuilder*) mergeFrom:(ListItemClickMsg*) other {
  if (other == [ListItemClickMsg defaultInstance]) {
    return self;
  }
  if (other.hasEventName) {
    [self setEventName:other.eventName];
  }
  if (other.hasEventTime) {
    [self setEventTime:other.eventTime];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasAppKey) {
    [self setAppKey:other.appKey];
  }
  if (other.hasDeviceId) {
    [self setDeviceId:other.deviceId];
  }
  if (other.hasPage) {
    [self setPage:other.page];
  }
  if (other.hasIndexPath) {
    [self setIndexPath:other.indexPath];
  }
  if (other.hasView) {
    [self mergeView:other.view];
  }
  if (other.itemArray.count > 0) {
    if (resultListItemClickMsg.itemArray == nil) {
      resultListItemClickMsg.itemArray = [[NSMutableArray alloc] initWithArray:other.itemArray];
    } else {
      [resultListItemClickMsg.itemArray addObjectsFromArray:other.itemArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ListItemClickMsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ListItemClickMsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setEventName:[input readString]];
        break;
      }
      case 18: {
        [self setEventTime:[input readString]];
        break;
      }
      case 26: {
        [self setSessionId:[input readString]];
        break;
      }
      case 34: {
        [self setAppKey:[input readString]];
        break;
      }
      case 42: {
        [self setDeviceId:[input readString]];
        break;
      }
      case 50: {
        [self setPage:[input readString]];
        break;
      }
      case 58: {
        [self setIndexPath:[input readString]];
        break;
      }
      case 66: {
        ViewItemBuilder* subBuilder = [ViewItem builder];
        if (self.hasView) {
          [subBuilder mergeFrom:self.view];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setView:[subBuilder buildPartial]];
        break;
      }
      case 74: {
        MapItemBuilder* subBuilder = [MapItem builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addItem:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasEventName {
  return resultListItemClickMsg.hasEventName;
}
- (NSString*) eventName {
  return resultListItemClickMsg.eventName;
}
- (ListItemClickMsgBuilder*) setEventName:(NSString*) value {
  resultListItemClickMsg.hasEventName = YES;
  resultListItemClickMsg.eventName = value;
  return self;
}
- (ListItemClickMsgBuilder*) clearEventName {
  resultListItemClickMsg.hasEventName = NO;
  resultListItemClickMsg.eventName = @"";
  return self;
}
- (BOOL) hasEventTime {
  return resultListItemClickMsg.hasEventTime;
}
- (NSString*) eventTime {
  return resultListItemClickMsg.eventTime;
}
- (ListItemClickMsgBuilder*) setEventTime:(NSString*) value {
  resultListItemClickMsg.hasEventTime = YES;
  resultListItemClickMsg.eventTime = value;
  return self;
}
- (ListItemClickMsgBuilder*) clearEventTime {
  resultListItemClickMsg.hasEventTime = NO;
  resultListItemClickMsg.eventTime = @"";
  return self;
}
- (BOOL) hasSessionId {
  return resultListItemClickMsg.hasSessionId;
}
- (NSString*) sessionId {
  return resultListItemClickMsg.sessionId;
}
- (ListItemClickMsgBuilder*) setSessionId:(NSString*) value {
  resultListItemClickMsg.hasSessionId = YES;
  resultListItemClickMsg.sessionId = value;
  return self;
}
- (ListItemClickMsgBuilder*) clearSessionId {
  resultListItemClickMsg.hasSessionId = NO;
  resultListItemClickMsg.sessionId = @"";
  return self;
}
- (BOOL) hasAppKey {
  return resultListItemClickMsg.hasAppKey;
}
- (NSString*) appKey {
  return resultListItemClickMsg.appKey;
}
- (ListItemClickMsgBuilder*) setAppKey:(NSString*) value {
  resultListItemClickMsg.hasAppKey = YES;
  resultListItemClickMsg.appKey = value;
  return self;
}
- (ListItemClickMsgBuilder*) clearAppKey {
  resultListItemClickMsg.hasAppKey = NO;
  resultListItemClickMsg.appKey = @"";
  return self;
}
- (BOOL) hasDeviceId {
  return resultListItemClickMsg.hasDeviceId;
}
- (NSString*) deviceId {
  return resultListItemClickMsg.deviceId;
}
- (ListItemClickMsgBuilder*) setDeviceId:(NSString*) value {
  resultListItemClickMsg.hasDeviceId = YES;
  resultListItemClickMsg.deviceId = value;
  return self;
}
- (ListItemClickMsgBuilder*) clearDeviceId {
  resultListItemClickMsg.hasDeviceId = NO;
  resultListItemClickMsg.deviceId = @"";
  return self;
}
- (BOOL) hasPage {
  return resultListItemClickMsg.hasPage;
}
- (NSString*) page {
  return resultListItemClickMsg.page;
}
- (ListItemClickMsgBuilder*) setPage:(NSString*) value {
  resultListItemClickMsg.hasPage = YES;
  resultListItemClickMsg.page = value;
  return self;
}
- (ListItemClickMsgBuilder*) clearPage {
  resultListItemClickMsg.hasPage = NO;
  resultListItemClickMsg.page = @"";
  return self;
}
- (BOOL) hasIndexPath {
  return resultListItemClickMsg.hasIndexPath;
}
- (NSString*) indexPath {
  return resultListItemClickMsg.indexPath;
}
- (ListItemClickMsgBuilder*) setIndexPath:(NSString*) value {
  resultListItemClickMsg.hasIndexPath = YES;
  resultListItemClickMsg.indexPath = value;
  return self;
}
- (ListItemClickMsgBuilder*) clearIndexPath {
  resultListItemClickMsg.hasIndexPath = NO;
  resultListItemClickMsg.indexPath = @"";
  return self;
}
- (BOOL) hasView {
  return resultListItemClickMsg.hasView;
}
- (ViewItem*) view {
  return resultListItemClickMsg.view;
}
- (ListItemClickMsgBuilder*) setView:(ViewItem*) value {
  resultListItemClickMsg.hasView = YES;
  resultListItemClickMsg.view = value;
  return self;
}
- (ListItemClickMsgBuilder*) setViewBuilder:(ViewItemBuilder*) builderForValue {
  return [self setView:[builderForValue build]];
}
- (ListItemClickMsgBuilder*) mergeView:(ViewItem*) value {
  if (resultListItemClickMsg.hasView &&
      resultListItemClickMsg.view != [ViewItem defaultInstance]) {
    resultListItemClickMsg.view =
      [[[ViewItem builderWithPrototype:resultListItemClickMsg.view] mergeFrom:value] buildPartial];
  } else {
    resultListItemClickMsg.view = value;
  }
  resultListItemClickMsg.hasView = YES;
  return self;
}
- (ListItemClickMsgBuilder*) clearView {
  resultListItemClickMsg.hasView = NO;
  resultListItemClickMsg.view = [ViewItem defaultInstance];
  return self;
}
- (NSMutableArray *)item {
  return resultListItemClickMsg.itemArray;
}
- (MapItem*)itemAtIndex:(NSUInteger)index {
  return [resultListItemClickMsg itemAtIndex:index];
}
- (ListItemClickMsgBuilder *)addItem:(MapItem*)value {
  if (resultListItemClickMsg.itemArray == nil) {
    resultListItemClickMsg.itemArray = [[NSMutableArray alloc]init];
  }
  [resultListItemClickMsg.itemArray addObject:value];
  return self;
}
- (ListItemClickMsgBuilder *)setItemArray:(NSArray *)array {
  resultListItemClickMsg.itemArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ListItemClickMsgBuilder *)clearItem {
  resultListItemClickMsg.itemArray = nil;
  return self;
}
@end

@interface ScrollViewMsg ()
@property (strong) NSString* eventName;
@property (strong) NSString* eventTime;
@property (strong) NSString* sessionId;
@property (strong) NSString* appKey;
@property (strong) NSString* deviceId;
@property (strong) NSString* page;
@property (strong) NSString* direction;
@property (strong) NSString* scale;
@property (strong) ViewItem* view;
@end

@implementation ScrollViewMsg

- (BOOL) hasEventName {
  return !!hasEventName_;
}
- (void) setHasEventName:(BOOL) _value_ {
  hasEventName_ = !!_value_;
}
@synthesize eventName;
- (BOOL) hasEventTime {
  return !!hasEventTime_;
}
- (void) setHasEventTime:(BOOL) _value_ {
  hasEventTime_ = !!_value_;
}
@synthesize eventTime;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (BOOL) hasAppKey {
  return !!hasAppKey_;
}
- (void) setHasAppKey:(BOOL) _value_ {
  hasAppKey_ = !!_value_;
}
@synthesize appKey;
- (BOOL) hasDeviceId {
  return !!hasDeviceId_;
}
- (void) setHasDeviceId:(BOOL) _value_ {
  hasDeviceId_ = !!_value_;
}
@synthesize deviceId;
- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) _value_ {
  hasPage_ = !!_value_;
}
@synthesize page;
- (BOOL) hasDirection {
  return !!hasDirection_;
}
- (void) setHasDirection:(BOOL) _value_ {
  hasDirection_ = !!_value_;
}
@synthesize direction;
- (BOOL) hasScale {
  return !!hasScale_;
}
- (void) setHasScale:(BOOL) _value_ {
  hasScale_ = !!_value_;
}
@synthesize scale;
- (BOOL) hasView {
  return !!hasView_;
}
- (void) setHasView:(BOOL) _value_ {
  hasView_ = !!_value_;
}
@synthesize view;
- (instancetype) init {
  if ((self = [super init])) {
    self.eventName = @"";
    self.eventTime = @"";
    self.sessionId = @"";
    self.appKey = @"";
    self.deviceId = @"";
    self.page = @"";
    self.direction = @"";
    self.scale = @"";
    self.view = [ViewItem defaultInstance];
  }
  return self;
}
static ScrollViewMsg* defaultScrollViewMsgInstance = nil;
+ (void) initialize {
  if (self == [ScrollViewMsg class]) {
    defaultScrollViewMsgInstance = [[ScrollViewMsg alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultScrollViewMsgInstance;
}
- (instancetype) defaultInstance {
  return defaultScrollViewMsgInstance;
}
- (BOOL) isInitialized {
  if (!self.hasEventName) {
    return NO;
  }
  if (!self.hasEventTime) {
    return NO;
  }
  if (!self.hasSessionId) {
    return NO;
  }
  if (!self.hasAppKey) {
    return NO;
  }
  if (!self.hasDeviceId) {
    return NO;
  }
  if (!self.hasPage) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasEventName) {
    [output writeString:1 value:self.eventName];
  }
  if (self.hasEventTime) {
    [output writeString:2 value:self.eventTime];
  }
  if (self.hasSessionId) {
    [output writeString:3 value:self.sessionId];
  }
  if (self.hasAppKey) {
    [output writeString:4 value:self.appKey];
  }
  if (self.hasDeviceId) {
    [output writeString:5 value:self.deviceId];
  }
  if (self.hasPage) {
    [output writeString:6 value:self.page];
  }
  if (self.hasDirection) {
    [output writeString:7 value:self.direction];
  }
  if (self.hasScale) {
    [output writeString:8 value:self.scale];
  }
  if (self.hasView) {
    [output writeMessage:9 value:self.view];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasEventName) {
    size_ += computeStringSize(1, self.eventName);
  }
  if (self.hasEventTime) {
    size_ += computeStringSize(2, self.eventTime);
  }
  if (self.hasSessionId) {
    size_ += computeStringSize(3, self.sessionId);
  }
  if (self.hasAppKey) {
    size_ += computeStringSize(4, self.appKey);
  }
  if (self.hasDeviceId) {
    size_ += computeStringSize(5, self.deviceId);
  }
  if (self.hasPage) {
    size_ += computeStringSize(6, self.page);
  }
  if (self.hasDirection) {
    size_ += computeStringSize(7, self.direction);
  }
  if (self.hasScale) {
    size_ += computeStringSize(8, self.scale);
  }
  if (self.hasView) {
    size_ += computeMessageSize(9, self.view);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ScrollViewMsg*) parseFromData:(NSData*) data {
  return (ScrollViewMsg*)[[[ScrollViewMsg builder] mergeFromData:data] build];
}
+ (ScrollViewMsg*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ScrollViewMsg*)[[[ScrollViewMsg builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ScrollViewMsg*) parseFromInputStream:(NSInputStream*) input {
  return (ScrollViewMsg*)[[[ScrollViewMsg builder] mergeFromInputStream:input] build];
}
+ (ScrollViewMsg*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ScrollViewMsg*)[[[ScrollViewMsg builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ScrollViewMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ScrollViewMsg*)[[[ScrollViewMsg builder] mergeFromCodedInputStream:input] build];
}
+ (ScrollViewMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ScrollViewMsg*)[[[ScrollViewMsg builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ScrollViewMsgBuilder*) builder {
  return [[ScrollViewMsgBuilder alloc] init];
}
+ (ScrollViewMsgBuilder*) builderWithPrototype:(ScrollViewMsg*) prototype {
  return [[ScrollViewMsg builder] mergeFrom:prototype];
}
- (ScrollViewMsgBuilder*) builder {
  return [ScrollViewMsg builder];
}
- (ScrollViewMsgBuilder*) toBuilder {
  return [ScrollViewMsg builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasEventName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventName", self.eventName];
  }
  if (self.hasEventTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventTime", self.eventTime];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", self.sessionId];
  }
  if (self.hasAppKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appKey", self.appKey];
  }
  if (self.hasDeviceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceId", self.deviceId];
  }
  if (self.hasPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"page", self.page];
  }
  if (self.hasDirection) {
    [output appendFormat:@"%@%@: %@\n", indent, @"direction", self.direction];
  }
  if (self.hasScale) {
    [output appendFormat:@"%@%@: %@\n", indent, @"scale", self.scale];
  }
  if (self.hasView) {
    [output appendFormat:@"%@%@ {\n", indent, @"view"];
    [self.view writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasEventName) {
    [dictionary setObject: self.eventName forKey: @"eventName"];
  }
  if (self.hasEventTime) {
    [dictionary setObject: self.eventTime forKey: @"eventTime"];
  }
  if (self.hasSessionId) {
    [dictionary setObject: self.sessionId forKey: @"sessionId"];
  }
  if (self.hasAppKey) {
    [dictionary setObject: self.appKey forKey: @"appKey"];
  }
  if (self.hasDeviceId) {
    [dictionary setObject: self.deviceId forKey: @"deviceId"];
  }
  if (self.hasPage) {
    [dictionary setObject: self.page forKey: @"page"];
  }
  if (self.hasDirection) {
    [dictionary setObject: self.direction forKey: @"direction"];
  }
  if (self.hasScale) {
    [dictionary setObject: self.scale forKey: @"scale"];
  }
  if (self.hasView) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.view storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"view"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ScrollViewMsg class]]) {
    return NO;
  }
  ScrollViewMsg *otherMessage = other;
  return
      self.hasEventName == otherMessage.hasEventName &&
      (!self.hasEventName || [self.eventName isEqual:otherMessage.eventName]) &&
      self.hasEventTime == otherMessage.hasEventTime &&
      (!self.hasEventTime || [self.eventTime isEqual:otherMessage.eventTime]) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || [self.sessionId isEqual:otherMessage.sessionId]) &&
      self.hasAppKey == otherMessage.hasAppKey &&
      (!self.hasAppKey || [self.appKey isEqual:otherMessage.appKey]) &&
      self.hasDeviceId == otherMessage.hasDeviceId &&
      (!self.hasDeviceId || [self.deviceId isEqual:otherMessage.deviceId]) &&
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || [self.page isEqual:otherMessage.page]) &&
      self.hasDirection == otherMessage.hasDirection &&
      (!self.hasDirection || [self.direction isEqual:otherMessage.direction]) &&
      self.hasScale == otherMessage.hasScale &&
      (!self.hasScale || [self.scale isEqual:otherMessage.scale]) &&
      self.hasView == otherMessage.hasView &&
      (!self.hasView || [self.view isEqual:otherMessage.view]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasEventName) {
    hashCode = hashCode * 31 + [self.eventName hash];
  }
  if (self.hasEventTime) {
    hashCode = hashCode * 31 + [self.eventTime hash];
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [self.sessionId hash];
  }
  if (self.hasAppKey) {
    hashCode = hashCode * 31 + [self.appKey hash];
  }
  if (self.hasDeviceId) {
    hashCode = hashCode * 31 + [self.deviceId hash];
  }
  if (self.hasPage) {
    hashCode = hashCode * 31 + [self.page hash];
  }
  if (self.hasDirection) {
    hashCode = hashCode * 31 + [self.direction hash];
  }
  if (self.hasScale) {
    hashCode = hashCode * 31 + [self.scale hash];
  }
  if (self.hasView) {
    hashCode = hashCode * 31 + [self.view hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ScrollViewMsgBuilder()
@property (strong) ScrollViewMsg* resultScrollViewMsg;
@end

@implementation ScrollViewMsgBuilder
@synthesize resultScrollViewMsg;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultScrollViewMsg = [[ScrollViewMsg alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultScrollViewMsg;
}
- (ScrollViewMsgBuilder*) clear {
  self.resultScrollViewMsg = [[ScrollViewMsg alloc] init];
  return self;
}
- (ScrollViewMsgBuilder*) clone {
  return [ScrollViewMsg builderWithPrototype:resultScrollViewMsg];
}
- (ScrollViewMsg*) defaultInstance {
  return [ScrollViewMsg defaultInstance];
}
- (ScrollViewMsg*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ScrollViewMsg*) buildPartial {
  ScrollViewMsg* returnMe = resultScrollViewMsg;
  self.resultScrollViewMsg = nil;
  return returnMe;
}
- (ScrollViewMsgBuilder*) mergeFrom:(ScrollViewMsg*) other {
  if (other == [ScrollViewMsg defaultInstance]) {
    return self;
  }
  if (other.hasEventName) {
    [self setEventName:other.eventName];
  }
  if (other.hasEventTime) {
    [self setEventTime:other.eventTime];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasAppKey) {
    [self setAppKey:other.appKey];
  }
  if (other.hasDeviceId) {
    [self setDeviceId:other.deviceId];
  }
  if (other.hasPage) {
    [self setPage:other.page];
  }
  if (other.hasDirection) {
    [self setDirection:other.direction];
  }
  if (other.hasScale) {
    [self setScale:other.scale];
  }
  if (other.hasView) {
    [self mergeView:other.view];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ScrollViewMsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ScrollViewMsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setEventName:[input readString]];
        break;
      }
      case 18: {
        [self setEventTime:[input readString]];
        break;
      }
      case 26: {
        [self setSessionId:[input readString]];
        break;
      }
      case 34: {
        [self setAppKey:[input readString]];
        break;
      }
      case 42: {
        [self setDeviceId:[input readString]];
        break;
      }
      case 50: {
        [self setPage:[input readString]];
        break;
      }
      case 58: {
        [self setDirection:[input readString]];
        break;
      }
      case 66: {
        [self setScale:[input readString]];
        break;
      }
      case 74: {
        ViewItemBuilder* subBuilder = [ViewItem builder];
        if (self.hasView) {
          [subBuilder mergeFrom:self.view];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setView:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasEventName {
  return resultScrollViewMsg.hasEventName;
}
- (NSString*) eventName {
  return resultScrollViewMsg.eventName;
}
- (ScrollViewMsgBuilder*) setEventName:(NSString*) value {
  resultScrollViewMsg.hasEventName = YES;
  resultScrollViewMsg.eventName = value;
  return self;
}
- (ScrollViewMsgBuilder*) clearEventName {
  resultScrollViewMsg.hasEventName = NO;
  resultScrollViewMsg.eventName = @"";
  return self;
}
- (BOOL) hasEventTime {
  return resultScrollViewMsg.hasEventTime;
}
- (NSString*) eventTime {
  return resultScrollViewMsg.eventTime;
}
- (ScrollViewMsgBuilder*) setEventTime:(NSString*) value {
  resultScrollViewMsg.hasEventTime = YES;
  resultScrollViewMsg.eventTime = value;
  return self;
}
- (ScrollViewMsgBuilder*) clearEventTime {
  resultScrollViewMsg.hasEventTime = NO;
  resultScrollViewMsg.eventTime = @"";
  return self;
}
- (BOOL) hasSessionId {
  return resultScrollViewMsg.hasSessionId;
}
- (NSString*) sessionId {
  return resultScrollViewMsg.sessionId;
}
- (ScrollViewMsgBuilder*) setSessionId:(NSString*) value {
  resultScrollViewMsg.hasSessionId = YES;
  resultScrollViewMsg.sessionId = value;
  return self;
}
- (ScrollViewMsgBuilder*) clearSessionId {
  resultScrollViewMsg.hasSessionId = NO;
  resultScrollViewMsg.sessionId = @"";
  return self;
}
- (BOOL) hasAppKey {
  return resultScrollViewMsg.hasAppKey;
}
- (NSString*) appKey {
  return resultScrollViewMsg.appKey;
}
- (ScrollViewMsgBuilder*) setAppKey:(NSString*) value {
  resultScrollViewMsg.hasAppKey = YES;
  resultScrollViewMsg.appKey = value;
  return self;
}
- (ScrollViewMsgBuilder*) clearAppKey {
  resultScrollViewMsg.hasAppKey = NO;
  resultScrollViewMsg.appKey = @"";
  return self;
}
- (BOOL) hasDeviceId {
  return resultScrollViewMsg.hasDeviceId;
}
- (NSString*) deviceId {
  return resultScrollViewMsg.deviceId;
}
- (ScrollViewMsgBuilder*) setDeviceId:(NSString*) value {
  resultScrollViewMsg.hasDeviceId = YES;
  resultScrollViewMsg.deviceId = value;
  return self;
}
- (ScrollViewMsgBuilder*) clearDeviceId {
  resultScrollViewMsg.hasDeviceId = NO;
  resultScrollViewMsg.deviceId = @"";
  return self;
}
- (BOOL) hasPage {
  return resultScrollViewMsg.hasPage;
}
- (NSString*) page {
  return resultScrollViewMsg.page;
}
- (ScrollViewMsgBuilder*) setPage:(NSString*) value {
  resultScrollViewMsg.hasPage = YES;
  resultScrollViewMsg.page = value;
  return self;
}
- (ScrollViewMsgBuilder*) clearPage {
  resultScrollViewMsg.hasPage = NO;
  resultScrollViewMsg.page = @"";
  return self;
}
- (BOOL) hasDirection {
  return resultScrollViewMsg.hasDirection;
}
- (NSString*) direction {
  return resultScrollViewMsg.direction;
}
- (ScrollViewMsgBuilder*) setDirection:(NSString*) value {
  resultScrollViewMsg.hasDirection = YES;
  resultScrollViewMsg.direction = value;
  return self;
}
- (ScrollViewMsgBuilder*) clearDirection {
  resultScrollViewMsg.hasDirection = NO;
  resultScrollViewMsg.direction = @"";
  return self;
}
- (BOOL) hasScale {
  return resultScrollViewMsg.hasScale;
}
- (NSString*) scale {
  return resultScrollViewMsg.scale;
}
- (ScrollViewMsgBuilder*) setScale:(NSString*) value {
  resultScrollViewMsg.hasScale = YES;
  resultScrollViewMsg.scale = value;
  return self;
}
- (ScrollViewMsgBuilder*) clearScale {
  resultScrollViewMsg.hasScale = NO;
  resultScrollViewMsg.scale = @"";
  return self;
}
- (BOOL) hasView {
  return resultScrollViewMsg.hasView;
}
- (ViewItem*) view {
  return resultScrollViewMsg.view;
}
- (ScrollViewMsgBuilder*) setView:(ViewItem*) value {
  resultScrollViewMsg.hasView = YES;
  resultScrollViewMsg.view = value;
  return self;
}
- (ScrollViewMsgBuilder*) setViewBuilder:(ViewItemBuilder*) builderForValue {
  return [self setView:[builderForValue build]];
}
- (ScrollViewMsgBuilder*) mergeView:(ViewItem*) value {
  if (resultScrollViewMsg.hasView &&
      resultScrollViewMsg.view != [ViewItem defaultInstance]) {
    resultScrollViewMsg.view =
      [[[ViewItem builderWithPrototype:resultScrollViewMsg.view] mergeFrom:value] buildPartial];
  } else {
    resultScrollViewMsg.view = value;
  }
  resultScrollViewMsg.hasView = YES;
  return self;
}
- (ScrollViewMsgBuilder*) clearView {
  resultScrollViewMsg.hasView = NO;
  resultScrollViewMsg.view = [ViewItem defaultInstance];
  return self;
}
@end

@interface ViewScrollMsg ()
@property (strong) NSString* eventName;
@property (strong) NSString* eventTime;
@property (strong) NSString* sessionId;
@property (strong) NSString* appKey;
@property (strong) NSString* deviceId;
@property (strong) NSString* page;
@property (strong) NSString* direction;
@end

@implementation ViewScrollMsg

- (BOOL) hasEventName {
  return !!hasEventName_;
}
- (void) setHasEventName:(BOOL) _value_ {
  hasEventName_ = !!_value_;
}
@synthesize eventName;
- (BOOL) hasEventTime {
  return !!hasEventTime_;
}
- (void) setHasEventTime:(BOOL) _value_ {
  hasEventTime_ = !!_value_;
}
@synthesize eventTime;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (BOOL) hasAppKey {
  return !!hasAppKey_;
}
- (void) setHasAppKey:(BOOL) _value_ {
  hasAppKey_ = !!_value_;
}
@synthesize appKey;
- (BOOL) hasDeviceId {
  return !!hasDeviceId_;
}
- (void) setHasDeviceId:(BOOL) _value_ {
  hasDeviceId_ = !!_value_;
}
@synthesize deviceId;
- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) _value_ {
  hasPage_ = !!_value_;
}
@synthesize page;
- (BOOL) hasDirection {
  return !!hasDirection_;
}
- (void) setHasDirection:(BOOL) _value_ {
  hasDirection_ = !!_value_;
}
@synthesize direction;
- (instancetype) init {
  if ((self = [super init])) {
    self.eventName = @"";
    self.eventTime = @"";
    self.sessionId = @"";
    self.appKey = @"";
    self.deviceId = @"";
    self.page = @"";
    self.direction = @"";
  }
  return self;
}
static ViewScrollMsg* defaultViewScrollMsgInstance = nil;
+ (void) initialize {
  if (self == [ViewScrollMsg class]) {
    defaultViewScrollMsgInstance = [[ViewScrollMsg alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultViewScrollMsgInstance;
}
- (instancetype) defaultInstance {
  return defaultViewScrollMsgInstance;
}
- (BOOL) isInitialized {
  if (!self.hasEventName) {
    return NO;
  }
  if (!self.hasEventTime) {
    return NO;
  }
  if (!self.hasSessionId) {
    return NO;
  }
  if (!self.hasAppKey) {
    return NO;
  }
  if (!self.hasDeviceId) {
    return NO;
  }
  if (!self.hasPage) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasEventName) {
    [output writeString:1 value:self.eventName];
  }
  if (self.hasEventTime) {
    [output writeString:2 value:self.eventTime];
  }
  if (self.hasSessionId) {
    [output writeString:3 value:self.sessionId];
  }
  if (self.hasAppKey) {
    [output writeString:4 value:self.appKey];
  }
  if (self.hasDeviceId) {
    [output writeString:5 value:self.deviceId];
  }
  if (self.hasPage) {
    [output writeString:6 value:self.page];
  }
  if (self.hasDirection) {
    [output writeString:7 value:self.direction];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasEventName) {
    size_ += computeStringSize(1, self.eventName);
  }
  if (self.hasEventTime) {
    size_ += computeStringSize(2, self.eventTime);
  }
  if (self.hasSessionId) {
    size_ += computeStringSize(3, self.sessionId);
  }
  if (self.hasAppKey) {
    size_ += computeStringSize(4, self.appKey);
  }
  if (self.hasDeviceId) {
    size_ += computeStringSize(5, self.deviceId);
  }
  if (self.hasPage) {
    size_ += computeStringSize(6, self.page);
  }
  if (self.hasDirection) {
    size_ += computeStringSize(7, self.direction);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ViewScrollMsg*) parseFromData:(NSData*) data {
  return (ViewScrollMsg*)[[[ViewScrollMsg builder] mergeFromData:data] build];
}
+ (ViewScrollMsg*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ViewScrollMsg*)[[[ViewScrollMsg builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ViewScrollMsg*) parseFromInputStream:(NSInputStream*) input {
  return (ViewScrollMsg*)[[[ViewScrollMsg builder] mergeFromInputStream:input] build];
}
+ (ViewScrollMsg*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ViewScrollMsg*)[[[ViewScrollMsg builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ViewScrollMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ViewScrollMsg*)[[[ViewScrollMsg builder] mergeFromCodedInputStream:input] build];
}
+ (ViewScrollMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ViewScrollMsg*)[[[ViewScrollMsg builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ViewScrollMsgBuilder*) builder {
  return [[ViewScrollMsgBuilder alloc] init];
}
+ (ViewScrollMsgBuilder*) builderWithPrototype:(ViewScrollMsg*) prototype {
  return [[ViewScrollMsg builder] mergeFrom:prototype];
}
- (ViewScrollMsgBuilder*) builder {
  return [ViewScrollMsg builder];
}
- (ViewScrollMsgBuilder*) toBuilder {
  return [ViewScrollMsg builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasEventName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventName", self.eventName];
  }
  if (self.hasEventTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventTime", self.eventTime];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", self.sessionId];
  }
  if (self.hasAppKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appKey", self.appKey];
  }
  if (self.hasDeviceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceId", self.deviceId];
  }
  if (self.hasPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"page", self.page];
  }
  if (self.hasDirection) {
    [output appendFormat:@"%@%@: %@\n", indent, @"direction", self.direction];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasEventName) {
    [dictionary setObject: self.eventName forKey: @"eventName"];
  }
  if (self.hasEventTime) {
    [dictionary setObject: self.eventTime forKey: @"eventTime"];
  }
  if (self.hasSessionId) {
    [dictionary setObject: self.sessionId forKey: @"sessionId"];
  }
  if (self.hasAppKey) {
    [dictionary setObject: self.appKey forKey: @"appKey"];
  }
  if (self.hasDeviceId) {
    [dictionary setObject: self.deviceId forKey: @"deviceId"];
  }
  if (self.hasPage) {
    [dictionary setObject: self.page forKey: @"page"];
  }
  if (self.hasDirection) {
    [dictionary setObject: self.direction forKey: @"direction"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ViewScrollMsg class]]) {
    return NO;
  }
  ViewScrollMsg *otherMessage = other;
  return
      self.hasEventName == otherMessage.hasEventName &&
      (!self.hasEventName || [self.eventName isEqual:otherMessage.eventName]) &&
      self.hasEventTime == otherMessage.hasEventTime &&
      (!self.hasEventTime || [self.eventTime isEqual:otherMessage.eventTime]) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || [self.sessionId isEqual:otherMessage.sessionId]) &&
      self.hasAppKey == otherMessage.hasAppKey &&
      (!self.hasAppKey || [self.appKey isEqual:otherMessage.appKey]) &&
      self.hasDeviceId == otherMessage.hasDeviceId &&
      (!self.hasDeviceId || [self.deviceId isEqual:otherMessage.deviceId]) &&
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || [self.page isEqual:otherMessage.page]) &&
      self.hasDirection == otherMessage.hasDirection &&
      (!self.hasDirection || [self.direction isEqual:otherMessage.direction]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasEventName) {
    hashCode = hashCode * 31 + [self.eventName hash];
  }
  if (self.hasEventTime) {
    hashCode = hashCode * 31 + [self.eventTime hash];
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [self.sessionId hash];
  }
  if (self.hasAppKey) {
    hashCode = hashCode * 31 + [self.appKey hash];
  }
  if (self.hasDeviceId) {
    hashCode = hashCode * 31 + [self.deviceId hash];
  }
  if (self.hasPage) {
    hashCode = hashCode * 31 + [self.page hash];
  }
  if (self.hasDirection) {
    hashCode = hashCode * 31 + [self.direction hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ViewScrollMsgBuilder()
@property (strong) ViewScrollMsg* resultViewScrollMsg;
@end

@implementation ViewScrollMsgBuilder
@synthesize resultViewScrollMsg;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultViewScrollMsg = [[ViewScrollMsg alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultViewScrollMsg;
}
- (ViewScrollMsgBuilder*) clear {
  self.resultViewScrollMsg = [[ViewScrollMsg alloc] init];
  return self;
}
- (ViewScrollMsgBuilder*) clone {
  return [ViewScrollMsg builderWithPrototype:resultViewScrollMsg];
}
- (ViewScrollMsg*) defaultInstance {
  return [ViewScrollMsg defaultInstance];
}
- (ViewScrollMsg*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ViewScrollMsg*) buildPartial {
  ViewScrollMsg* returnMe = resultViewScrollMsg;
  self.resultViewScrollMsg = nil;
  return returnMe;
}
- (ViewScrollMsgBuilder*) mergeFrom:(ViewScrollMsg*) other {
  if (other == [ViewScrollMsg defaultInstance]) {
    return self;
  }
  if (other.hasEventName) {
    [self setEventName:other.eventName];
  }
  if (other.hasEventTime) {
    [self setEventTime:other.eventTime];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasAppKey) {
    [self setAppKey:other.appKey];
  }
  if (other.hasDeviceId) {
    [self setDeviceId:other.deviceId];
  }
  if (other.hasPage) {
    [self setPage:other.page];
  }
  if (other.hasDirection) {
    [self setDirection:other.direction];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ViewScrollMsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ViewScrollMsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setEventName:[input readString]];
        break;
      }
      case 18: {
        [self setEventTime:[input readString]];
        break;
      }
      case 26: {
        [self setSessionId:[input readString]];
        break;
      }
      case 34: {
        [self setAppKey:[input readString]];
        break;
      }
      case 42: {
        [self setDeviceId:[input readString]];
        break;
      }
      case 50: {
        [self setPage:[input readString]];
        break;
      }
      case 58: {
        [self setDirection:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasEventName {
  return resultViewScrollMsg.hasEventName;
}
- (NSString*) eventName {
  return resultViewScrollMsg.eventName;
}
- (ViewScrollMsgBuilder*) setEventName:(NSString*) value {
  resultViewScrollMsg.hasEventName = YES;
  resultViewScrollMsg.eventName = value;
  return self;
}
- (ViewScrollMsgBuilder*) clearEventName {
  resultViewScrollMsg.hasEventName = NO;
  resultViewScrollMsg.eventName = @"";
  return self;
}
- (BOOL) hasEventTime {
  return resultViewScrollMsg.hasEventTime;
}
- (NSString*) eventTime {
  return resultViewScrollMsg.eventTime;
}
- (ViewScrollMsgBuilder*) setEventTime:(NSString*) value {
  resultViewScrollMsg.hasEventTime = YES;
  resultViewScrollMsg.eventTime = value;
  return self;
}
- (ViewScrollMsgBuilder*) clearEventTime {
  resultViewScrollMsg.hasEventTime = NO;
  resultViewScrollMsg.eventTime = @"";
  return self;
}
- (BOOL) hasSessionId {
  return resultViewScrollMsg.hasSessionId;
}
- (NSString*) sessionId {
  return resultViewScrollMsg.sessionId;
}
- (ViewScrollMsgBuilder*) setSessionId:(NSString*) value {
  resultViewScrollMsg.hasSessionId = YES;
  resultViewScrollMsg.sessionId = value;
  return self;
}
- (ViewScrollMsgBuilder*) clearSessionId {
  resultViewScrollMsg.hasSessionId = NO;
  resultViewScrollMsg.sessionId = @"";
  return self;
}
- (BOOL) hasAppKey {
  return resultViewScrollMsg.hasAppKey;
}
- (NSString*) appKey {
  return resultViewScrollMsg.appKey;
}
- (ViewScrollMsgBuilder*) setAppKey:(NSString*) value {
  resultViewScrollMsg.hasAppKey = YES;
  resultViewScrollMsg.appKey = value;
  return self;
}
- (ViewScrollMsgBuilder*) clearAppKey {
  resultViewScrollMsg.hasAppKey = NO;
  resultViewScrollMsg.appKey = @"";
  return self;
}
- (BOOL) hasDeviceId {
  return resultViewScrollMsg.hasDeviceId;
}
- (NSString*) deviceId {
  return resultViewScrollMsg.deviceId;
}
- (ViewScrollMsgBuilder*) setDeviceId:(NSString*) value {
  resultViewScrollMsg.hasDeviceId = YES;
  resultViewScrollMsg.deviceId = value;
  return self;
}
- (ViewScrollMsgBuilder*) clearDeviceId {
  resultViewScrollMsg.hasDeviceId = NO;
  resultViewScrollMsg.deviceId = @"";
  return self;
}
- (BOOL) hasPage {
  return resultViewScrollMsg.hasPage;
}
- (NSString*) page {
  return resultViewScrollMsg.page;
}
- (ViewScrollMsgBuilder*) setPage:(NSString*) value {
  resultViewScrollMsg.hasPage = YES;
  resultViewScrollMsg.page = value;
  return self;
}
- (ViewScrollMsgBuilder*) clearPage {
  resultViewScrollMsg.hasPage = NO;
  resultViewScrollMsg.page = @"";
  return self;
}
- (BOOL) hasDirection {
  return resultViewScrollMsg.hasDirection;
}
- (NSString*) direction {
  return resultViewScrollMsg.direction;
}
- (ViewScrollMsgBuilder*) setDirection:(NSString*) value {
  resultViewScrollMsg.hasDirection = YES;
  resultViewScrollMsg.direction = value;
  return self;
}
- (ViewScrollMsgBuilder*) clearDirection {
  resultViewScrollMsg.hasDirection = NO;
  resultViewScrollMsg.direction = @"";
  return self;
}
@end

@interface PageMsg ()
@property (strong) NSString* eventName;
@property (strong) NSString* eventTime;
@property (strong) NSString* sessionId;
@property (strong) NSString* appKey;
@property (strong) NSString* deviceId;
@property (strong) NSString* page;
@property (strong) NSMutableArray * itemArray;
@end

@implementation PageMsg

- (BOOL) hasEventName {
  return !!hasEventName_;
}
- (void) setHasEventName:(BOOL) _value_ {
  hasEventName_ = !!_value_;
}
@synthesize eventName;
- (BOOL) hasEventTime {
  return !!hasEventTime_;
}
- (void) setHasEventTime:(BOOL) _value_ {
  hasEventTime_ = !!_value_;
}
@synthesize eventTime;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (BOOL) hasAppKey {
  return !!hasAppKey_;
}
- (void) setHasAppKey:(BOOL) _value_ {
  hasAppKey_ = !!_value_;
}
@synthesize appKey;
- (BOOL) hasDeviceId {
  return !!hasDeviceId_;
}
- (void) setHasDeviceId:(BOOL) _value_ {
  hasDeviceId_ = !!_value_;
}
@synthesize deviceId;
- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) _value_ {
  hasPage_ = !!_value_;
}
@synthesize page;
@synthesize itemArray;
@dynamic item;
- (instancetype) init {
  if ((self = [super init])) {
    self.eventName = @"";
    self.eventTime = @"";
    self.sessionId = @"";
    self.appKey = @"";
    self.deviceId = @"";
    self.page = @"";
  }
  return self;
}
static PageMsg* defaultPageMsgInstance = nil;
+ (void) initialize {
  if (self == [PageMsg class]) {
    defaultPageMsgInstance = [[PageMsg alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPageMsgInstance;
}
- (instancetype) defaultInstance {
  return defaultPageMsgInstance;
}
- (NSArray *)item {
  return itemArray;
}
- (MapItem*)itemAtIndex:(NSUInteger)index {
  return [itemArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasEventName) {
    return NO;
  }
  if (!self.hasEventTime) {
    return NO;
  }
  if (!self.hasSessionId) {
    return NO;
  }
  if (!self.hasAppKey) {
    return NO;
  }
  if (!self.hasDeviceId) {
    return NO;
  }
  if (!self.hasPage) {
    return NO;
  }
  __block BOOL isInititem = YES;
   [self.item enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInititem = NO;
      *stop = YES;
    }
  }];
  if (!isInititem) return isInititem;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasEventName) {
    [output writeString:1 value:self.eventName];
  }
  if (self.hasEventTime) {
    [output writeString:2 value:self.eventTime];
  }
  if (self.hasSessionId) {
    [output writeString:3 value:self.sessionId];
  }
  if (self.hasAppKey) {
    [output writeString:4 value:self.appKey];
  }
  if (self.hasDeviceId) {
    [output writeString:5 value:self.deviceId];
  }
  if (self.hasPage) {
    [output writeString:6 value:self.page];
  }
  [self.itemArray enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:7 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasEventName) {
    size_ += computeStringSize(1, self.eventName);
  }
  if (self.hasEventTime) {
    size_ += computeStringSize(2, self.eventTime);
  }
  if (self.hasSessionId) {
    size_ += computeStringSize(3, self.sessionId);
  }
  if (self.hasAppKey) {
    size_ += computeStringSize(4, self.appKey);
  }
  if (self.hasDeviceId) {
    size_ += computeStringSize(5, self.deviceId);
  }
  if (self.hasPage) {
    size_ += computeStringSize(6, self.page);
  }
  [self.itemArray enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(7, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PageMsg*) parseFromData:(NSData*) data {
  return (PageMsg*)[[[PageMsg builder] mergeFromData:data] build];
}
+ (PageMsg*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PageMsg*)[[[PageMsg builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PageMsg*) parseFromInputStream:(NSInputStream*) input {
  return (PageMsg*)[[[PageMsg builder] mergeFromInputStream:input] build];
}
+ (PageMsg*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PageMsg*)[[[PageMsg builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PageMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PageMsg*)[[[PageMsg builder] mergeFromCodedInputStream:input] build];
}
+ (PageMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PageMsg*)[[[PageMsg builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PageMsgBuilder*) builder {
  return [[PageMsgBuilder alloc] init];
}
+ (PageMsgBuilder*) builderWithPrototype:(PageMsg*) prototype {
  return [[PageMsg builder] mergeFrom:prototype];
}
- (PageMsgBuilder*) builder {
  return [PageMsg builder];
}
- (PageMsgBuilder*) toBuilder {
  return [PageMsg builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasEventName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventName", self.eventName];
  }
  if (self.hasEventTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventTime", self.eventTime];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", self.sessionId];
  }
  if (self.hasAppKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appKey", self.appKey];
  }
  if (self.hasDeviceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceId", self.deviceId];
  }
  if (self.hasPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"page", self.page];
  }
  [self.itemArray enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"item"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasEventName) {
    [dictionary setObject: self.eventName forKey: @"eventName"];
  }
  if (self.hasEventTime) {
    [dictionary setObject: self.eventTime forKey: @"eventTime"];
  }
  if (self.hasSessionId) {
    [dictionary setObject: self.sessionId forKey: @"sessionId"];
  }
  if (self.hasAppKey) {
    [dictionary setObject: self.appKey forKey: @"appKey"];
  }
  if (self.hasDeviceId) {
    [dictionary setObject: self.deviceId forKey: @"deviceId"];
  }
  if (self.hasPage) {
    [dictionary setObject: self.page forKey: @"page"];
  }
  for (MapItem* element in self.itemArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"item"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PageMsg class]]) {
    return NO;
  }
  PageMsg *otherMessage = other;
  return
      self.hasEventName == otherMessage.hasEventName &&
      (!self.hasEventName || [self.eventName isEqual:otherMessage.eventName]) &&
      self.hasEventTime == otherMessage.hasEventTime &&
      (!self.hasEventTime || [self.eventTime isEqual:otherMessage.eventTime]) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || [self.sessionId isEqual:otherMessage.sessionId]) &&
      self.hasAppKey == otherMessage.hasAppKey &&
      (!self.hasAppKey || [self.appKey isEqual:otherMessage.appKey]) &&
      self.hasDeviceId == otherMessage.hasDeviceId &&
      (!self.hasDeviceId || [self.deviceId isEqual:otherMessage.deviceId]) &&
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || [self.page isEqual:otherMessage.page]) &&
      [self.itemArray isEqualToArray:otherMessage.itemArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasEventName) {
    hashCode = hashCode * 31 + [self.eventName hash];
  }
  if (self.hasEventTime) {
    hashCode = hashCode * 31 + [self.eventTime hash];
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [self.sessionId hash];
  }
  if (self.hasAppKey) {
    hashCode = hashCode * 31 + [self.appKey hash];
  }
  if (self.hasDeviceId) {
    hashCode = hashCode * 31 + [self.deviceId hash];
  }
  if (self.hasPage) {
    hashCode = hashCode * 31 + [self.page hash];
  }
  [self.itemArray enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PageMsgBuilder()
@property (strong) PageMsg* resultPageMsg;
@end

@implementation PageMsgBuilder
@synthesize resultPageMsg;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPageMsg = [[PageMsg alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPageMsg;
}
- (PageMsgBuilder*) clear {
  self.resultPageMsg = [[PageMsg alloc] init];
  return self;
}
- (PageMsgBuilder*) clone {
  return [PageMsg builderWithPrototype:resultPageMsg];
}
- (PageMsg*) defaultInstance {
  return [PageMsg defaultInstance];
}
- (PageMsg*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PageMsg*) buildPartial {
  PageMsg* returnMe = resultPageMsg;
  self.resultPageMsg = nil;
  return returnMe;
}
- (PageMsgBuilder*) mergeFrom:(PageMsg*) other {
  if (other == [PageMsg defaultInstance]) {
    return self;
  }
  if (other.hasEventName) {
    [self setEventName:other.eventName];
  }
  if (other.hasEventTime) {
    [self setEventTime:other.eventTime];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasAppKey) {
    [self setAppKey:other.appKey];
  }
  if (other.hasDeviceId) {
    [self setDeviceId:other.deviceId];
  }
  if (other.hasPage) {
    [self setPage:other.page];
  }
  if (other.itemArray.count > 0) {
    if (resultPageMsg.itemArray == nil) {
      resultPageMsg.itemArray = [[NSMutableArray alloc] initWithArray:other.itemArray];
    } else {
      [resultPageMsg.itemArray addObjectsFromArray:other.itemArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PageMsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PageMsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setEventName:[input readString]];
        break;
      }
      case 18: {
        [self setEventTime:[input readString]];
        break;
      }
      case 26: {
        [self setSessionId:[input readString]];
        break;
      }
      case 34: {
        [self setAppKey:[input readString]];
        break;
      }
      case 42: {
        [self setDeviceId:[input readString]];
        break;
      }
      case 50: {
        [self setPage:[input readString]];
        break;
      }
      case 58: {
        MapItemBuilder* subBuilder = [MapItem builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addItem:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasEventName {
  return resultPageMsg.hasEventName;
}
- (NSString*) eventName {
  return resultPageMsg.eventName;
}
- (PageMsgBuilder*) setEventName:(NSString*) value {
  resultPageMsg.hasEventName = YES;
  resultPageMsg.eventName = value;
  return self;
}
- (PageMsgBuilder*) clearEventName {
  resultPageMsg.hasEventName = NO;
  resultPageMsg.eventName = @"";
  return self;
}
- (BOOL) hasEventTime {
  return resultPageMsg.hasEventTime;
}
- (NSString*) eventTime {
  return resultPageMsg.eventTime;
}
- (PageMsgBuilder*) setEventTime:(NSString*) value {
  resultPageMsg.hasEventTime = YES;
  resultPageMsg.eventTime = value;
  return self;
}
- (PageMsgBuilder*) clearEventTime {
  resultPageMsg.hasEventTime = NO;
  resultPageMsg.eventTime = @"";
  return self;
}
- (BOOL) hasSessionId {
  return resultPageMsg.hasSessionId;
}
- (NSString*) sessionId {
  return resultPageMsg.sessionId;
}
- (PageMsgBuilder*) setSessionId:(NSString*) value {
  resultPageMsg.hasSessionId = YES;
  resultPageMsg.sessionId = value;
  return self;
}
- (PageMsgBuilder*) clearSessionId {
  resultPageMsg.hasSessionId = NO;
  resultPageMsg.sessionId = @"";
  return self;
}
- (BOOL) hasAppKey {
  return resultPageMsg.hasAppKey;
}
- (NSString*) appKey {
  return resultPageMsg.appKey;
}
- (PageMsgBuilder*) setAppKey:(NSString*) value {
  resultPageMsg.hasAppKey = YES;
  resultPageMsg.appKey = value;
  return self;
}
- (PageMsgBuilder*) clearAppKey {
  resultPageMsg.hasAppKey = NO;
  resultPageMsg.appKey = @"";
  return self;
}
- (BOOL) hasDeviceId {
  return resultPageMsg.hasDeviceId;
}
- (NSString*) deviceId {
  return resultPageMsg.deviceId;
}
- (PageMsgBuilder*) setDeviceId:(NSString*) value {
  resultPageMsg.hasDeviceId = YES;
  resultPageMsg.deviceId = value;
  return self;
}
- (PageMsgBuilder*) clearDeviceId {
  resultPageMsg.hasDeviceId = NO;
  resultPageMsg.deviceId = @"";
  return self;
}
- (BOOL) hasPage {
  return resultPageMsg.hasPage;
}
- (NSString*) page {
  return resultPageMsg.page;
}
- (PageMsgBuilder*) setPage:(NSString*) value {
  resultPageMsg.hasPage = YES;
  resultPageMsg.page = value;
  return self;
}
- (PageMsgBuilder*) clearPage {
  resultPageMsg.hasPage = NO;
  resultPageMsg.page = @"";
  return self;
}
- (NSMutableArray *)item {
  return resultPageMsg.itemArray;
}
- (MapItem*)itemAtIndex:(NSUInteger)index {
  return [resultPageMsg itemAtIndex:index];
}
- (PageMsgBuilder *)addItem:(MapItem*)value {
  if (resultPageMsg.itemArray == nil) {
    resultPageMsg.itemArray = [[NSMutableArray alloc]init];
  }
  [resultPageMsg.itemArray addObject:value];
  return self;
}
- (PageMsgBuilder *)setItemArray:(NSArray *)array {
  resultPageMsg.itemArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PageMsgBuilder *)clearItem {
  resultPageMsg.itemArray = nil;
  return self;
}
@end

@interface WebViewMsg ()
@property (strong) NSString* eventName;
@property (strong) NSString* eventTime;
@property (strong) NSString* sessionId;
@property (strong) NSString* appKey;
@property (strong) NSString* deviceId;
@property (strong) NSString* page;
@property (strong) NSString* url;
@property (strong) NSString* error;
@property (strong) ViewItem* view;
@end

@implementation WebViewMsg

- (BOOL) hasEventName {
  return !!hasEventName_;
}
- (void) setHasEventName:(BOOL) _value_ {
  hasEventName_ = !!_value_;
}
@synthesize eventName;
- (BOOL) hasEventTime {
  return !!hasEventTime_;
}
- (void) setHasEventTime:(BOOL) _value_ {
  hasEventTime_ = !!_value_;
}
@synthesize eventTime;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (BOOL) hasAppKey {
  return !!hasAppKey_;
}
- (void) setHasAppKey:(BOOL) _value_ {
  hasAppKey_ = !!_value_;
}
@synthesize appKey;
- (BOOL) hasDeviceId {
  return !!hasDeviceId_;
}
- (void) setHasDeviceId:(BOOL) _value_ {
  hasDeviceId_ = !!_value_;
}
@synthesize deviceId;
- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) _value_ {
  hasPage_ = !!_value_;
}
@synthesize page;
- (BOOL) hasUrl {
  return !!hasUrl_;
}
- (void) setHasUrl:(BOOL) _value_ {
  hasUrl_ = !!_value_;
}
@synthesize url;
- (BOOL) hasError {
  return !!hasError_;
}
- (void) setHasError:(BOOL) _value_ {
  hasError_ = !!_value_;
}
@synthesize error;
- (BOOL) hasView {
  return !!hasView_;
}
- (void) setHasView:(BOOL) _value_ {
  hasView_ = !!_value_;
}
@synthesize view;
- (instancetype) init {
  if ((self = [super init])) {
    self.eventName = @"";
    self.eventTime = @"";
    self.sessionId = @"";
    self.appKey = @"";
    self.deviceId = @"";
    self.page = @"";
    self.url = @"";
    self.error = @"";
    self.view = [ViewItem defaultInstance];
  }
  return self;
}
static WebViewMsg* defaultWebViewMsgInstance = nil;
+ (void) initialize {
  if (self == [WebViewMsg class]) {
    defaultWebViewMsgInstance = [[WebViewMsg alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultWebViewMsgInstance;
}
- (instancetype) defaultInstance {
  return defaultWebViewMsgInstance;
}
- (BOOL) isInitialized {
  if (!self.hasEventName) {
    return NO;
  }
  if (!self.hasEventTime) {
    return NO;
  }
  if (!self.hasSessionId) {
    return NO;
  }
  if (!self.hasAppKey) {
    return NO;
  }
  if (!self.hasDeviceId) {
    return NO;
  }
  if (!self.hasPage) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasEventName) {
    [output writeString:1 value:self.eventName];
  }
  if (self.hasEventTime) {
    [output writeString:2 value:self.eventTime];
  }
  if (self.hasSessionId) {
    [output writeString:3 value:self.sessionId];
  }
  if (self.hasAppKey) {
    [output writeString:4 value:self.appKey];
  }
  if (self.hasDeviceId) {
    [output writeString:5 value:self.deviceId];
  }
  if (self.hasPage) {
    [output writeString:6 value:self.page];
  }
  if (self.hasUrl) {
    [output writeString:7 value:self.url];
  }
  if (self.hasError) {
    [output writeString:8 value:self.error];
  }
  if (self.hasView) {
    [output writeMessage:9 value:self.view];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasEventName) {
    size_ += computeStringSize(1, self.eventName);
  }
  if (self.hasEventTime) {
    size_ += computeStringSize(2, self.eventTime);
  }
  if (self.hasSessionId) {
    size_ += computeStringSize(3, self.sessionId);
  }
  if (self.hasAppKey) {
    size_ += computeStringSize(4, self.appKey);
  }
  if (self.hasDeviceId) {
    size_ += computeStringSize(5, self.deviceId);
  }
  if (self.hasPage) {
    size_ += computeStringSize(6, self.page);
  }
  if (self.hasUrl) {
    size_ += computeStringSize(7, self.url);
  }
  if (self.hasError) {
    size_ += computeStringSize(8, self.error);
  }
  if (self.hasView) {
    size_ += computeMessageSize(9, self.view);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (WebViewMsg*) parseFromData:(NSData*) data {
  return (WebViewMsg*)[[[WebViewMsg builder] mergeFromData:data] build];
}
+ (WebViewMsg*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WebViewMsg*)[[[WebViewMsg builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (WebViewMsg*) parseFromInputStream:(NSInputStream*) input {
  return (WebViewMsg*)[[[WebViewMsg builder] mergeFromInputStream:input] build];
}
+ (WebViewMsg*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WebViewMsg*)[[[WebViewMsg builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (WebViewMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (WebViewMsg*)[[[WebViewMsg builder] mergeFromCodedInputStream:input] build];
}
+ (WebViewMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WebViewMsg*)[[[WebViewMsg builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (WebViewMsgBuilder*) builder {
  return [[WebViewMsgBuilder alloc] init];
}
+ (WebViewMsgBuilder*) builderWithPrototype:(WebViewMsg*) prototype {
  return [[WebViewMsg builder] mergeFrom:prototype];
}
- (WebViewMsgBuilder*) builder {
  return [WebViewMsg builder];
}
- (WebViewMsgBuilder*) toBuilder {
  return [WebViewMsg builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasEventName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventName", self.eventName];
  }
  if (self.hasEventTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventTime", self.eventTime];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", self.sessionId];
  }
  if (self.hasAppKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appKey", self.appKey];
  }
  if (self.hasDeviceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceId", self.deviceId];
  }
  if (self.hasPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"page", self.page];
  }
  if (self.hasUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"url", self.url];
  }
  if (self.hasError) {
    [output appendFormat:@"%@%@: %@\n", indent, @"error", self.error];
  }
  if (self.hasView) {
    [output appendFormat:@"%@%@ {\n", indent, @"view"];
    [self.view writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasEventName) {
    [dictionary setObject: self.eventName forKey: @"eventName"];
  }
  if (self.hasEventTime) {
    [dictionary setObject: self.eventTime forKey: @"eventTime"];
  }
  if (self.hasSessionId) {
    [dictionary setObject: self.sessionId forKey: @"sessionId"];
  }
  if (self.hasAppKey) {
    [dictionary setObject: self.appKey forKey: @"appKey"];
  }
  if (self.hasDeviceId) {
    [dictionary setObject: self.deviceId forKey: @"deviceId"];
  }
  if (self.hasPage) {
    [dictionary setObject: self.page forKey: @"page"];
  }
  if (self.hasUrl) {
    [dictionary setObject: self.url forKey: @"url"];
  }
  if (self.hasError) {
    [dictionary setObject: self.error forKey: @"error"];
  }
  if (self.hasView) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.view storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"view"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[WebViewMsg class]]) {
    return NO;
  }
  WebViewMsg *otherMessage = other;
  return
      self.hasEventName == otherMessage.hasEventName &&
      (!self.hasEventName || [self.eventName isEqual:otherMessage.eventName]) &&
      self.hasEventTime == otherMessage.hasEventTime &&
      (!self.hasEventTime || [self.eventTime isEqual:otherMessage.eventTime]) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || [self.sessionId isEqual:otherMessage.sessionId]) &&
      self.hasAppKey == otherMessage.hasAppKey &&
      (!self.hasAppKey || [self.appKey isEqual:otherMessage.appKey]) &&
      self.hasDeviceId == otherMessage.hasDeviceId &&
      (!self.hasDeviceId || [self.deviceId isEqual:otherMessage.deviceId]) &&
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || [self.page isEqual:otherMessage.page]) &&
      self.hasUrl == otherMessage.hasUrl &&
      (!self.hasUrl || [self.url isEqual:otherMessage.url]) &&
      self.hasError == otherMessage.hasError &&
      (!self.hasError || [self.error isEqual:otherMessage.error]) &&
      self.hasView == otherMessage.hasView &&
      (!self.hasView || [self.view isEqual:otherMessage.view]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasEventName) {
    hashCode = hashCode * 31 + [self.eventName hash];
  }
  if (self.hasEventTime) {
    hashCode = hashCode * 31 + [self.eventTime hash];
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [self.sessionId hash];
  }
  if (self.hasAppKey) {
    hashCode = hashCode * 31 + [self.appKey hash];
  }
  if (self.hasDeviceId) {
    hashCode = hashCode * 31 + [self.deviceId hash];
  }
  if (self.hasPage) {
    hashCode = hashCode * 31 + [self.page hash];
  }
  if (self.hasUrl) {
    hashCode = hashCode * 31 + [self.url hash];
  }
  if (self.hasError) {
    hashCode = hashCode * 31 + [self.error hash];
  }
  if (self.hasView) {
    hashCode = hashCode * 31 + [self.view hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface WebViewMsgBuilder()
@property (strong) WebViewMsg* resultWebViewMsg;
@end

@implementation WebViewMsgBuilder
@synthesize resultWebViewMsg;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultWebViewMsg = [[WebViewMsg alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultWebViewMsg;
}
- (WebViewMsgBuilder*) clear {
  self.resultWebViewMsg = [[WebViewMsg alloc] init];
  return self;
}
- (WebViewMsgBuilder*) clone {
  return [WebViewMsg builderWithPrototype:resultWebViewMsg];
}
- (WebViewMsg*) defaultInstance {
  return [WebViewMsg defaultInstance];
}
- (WebViewMsg*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (WebViewMsg*) buildPartial {
  WebViewMsg* returnMe = resultWebViewMsg;
  self.resultWebViewMsg = nil;
  return returnMe;
}
- (WebViewMsgBuilder*) mergeFrom:(WebViewMsg*) other {
  if (other == [WebViewMsg defaultInstance]) {
    return self;
  }
  if (other.hasEventName) {
    [self setEventName:other.eventName];
  }
  if (other.hasEventTime) {
    [self setEventTime:other.eventTime];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasAppKey) {
    [self setAppKey:other.appKey];
  }
  if (other.hasDeviceId) {
    [self setDeviceId:other.deviceId];
  }
  if (other.hasPage) {
    [self setPage:other.page];
  }
  if (other.hasUrl) {
    [self setUrl:other.url];
  }
  if (other.hasError) {
    [self setError:other.error];
  }
  if (other.hasView) {
    [self mergeView:other.view];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (WebViewMsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (WebViewMsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setEventName:[input readString]];
        break;
      }
      case 18: {
        [self setEventTime:[input readString]];
        break;
      }
      case 26: {
        [self setSessionId:[input readString]];
        break;
      }
      case 34: {
        [self setAppKey:[input readString]];
        break;
      }
      case 42: {
        [self setDeviceId:[input readString]];
        break;
      }
      case 50: {
        [self setPage:[input readString]];
        break;
      }
      case 58: {
        [self setUrl:[input readString]];
        break;
      }
      case 66: {
        [self setError:[input readString]];
        break;
      }
      case 74: {
        ViewItemBuilder* subBuilder = [ViewItem builder];
        if (self.hasView) {
          [subBuilder mergeFrom:self.view];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setView:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasEventName {
  return resultWebViewMsg.hasEventName;
}
- (NSString*) eventName {
  return resultWebViewMsg.eventName;
}
- (WebViewMsgBuilder*) setEventName:(NSString*) value {
  resultWebViewMsg.hasEventName = YES;
  resultWebViewMsg.eventName = value;
  return self;
}
- (WebViewMsgBuilder*) clearEventName {
  resultWebViewMsg.hasEventName = NO;
  resultWebViewMsg.eventName = @"";
  return self;
}
- (BOOL) hasEventTime {
  return resultWebViewMsg.hasEventTime;
}
- (NSString*) eventTime {
  return resultWebViewMsg.eventTime;
}
- (WebViewMsgBuilder*) setEventTime:(NSString*) value {
  resultWebViewMsg.hasEventTime = YES;
  resultWebViewMsg.eventTime = value;
  return self;
}
- (WebViewMsgBuilder*) clearEventTime {
  resultWebViewMsg.hasEventTime = NO;
  resultWebViewMsg.eventTime = @"";
  return self;
}
- (BOOL) hasSessionId {
  return resultWebViewMsg.hasSessionId;
}
- (NSString*) sessionId {
  return resultWebViewMsg.sessionId;
}
- (WebViewMsgBuilder*) setSessionId:(NSString*) value {
  resultWebViewMsg.hasSessionId = YES;
  resultWebViewMsg.sessionId = value;
  return self;
}
- (WebViewMsgBuilder*) clearSessionId {
  resultWebViewMsg.hasSessionId = NO;
  resultWebViewMsg.sessionId = @"";
  return self;
}
- (BOOL) hasAppKey {
  return resultWebViewMsg.hasAppKey;
}
- (NSString*) appKey {
  return resultWebViewMsg.appKey;
}
- (WebViewMsgBuilder*) setAppKey:(NSString*) value {
  resultWebViewMsg.hasAppKey = YES;
  resultWebViewMsg.appKey = value;
  return self;
}
- (WebViewMsgBuilder*) clearAppKey {
  resultWebViewMsg.hasAppKey = NO;
  resultWebViewMsg.appKey = @"";
  return self;
}
- (BOOL) hasDeviceId {
  return resultWebViewMsg.hasDeviceId;
}
- (NSString*) deviceId {
  return resultWebViewMsg.deviceId;
}
- (WebViewMsgBuilder*) setDeviceId:(NSString*) value {
  resultWebViewMsg.hasDeviceId = YES;
  resultWebViewMsg.deviceId = value;
  return self;
}
- (WebViewMsgBuilder*) clearDeviceId {
  resultWebViewMsg.hasDeviceId = NO;
  resultWebViewMsg.deviceId = @"";
  return self;
}
- (BOOL) hasPage {
  return resultWebViewMsg.hasPage;
}
- (NSString*) page {
  return resultWebViewMsg.page;
}
- (WebViewMsgBuilder*) setPage:(NSString*) value {
  resultWebViewMsg.hasPage = YES;
  resultWebViewMsg.page = value;
  return self;
}
- (WebViewMsgBuilder*) clearPage {
  resultWebViewMsg.hasPage = NO;
  resultWebViewMsg.page = @"";
  return self;
}
- (BOOL) hasUrl {
  return resultWebViewMsg.hasUrl;
}
- (NSString*) url {
  return resultWebViewMsg.url;
}
- (WebViewMsgBuilder*) setUrl:(NSString*) value {
  resultWebViewMsg.hasUrl = YES;
  resultWebViewMsg.url = value;
  return self;
}
- (WebViewMsgBuilder*) clearUrl {
  resultWebViewMsg.hasUrl = NO;
  resultWebViewMsg.url = @"";
  return self;
}
- (BOOL) hasError {
  return resultWebViewMsg.hasError;
}
- (NSString*) error {
  return resultWebViewMsg.error;
}
- (WebViewMsgBuilder*) setError:(NSString*) value {
  resultWebViewMsg.hasError = YES;
  resultWebViewMsg.error = value;
  return self;
}
- (WebViewMsgBuilder*) clearError {
  resultWebViewMsg.hasError = NO;
  resultWebViewMsg.error = @"";
  return self;
}
- (BOOL) hasView {
  return resultWebViewMsg.hasView;
}
- (ViewItem*) view {
  return resultWebViewMsg.view;
}
- (WebViewMsgBuilder*) setView:(ViewItem*) value {
  resultWebViewMsg.hasView = YES;
  resultWebViewMsg.view = value;
  return self;
}
- (WebViewMsgBuilder*) setViewBuilder:(ViewItemBuilder*) builderForValue {
  return [self setView:[builderForValue build]];
}
- (WebViewMsgBuilder*) mergeView:(ViewItem*) value {
  if (resultWebViewMsg.hasView &&
      resultWebViewMsg.view != [ViewItem defaultInstance]) {
    resultWebViewMsg.view =
      [[[ViewItem builderWithPrototype:resultWebViewMsg.view] mergeFrom:value] buildPartial];
  } else {
    resultWebViewMsg.view = value;
  }
  resultWebViewMsg.hasView = YES;
  return self;
}
- (WebViewMsgBuilder*) clearView {
  resultWebViewMsg.hasView = NO;
  resultWebViewMsg.view = [ViewItem defaultInstance];
  return self;
}
@end

@interface AppUrlMsg ()
@property (strong) NSString* eventName;
@property (strong) NSString* eventTime;
@property (strong) NSString* sessionId;
@property (strong) NSString* appKey;
@property (strong) NSString* deviceId;
@property (strong) NSString* url;
@property (strong) NSString* succeed;
@end

@implementation AppUrlMsg

- (BOOL) hasEventName {
  return !!hasEventName_;
}
- (void) setHasEventName:(BOOL) _value_ {
  hasEventName_ = !!_value_;
}
@synthesize eventName;
- (BOOL) hasEventTime {
  return !!hasEventTime_;
}
- (void) setHasEventTime:(BOOL) _value_ {
  hasEventTime_ = !!_value_;
}
@synthesize eventTime;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (BOOL) hasAppKey {
  return !!hasAppKey_;
}
- (void) setHasAppKey:(BOOL) _value_ {
  hasAppKey_ = !!_value_;
}
@synthesize appKey;
- (BOOL) hasDeviceId {
  return !!hasDeviceId_;
}
- (void) setHasDeviceId:(BOOL) _value_ {
  hasDeviceId_ = !!_value_;
}
@synthesize deviceId;
- (BOOL) hasUrl {
  return !!hasUrl_;
}
- (void) setHasUrl:(BOOL) _value_ {
  hasUrl_ = !!_value_;
}
@synthesize url;
- (BOOL) hasSucceed {
  return !!hasSucceed_;
}
- (void) setHasSucceed:(BOOL) _value_ {
  hasSucceed_ = !!_value_;
}
@synthesize succeed;
- (instancetype) init {
  if ((self = [super init])) {
    self.eventName = @"";
    self.eventTime = @"";
    self.sessionId = @"";
    self.appKey = @"";
    self.deviceId = @"";
    self.url = @"";
    self.succeed = @"";
  }
  return self;
}
static AppUrlMsg* defaultAppUrlMsgInstance = nil;
+ (void) initialize {
  if (self == [AppUrlMsg class]) {
    defaultAppUrlMsgInstance = [[AppUrlMsg alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAppUrlMsgInstance;
}
- (instancetype) defaultInstance {
  return defaultAppUrlMsgInstance;
}
- (BOOL) isInitialized {
  if (!self.hasEventName) {
    return NO;
  }
  if (!self.hasEventTime) {
    return NO;
  }
  if (!self.hasSessionId) {
    return NO;
  }
  if (!self.hasAppKey) {
    return NO;
  }
  if (!self.hasDeviceId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasEventName) {
    [output writeString:1 value:self.eventName];
  }
  if (self.hasEventTime) {
    [output writeString:2 value:self.eventTime];
  }
  if (self.hasSessionId) {
    [output writeString:3 value:self.sessionId];
  }
  if (self.hasAppKey) {
    [output writeString:4 value:self.appKey];
  }
  if (self.hasDeviceId) {
    [output writeString:5 value:self.deviceId];
  }
  if (self.hasUrl) {
    [output writeString:6 value:self.url];
  }
  if (self.hasSucceed) {
    [output writeString:7 value:self.succeed];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasEventName) {
    size_ += computeStringSize(1, self.eventName);
  }
  if (self.hasEventTime) {
    size_ += computeStringSize(2, self.eventTime);
  }
  if (self.hasSessionId) {
    size_ += computeStringSize(3, self.sessionId);
  }
  if (self.hasAppKey) {
    size_ += computeStringSize(4, self.appKey);
  }
  if (self.hasDeviceId) {
    size_ += computeStringSize(5, self.deviceId);
  }
  if (self.hasUrl) {
    size_ += computeStringSize(6, self.url);
  }
  if (self.hasSucceed) {
    size_ += computeStringSize(7, self.succeed);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AppUrlMsg*) parseFromData:(NSData*) data {
  return (AppUrlMsg*)[[[AppUrlMsg builder] mergeFromData:data] build];
}
+ (AppUrlMsg*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppUrlMsg*)[[[AppUrlMsg builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AppUrlMsg*) parseFromInputStream:(NSInputStream*) input {
  return (AppUrlMsg*)[[[AppUrlMsg builder] mergeFromInputStream:input] build];
}
+ (AppUrlMsg*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppUrlMsg*)[[[AppUrlMsg builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppUrlMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AppUrlMsg*)[[[AppUrlMsg builder] mergeFromCodedInputStream:input] build];
}
+ (AppUrlMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppUrlMsg*)[[[AppUrlMsg builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppUrlMsgBuilder*) builder {
  return [[AppUrlMsgBuilder alloc] init];
}
+ (AppUrlMsgBuilder*) builderWithPrototype:(AppUrlMsg*) prototype {
  return [[AppUrlMsg builder] mergeFrom:prototype];
}
- (AppUrlMsgBuilder*) builder {
  return [AppUrlMsg builder];
}
- (AppUrlMsgBuilder*) toBuilder {
  return [AppUrlMsg builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasEventName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventName", self.eventName];
  }
  if (self.hasEventTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventTime", self.eventTime];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", self.sessionId];
  }
  if (self.hasAppKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appKey", self.appKey];
  }
  if (self.hasDeviceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceId", self.deviceId];
  }
  if (self.hasUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"url", self.url];
  }
  if (self.hasSucceed) {
    [output appendFormat:@"%@%@: %@\n", indent, @"succeed", self.succeed];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasEventName) {
    [dictionary setObject: self.eventName forKey: @"eventName"];
  }
  if (self.hasEventTime) {
    [dictionary setObject: self.eventTime forKey: @"eventTime"];
  }
  if (self.hasSessionId) {
    [dictionary setObject: self.sessionId forKey: @"sessionId"];
  }
  if (self.hasAppKey) {
    [dictionary setObject: self.appKey forKey: @"appKey"];
  }
  if (self.hasDeviceId) {
    [dictionary setObject: self.deviceId forKey: @"deviceId"];
  }
  if (self.hasUrl) {
    [dictionary setObject: self.url forKey: @"url"];
  }
  if (self.hasSucceed) {
    [dictionary setObject: self.succeed forKey: @"succeed"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AppUrlMsg class]]) {
    return NO;
  }
  AppUrlMsg *otherMessage = other;
  return
      self.hasEventName == otherMessage.hasEventName &&
      (!self.hasEventName || [self.eventName isEqual:otherMessage.eventName]) &&
      self.hasEventTime == otherMessage.hasEventTime &&
      (!self.hasEventTime || [self.eventTime isEqual:otherMessage.eventTime]) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || [self.sessionId isEqual:otherMessage.sessionId]) &&
      self.hasAppKey == otherMessage.hasAppKey &&
      (!self.hasAppKey || [self.appKey isEqual:otherMessage.appKey]) &&
      self.hasDeviceId == otherMessage.hasDeviceId &&
      (!self.hasDeviceId || [self.deviceId isEqual:otherMessage.deviceId]) &&
      self.hasUrl == otherMessage.hasUrl &&
      (!self.hasUrl || [self.url isEqual:otherMessage.url]) &&
      self.hasSucceed == otherMessage.hasSucceed &&
      (!self.hasSucceed || [self.succeed isEqual:otherMessage.succeed]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasEventName) {
    hashCode = hashCode * 31 + [self.eventName hash];
  }
  if (self.hasEventTime) {
    hashCode = hashCode * 31 + [self.eventTime hash];
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [self.sessionId hash];
  }
  if (self.hasAppKey) {
    hashCode = hashCode * 31 + [self.appKey hash];
  }
  if (self.hasDeviceId) {
    hashCode = hashCode * 31 + [self.deviceId hash];
  }
  if (self.hasUrl) {
    hashCode = hashCode * 31 + [self.url hash];
  }
  if (self.hasSucceed) {
    hashCode = hashCode * 31 + [self.succeed hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AppUrlMsgBuilder()
@property (strong) AppUrlMsg* resultAppUrlMsg;
@end

@implementation AppUrlMsgBuilder
@synthesize resultAppUrlMsg;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAppUrlMsg = [[AppUrlMsg alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAppUrlMsg;
}
- (AppUrlMsgBuilder*) clear {
  self.resultAppUrlMsg = [[AppUrlMsg alloc] init];
  return self;
}
- (AppUrlMsgBuilder*) clone {
  return [AppUrlMsg builderWithPrototype:resultAppUrlMsg];
}
- (AppUrlMsg*) defaultInstance {
  return [AppUrlMsg defaultInstance];
}
- (AppUrlMsg*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AppUrlMsg*) buildPartial {
  AppUrlMsg* returnMe = resultAppUrlMsg;
  self.resultAppUrlMsg = nil;
  return returnMe;
}
- (AppUrlMsgBuilder*) mergeFrom:(AppUrlMsg*) other {
  if (other == [AppUrlMsg defaultInstance]) {
    return self;
  }
  if (other.hasEventName) {
    [self setEventName:other.eventName];
  }
  if (other.hasEventTime) {
    [self setEventTime:other.eventTime];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasAppKey) {
    [self setAppKey:other.appKey];
  }
  if (other.hasDeviceId) {
    [self setDeviceId:other.deviceId];
  }
  if (other.hasUrl) {
    [self setUrl:other.url];
  }
  if (other.hasSucceed) {
    [self setSucceed:other.succeed];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AppUrlMsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AppUrlMsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setEventName:[input readString]];
        break;
      }
      case 18: {
        [self setEventTime:[input readString]];
        break;
      }
      case 26: {
        [self setSessionId:[input readString]];
        break;
      }
      case 34: {
        [self setAppKey:[input readString]];
        break;
      }
      case 42: {
        [self setDeviceId:[input readString]];
        break;
      }
      case 50: {
        [self setUrl:[input readString]];
        break;
      }
      case 58: {
        [self setSucceed:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasEventName {
  return resultAppUrlMsg.hasEventName;
}
- (NSString*) eventName {
  return resultAppUrlMsg.eventName;
}
- (AppUrlMsgBuilder*) setEventName:(NSString*) value {
  resultAppUrlMsg.hasEventName = YES;
  resultAppUrlMsg.eventName = value;
  return self;
}
- (AppUrlMsgBuilder*) clearEventName {
  resultAppUrlMsg.hasEventName = NO;
  resultAppUrlMsg.eventName = @"";
  return self;
}
- (BOOL) hasEventTime {
  return resultAppUrlMsg.hasEventTime;
}
- (NSString*) eventTime {
  return resultAppUrlMsg.eventTime;
}
- (AppUrlMsgBuilder*) setEventTime:(NSString*) value {
  resultAppUrlMsg.hasEventTime = YES;
  resultAppUrlMsg.eventTime = value;
  return self;
}
- (AppUrlMsgBuilder*) clearEventTime {
  resultAppUrlMsg.hasEventTime = NO;
  resultAppUrlMsg.eventTime = @"";
  return self;
}
- (BOOL) hasSessionId {
  return resultAppUrlMsg.hasSessionId;
}
- (NSString*) sessionId {
  return resultAppUrlMsg.sessionId;
}
- (AppUrlMsgBuilder*) setSessionId:(NSString*) value {
  resultAppUrlMsg.hasSessionId = YES;
  resultAppUrlMsg.sessionId = value;
  return self;
}
- (AppUrlMsgBuilder*) clearSessionId {
  resultAppUrlMsg.hasSessionId = NO;
  resultAppUrlMsg.sessionId = @"";
  return self;
}
- (BOOL) hasAppKey {
  return resultAppUrlMsg.hasAppKey;
}
- (NSString*) appKey {
  return resultAppUrlMsg.appKey;
}
- (AppUrlMsgBuilder*) setAppKey:(NSString*) value {
  resultAppUrlMsg.hasAppKey = YES;
  resultAppUrlMsg.appKey = value;
  return self;
}
- (AppUrlMsgBuilder*) clearAppKey {
  resultAppUrlMsg.hasAppKey = NO;
  resultAppUrlMsg.appKey = @"";
  return self;
}
- (BOOL) hasDeviceId {
  return resultAppUrlMsg.hasDeviceId;
}
- (NSString*) deviceId {
  return resultAppUrlMsg.deviceId;
}
- (AppUrlMsgBuilder*) setDeviceId:(NSString*) value {
  resultAppUrlMsg.hasDeviceId = YES;
  resultAppUrlMsg.deviceId = value;
  return self;
}
- (AppUrlMsgBuilder*) clearDeviceId {
  resultAppUrlMsg.hasDeviceId = NO;
  resultAppUrlMsg.deviceId = @"";
  return self;
}
- (BOOL) hasUrl {
  return resultAppUrlMsg.hasUrl;
}
- (NSString*) url {
  return resultAppUrlMsg.url;
}
- (AppUrlMsgBuilder*) setUrl:(NSString*) value {
  resultAppUrlMsg.hasUrl = YES;
  resultAppUrlMsg.url = value;
  return self;
}
- (AppUrlMsgBuilder*) clearUrl {
  resultAppUrlMsg.hasUrl = NO;
  resultAppUrlMsg.url = @"";
  return self;
}
- (BOOL) hasSucceed {
  return resultAppUrlMsg.hasSucceed;
}
- (NSString*) succeed {
  return resultAppUrlMsg.succeed;
}
- (AppUrlMsgBuilder*) setSucceed:(NSString*) value {
  resultAppUrlMsg.hasSucceed = YES;
  resultAppUrlMsg.succeed = value;
  return self;
}
- (AppUrlMsgBuilder*) clearSucceed {
  resultAppUrlMsg.hasSucceed = NO;
  resultAppUrlMsg.succeed = @"";
  return self;
}
@end

@interface UserOptionalMsg ()
@property (strong) NSString* eventName;
@property (strong) NSString* eventTime;
@property (strong) NSString* sessionId;
@property (strong) NSString* appKey;
@property (strong) NSString* deviceId;
@property (strong) NSMutableArray * itemArray;
@end

@implementation UserOptionalMsg

- (BOOL) hasEventName {
  return !!hasEventName_;
}
- (void) setHasEventName:(BOOL) _value_ {
  hasEventName_ = !!_value_;
}
@synthesize eventName;
- (BOOL) hasEventTime {
  return !!hasEventTime_;
}
- (void) setHasEventTime:(BOOL) _value_ {
  hasEventTime_ = !!_value_;
}
@synthesize eventTime;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (BOOL) hasAppKey {
  return !!hasAppKey_;
}
- (void) setHasAppKey:(BOOL) _value_ {
  hasAppKey_ = !!_value_;
}
@synthesize appKey;
- (BOOL) hasDeviceId {
  return !!hasDeviceId_;
}
- (void) setHasDeviceId:(BOOL) _value_ {
  hasDeviceId_ = !!_value_;
}
@synthesize deviceId;
@synthesize itemArray;
@dynamic item;
- (instancetype) init {
  if ((self = [super init])) {
    self.eventName = @"";
    self.eventTime = @"";
    self.sessionId = @"";
    self.appKey = @"";
    self.deviceId = @"";
  }
  return self;
}
static UserOptionalMsg* defaultUserOptionalMsgInstance = nil;
+ (void) initialize {
  if (self == [UserOptionalMsg class]) {
    defaultUserOptionalMsgInstance = [[UserOptionalMsg alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultUserOptionalMsgInstance;
}
- (instancetype) defaultInstance {
  return defaultUserOptionalMsgInstance;
}
- (NSArray *)item {
  return itemArray;
}
- (MapItem*)itemAtIndex:(NSUInteger)index {
  return [itemArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasEventName) {
    return NO;
  }
  if (!self.hasEventTime) {
    return NO;
  }
  if (!self.hasSessionId) {
    return NO;
  }
  if (!self.hasAppKey) {
    return NO;
  }
  if (!self.hasDeviceId) {
    return NO;
  }
  __block BOOL isInititem = YES;
   [self.item enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInititem = NO;
      *stop = YES;
    }
  }];
  if (!isInititem) return isInititem;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasEventName) {
    [output writeString:1 value:self.eventName];
  }
  if (self.hasEventTime) {
    [output writeString:2 value:self.eventTime];
  }
  if (self.hasSessionId) {
    [output writeString:3 value:self.sessionId];
  }
  if (self.hasAppKey) {
    [output writeString:4 value:self.appKey];
  }
  if (self.hasDeviceId) {
    [output writeString:5 value:self.deviceId];
  }
  [self.itemArray enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:6 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasEventName) {
    size_ += computeStringSize(1, self.eventName);
  }
  if (self.hasEventTime) {
    size_ += computeStringSize(2, self.eventTime);
  }
  if (self.hasSessionId) {
    size_ += computeStringSize(3, self.sessionId);
  }
  if (self.hasAppKey) {
    size_ += computeStringSize(4, self.appKey);
  }
  if (self.hasDeviceId) {
    size_ += computeStringSize(5, self.deviceId);
  }
  [self.itemArray enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(6, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (UserOptionalMsg*) parseFromData:(NSData*) data {
  return (UserOptionalMsg*)[[[UserOptionalMsg builder] mergeFromData:data] build];
}
+ (UserOptionalMsg*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserOptionalMsg*)[[[UserOptionalMsg builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserOptionalMsg*) parseFromInputStream:(NSInputStream*) input {
  return (UserOptionalMsg*)[[[UserOptionalMsg builder] mergeFromInputStream:input] build];
}
+ (UserOptionalMsg*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserOptionalMsg*)[[[UserOptionalMsg builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserOptionalMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserOptionalMsg*)[[[UserOptionalMsg builder] mergeFromCodedInputStream:input] build];
}
+ (UserOptionalMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserOptionalMsg*)[[[UserOptionalMsg builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserOptionalMsgBuilder*) builder {
  return [[UserOptionalMsgBuilder alloc] init];
}
+ (UserOptionalMsgBuilder*) builderWithPrototype:(UserOptionalMsg*) prototype {
  return [[UserOptionalMsg builder] mergeFrom:prototype];
}
- (UserOptionalMsgBuilder*) builder {
  return [UserOptionalMsg builder];
}
- (UserOptionalMsgBuilder*) toBuilder {
  return [UserOptionalMsg builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasEventName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventName", self.eventName];
  }
  if (self.hasEventTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventTime", self.eventTime];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", self.sessionId];
  }
  if (self.hasAppKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appKey", self.appKey];
  }
  if (self.hasDeviceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceId", self.deviceId];
  }
  [self.itemArray enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"item"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasEventName) {
    [dictionary setObject: self.eventName forKey: @"eventName"];
  }
  if (self.hasEventTime) {
    [dictionary setObject: self.eventTime forKey: @"eventTime"];
  }
  if (self.hasSessionId) {
    [dictionary setObject: self.sessionId forKey: @"sessionId"];
  }
  if (self.hasAppKey) {
    [dictionary setObject: self.appKey forKey: @"appKey"];
  }
  if (self.hasDeviceId) {
    [dictionary setObject: self.deviceId forKey: @"deviceId"];
  }
  for (MapItem* element in self.itemArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"item"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[UserOptionalMsg class]]) {
    return NO;
  }
  UserOptionalMsg *otherMessage = other;
  return
      self.hasEventName == otherMessage.hasEventName &&
      (!self.hasEventName || [self.eventName isEqual:otherMessage.eventName]) &&
      self.hasEventTime == otherMessage.hasEventTime &&
      (!self.hasEventTime || [self.eventTime isEqual:otherMessage.eventTime]) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || [self.sessionId isEqual:otherMessage.sessionId]) &&
      self.hasAppKey == otherMessage.hasAppKey &&
      (!self.hasAppKey || [self.appKey isEqual:otherMessage.appKey]) &&
      self.hasDeviceId == otherMessage.hasDeviceId &&
      (!self.hasDeviceId || [self.deviceId isEqual:otherMessage.deviceId]) &&
      [self.itemArray isEqualToArray:otherMessage.itemArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasEventName) {
    hashCode = hashCode * 31 + [self.eventName hash];
  }
  if (self.hasEventTime) {
    hashCode = hashCode * 31 + [self.eventTime hash];
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [self.sessionId hash];
  }
  if (self.hasAppKey) {
    hashCode = hashCode * 31 + [self.appKey hash];
  }
  if (self.hasDeviceId) {
    hashCode = hashCode * 31 + [self.deviceId hash];
  }
  [self.itemArray enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface UserOptionalMsgBuilder()
@property (strong) UserOptionalMsg* resultUserOptionalMsg;
@end

@implementation UserOptionalMsgBuilder
@synthesize resultUserOptionalMsg;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUserOptionalMsg = [[UserOptionalMsg alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUserOptionalMsg;
}
- (UserOptionalMsgBuilder*) clear {
  self.resultUserOptionalMsg = [[UserOptionalMsg alloc] init];
  return self;
}
- (UserOptionalMsgBuilder*) clone {
  return [UserOptionalMsg builderWithPrototype:resultUserOptionalMsg];
}
- (UserOptionalMsg*) defaultInstance {
  return [UserOptionalMsg defaultInstance];
}
- (UserOptionalMsg*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserOptionalMsg*) buildPartial {
  UserOptionalMsg* returnMe = resultUserOptionalMsg;
  self.resultUserOptionalMsg = nil;
  return returnMe;
}
- (UserOptionalMsgBuilder*) mergeFrom:(UserOptionalMsg*) other {
  if (other == [UserOptionalMsg defaultInstance]) {
    return self;
  }
  if (other.hasEventName) {
    [self setEventName:other.eventName];
  }
  if (other.hasEventTime) {
    [self setEventTime:other.eventTime];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasAppKey) {
    [self setAppKey:other.appKey];
  }
  if (other.hasDeviceId) {
    [self setDeviceId:other.deviceId];
  }
  if (other.itemArray.count > 0) {
    if (resultUserOptionalMsg.itemArray == nil) {
      resultUserOptionalMsg.itemArray = [[NSMutableArray alloc] initWithArray:other.itemArray];
    } else {
      [resultUserOptionalMsg.itemArray addObjectsFromArray:other.itemArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserOptionalMsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserOptionalMsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setEventName:[input readString]];
        break;
      }
      case 18: {
        [self setEventTime:[input readString]];
        break;
      }
      case 26: {
        [self setSessionId:[input readString]];
        break;
      }
      case 34: {
        [self setAppKey:[input readString]];
        break;
      }
      case 42: {
        [self setDeviceId:[input readString]];
        break;
      }
      case 50: {
        MapItemBuilder* subBuilder = [MapItem builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addItem:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasEventName {
  return resultUserOptionalMsg.hasEventName;
}
- (NSString*) eventName {
  return resultUserOptionalMsg.eventName;
}
- (UserOptionalMsgBuilder*) setEventName:(NSString*) value {
  resultUserOptionalMsg.hasEventName = YES;
  resultUserOptionalMsg.eventName = value;
  return self;
}
- (UserOptionalMsgBuilder*) clearEventName {
  resultUserOptionalMsg.hasEventName = NO;
  resultUserOptionalMsg.eventName = @"";
  return self;
}
- (BOOL) hasEventTime {
  return resultUserOptionalMsg.hasEventTime;
}
- (NSString*) eventTime {
  return resultUserOptionalMsg.eventTime;
}
- (UserOptionalMsgBuilder*) setEventTime:(NSString*) value {
  resultUserOptionalMsg.hasEventTime = YES;
  resultUserOptionalMsg.eventTime = value;
  return self;
}
- (UserOptionalMsgBuilder*) clearEventTime {
  resultUserOptionalMsg.hasEventTime = NO;
  resultUserOptionalMsg.eventTime = @"";
  return self;
}
- (BOOL) hasSessionId {
  return resultUserOptionalMsg.hasSessionId;
}
- (NSString*) sessionId {
  return resultUserOptionalMsg.sessionId;
}
- (UserOptionalMsgBuilder*) setSessionId:(NSString*) value {
  resultUserOptionalMsg.hasSessionId = YES;
  resultUserOptionalMsg.sessionId = value;
  return self;
}
- (UserOptionalMsgBuilder*) clearSessionId {
  resultUserOptionalMsg.hasSessionId = NO;
  resultUserOptionalMsg.sessionId = @"";
  return self;
}
- (BOOL) hasAppKey {
  return resultUserOptionalMsg.hasAppKey;
}
- (NSString*) appKey {
  return resultUserOptionalMsg.appKey;
}
- (UserOptionalMsgBuilder*) setAppKey:(NSString*) value {
  resultUserOptionalMsg.hasAppKey = YES;
  resultUserOptionalMsg.appKey = value;
  return self;
}
- (UserOptionalMsgBuilder*) clearAppKey {
  resultUserOptionalMsg.hasAppKey = NO;
  resultUserOptionalMsg.appKey = @"";
  return self;
}
- (BOOL) hasDeviceId {
  return resultUserOptionalMsg.hasDeviceId;
}
- (NSString*) deviceId {
  return resultUserOptionalMsg.deviceId;
}
- (UserOptionalMsgBuilder*) setDeviceId:(NSString*) value {
  resultUserOptionalMsg.hasDeviceId = YES;
  resultUserOptionalMsg.deviceId = value;
  return self;
}
- (UserOptionalMsgBuilder*) clearDeviceId {
  resultUserOptionalMsg.hasDeviceId = NO;
  resultUserOptionalMsg.deviceId = @"";
  return self;
}
- (NSMutableArray *)item {
  return resultUserOptionalMsg.itemArray;
}
- (MapItem*)itemAtIndex:(NSUInteger)index {
  return [resultUserOptionalMsg itemAtIndex:index];
}
- (UserOptionalMsgBuilder *)addItem:(MapItem*)value {
  if (resultUserOptionalMsg.itemArray == nil) {
    resultUserOptionalMsg.itemArray = [[NSMutableArray alloc]init];
  }
  [resultUserOptionalMsg.itemArray addObject:value];
  return self;
}
- (UserOptionalMsgBuilder *)setItemArray:(NSArray *)array {
  resultUserOptionalMsg.itemArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (UserOptionalMsgBuilder *)clearItem {
  resultUserOptionalMsg.itemArray = nil;
  return self;
}
@end

@interface AppInstallationMsg ()
@property (strong) NSString* eventName;
@property (strong) NSString* eventTime;
@property (strong) NSString* sessionId;
@property (strong) NSString* appKey;
@property (strong) NSString* deviceId;
@property (strong) NSMutableArray * itemArray;
@end

@implementation AppInstallationMsg

- (BOOL) hasEventName {
  return !!hasEventName_;
}
- (void) setHasEventName:(BOOL) _value_ {
  hasEventName_ = !!_value_;
}
@synthesize eventName;
- (BOOL) hasEventTime {
  return !!hasEventTime_;
}
- (void) setHasEventTime:(BOOL) _value_ {
  hasEventTime_ = !!_value_;
}
@synthesize eventTime;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (BOOL) hasAppKey {
  return !!hasAppKey_;
}
- (void) setHasAppKey:(BOOL) _value_ {
  hasAppKey_ = !!_value_;
}
@synthesize appKey;
- (BOOL) hasDeviceId {
  return !!hasDeviceId_;
}
- (void) setHasDeviceId:(BOOL) _value_ {
  hasDeviceId_ = !!_value_;
}
@synthesize deviceId;
@synthesize itemArray;
@dynamic item;
- (instancetype) init {
  if ((self = [super init])) {
    self.eventName = @"";
    self.eventTime = @"";
    self.sessionId = @"";
    self.appKey = @"";
    self.deviceId = @"";
  }
  return self;
}
static AppInstallationMsg* defaultAppInstallationMsgInstance = nil;
+ (void) initialize {
  if (self == [AppInstallationMsg class]) {
    defaultAppInstallationMsgInstance = [[AppInstallationMsg alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAppInstallationMsgInstance;
}
- (instancetype) defaultInstance {
  return defaultAppInstallationMsgInstance;
}
- (NSArray *)item {
  return itemArray;
}
- (MapItem*)itemAtIndex:(NSUInteger)index {
  return [itemArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasEventName) {
    return NO;
  }
  if (!self.hasEventTime) {
    return NO;
  }
  if (!self.hasSessionId) {
    return NO;
  }
  if (!self.hasAppKey) {
    return NO;
  }
  if (!self.hasDeviceId) {
    return NO;
  }
  __block BOOL isInititem = YES;
   [self.item enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInititem = NO;
      *stop = YES;
    }
  }];
  if (!isInititem) return isInititem;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasEventName) {
    [output writeString:1 value:self.eventName];
  }
  if (self.hasEventTime) {
    [output writeString:2 value:self.eventTime];
  }
  if (self.hasSessionId) {
    [output writeString:3 value:self.sessionId];
  }
  if (self.hasAppKey) {
    [output writeString:4 value:self.appKey];
  }
  if (self.hasDeviceId) {
    [output writeString:5 value:self.deviceId];
  }
  [self.itemArray enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:6 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasEventName) {
    size_ += computeStringSize(1, self.eventName);
  }
  if (self.hasEventTime) {
    size_ += computeStringSize(2, self.eventTime);
  }
  if (self.hasSessionId) {
    size_ += computeStringSize(3, self.sessionId);
  }
  if (self.hasAppKey) {
    size_ += computeStringSize(4, self.appKey);
  }
  if (self.hasDeviceId) {
    size_ += computeStringSize(5, self.deviceId);
  }
  [self.itemArray enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(6, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AppInstallationMsg*) parseFromData:(NSData*) data {
  return (AppInstallationMsg*)[[[AppInstallationMsg builder] mergeFromData:data] build];
}
+ (AppInstallationMsg*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppInstallationMsg*)[[[AppInstallationMsg builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AppInstallationMsg*) parseFromInputStream:(NSInputStream*) input {
  return (AppInstallationMsg*)[[[AppInstallationMsg builder] mergeFromInputStream:input] build];
}
+ (AppInstallationMsg*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppInstallationMsg*)[[[AppInstallationMsg builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppInstallationMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AppInstallationMsg*)[[[AppInstallationMsg builder] mergeFromCodedInputStream:input] build];
}
+ (AppInstallationMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AppInstallationMsg*)[[[AppInstallationMsg builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AppInstallationMsgBuilder*) builder {
  return [[AppInstallationMsgBuilder alloc] init];
}
+ (AppInstallationMsgBuilder*) builderWithPrototype:(AppInstallationMsg*) prototype {
  return [[AppInstallationMsg builder] mergeFrom:prototype];
}
- (AppInstallationMsgBuilder*) builder {
  return [AppInstallationMsg builder];
}
- (AppInstallationMsgBuilder*) toBuilder {
  return [AppInstallationMsg builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasEventName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventName", self.eventName];
  }
  if (self.hasEventTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventTime", self.eventTime];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", self.sessionId];
  }
  if (self.hasAppKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appKey", self.appKey];
  }
  if (self.hasDeviceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceId", self.deviceId];
  }
  [self.itemArray enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"item"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasEventName) {
    [dictionary setObject: self.eventName forKey: @"eventName"];
  }
  if (self.hasEventTime) {
    [dictionary setObject: self.eventTime forKey: @"eventTime"];
  }
  if (self.hasSessionId) {
    [dictionary setObject: self.sessionId forKey: @"sessionId"];
  }
  if (self.hasAppKey) {
    [dictionary setObject: self.appKey forKey: @"appKey"];
  }
  if (self.hasDeviceId) {
    [dictionary setObject: self.deviceId forKey: @"deviceId"];
  }
  for (MapItem* element in self.itemArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"item"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AppInstallationMsg class]]) {
    return NO;
  }
  AppInstallationMsg *otherMessage = other;
  return
      self.hasEventName == otherMessage.hasEventName &&
      (!self.hasEventName || [self.eventName isEqual:otherMessage.eventName]) &&
      self.hasEventTime == otherMessage.hasEventTime &&
      (!self.hasEventTime || [self.eventTime isEqual:otherMessage.eventTime]) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || [self.sessionId isEqual:otherMessage.sessionId]) &&
      self.hasAppKey == otherMessage.hasAppKey &&
      (!self.hasAppKey || [self.appKey isEqual:otherMessage.appKey]) &&
      self.hasDeviceId == otherMessage.hasDeviceId &&
      (!self.hasDeviceId || [self.deviceId isEqual:otherMessage.deviceId]) &&
      [self.itemArray isEqualToArray:otherMessage.itemArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasEventName) {
    hashCode = hashCode * 31 + [self.eventName hash];
  }
  if (self.hasEventTime) {
    hashCode = hashCode * 31 + [self.eventTime hash];
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [self.sessionId hash];
  }
  if (self.hasAppKey) {
    hashCode = hashCode * 31 + [self.appKey hash];
  }
  if (self.hasDeviceId) {
    hashCode = hashCode * 31 + [self.deviceId hash];
  }
  [self.itemArray enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AppInstallationMsgBuilder()
@property (strong) AppInstallationMsg* resultAppInstallationMsg;
@end

@implementation AppInstallationMsgBuilder
@synthesize resultAppInstallationMsg;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAppInstallationMsg = [[AppInstallationMsg alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAppInstallationMsg;
}
- (AppInstallationMsgBuilder*) clear {
  self.resultAppInstallationMsg = [[AppInstallationMsg alloc] init];
  return self;
}
- (AppInstallationMsgBuilder*) clone {
  return [AppInstallationMsg builderWithPrototype:resultAppInstallationMsg];
}
- (AppInstallationMsg*) defaultInstance {
  return [AppInstallationMsg defaultInstance];
}
- (AppInstallationMsg*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AppInstallationMsg*) buildPartial {
  AppInstallationMsg* returnMe = resultAppInstallationMsg;
  self.resultAppInstallationMsg = nil;
  return returnMe;
}
- (AppInstallationMsgBuilder*) mergeFrom:(AppInstallationMsg*) other {
  if (other == [AppInstallationMsg defaultInstance]) {
    return self;
  }
  if (other.hasEventName) {
    [self setEventName:other.eventName];
  }
  if (other.hasEventTime) {
    [self setEventTime:other.eventTime];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasAppKey) {
    [self setAppKey:other.appKey];
  }
  if (other.hasDeviceId) {
    [self setDeviceId:other.deviceId];
  }
  if (other.itemArray.count > 0) {
    if (resultAppInstallationMsg.itemArray == nil) {
      resultAppInstallationMsg.itemArray = [[NSMutableArray alloc] initWithArray:other.itemArray];
    } else {
      [resultAppInstallationMsg.itemArray addObjectsFromArray:other.itemArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AppInstallationMsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AppInstallationMsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setEventName:[input readString]];
        break;
      }
      case 18: {
        [self setEventTime:[input readString]];
        break;
      }
      case 26: {
        [self setSessionId:[input readString]];
        break;
      }
      case 34: {
        [self setAppKey:[input readString]];
        break;
      }
      case 42: {
        [self setDeviceId:[input readString]];
        break;
      }
      case 50: {
        MapItemBuilder* subBuilder = [MapItem builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addItem:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasEventName {
  return resultAppInstallationMsg.hasEventName;
}
- (NSString*) eventName {
  return resultAppInstallationMsg.eventName;
}
- (AppInstallationMsgBuilder*) setEventName:(NSString*) value {
  resultAppInstallationMsg.hasEventName = YES;
  resultAppInstallationMsg.eventName = value;
  return self;
}
- (AppInstallationMsgBuilder*) clearEventName {
  resultAppInstallationMsg.hasEventName = NO;
  resultAppInstallationMsg.eventName = @"";
  return self;
}
- (BOOL) hasEventTime {
  return resultAppInstallationMsg.hasEventTime;
}
- (NSString*) eventTime {
  return resultAppInstallationMsg.eventTime;
}
- (AppInstallationMsgBuilder*) setEventTime:(NSString*) value {
  resultAppInstallationMsg.hasEventTime = YES;
  resultAppInstallationMsg.eventTime = value;
  return self;
}
- (AppInstallationMsgBuilder*) clearEventTime {
  resultAppInstallationMsg.hasEventTime = NO;
  resultAppInstallationMsg.eventTime = @"";
  return self;
}
- (BOOL) hasSessionId {
  return resultAppInstallationMsg.hasSessionId;
}
- (NSString*) sessionId {
  return resultAppInstallationMsg.sessionId;
}
- (AppInstallationMsgBuilder*) setSessionId:(NSString*) value {
  resultAppInstallationMsg.hasSessionId = YES;
  resultAppInstallationMsg.sessionId = value;
  return self;
}
- (AppInstallationMsgBuilder*) clearSessionId {
  resultAppInstallationMsg.hasSessionId = NO;
  resultAppInstallationMsg.sessionId = @"";
  return self;
}
- (BOOL) hasAppKey {
  return resultAppInstallationMsg.hasAppKey;
}
- (NSString*) appKey {
  return resultAppInstallationMsg.appKey;
}
- (AppInstallationMsgBuilder*) setAppKey:(NSString*) value {
  resultAppInstallationMsg.hasAppKey = YES;
  resultAppInstallationMsg.appKey = value;
  return self;
}
- (AppInstallationMsgBuilder*) clearAppKey {
  resultAppInstallationMsg.hasAppKey = NO;
  resultAppInstallationMsg.appKey = @"";
  return self;
}
- (BOOL) hasDeviceId {
  return resultAppInstallationMsg.hasDeviceId;
}
- (NSString*) deviceId {
  return resultAppInstallationMsg.deviceId;
}
- (AppInstallationMsgBuilder*) setDeviceId:(NSString*) value {
  resultAppInstallationMsg.hasDeviceId = YES;
  resultAppInstallationMsg.deviceId = value;
  return self;
}
- (AppInstallationMsgBuilder*) clearDeviceId {
  resultAppInstallationMsg.hasDeviceId = NO;
  resultAppInstallationMsg.deviceId = @"";
  return self;
}
- (NSMutableArray *)item {
  return resultAppInstallationMsg.itemArray;
}
- (MapItem*)itemAtIndex:(NSUInteger)index {
  return [resultAppInstallationMsg itemAtIndex:index];
}
- (AppInstallationMsgBuilder *)addItem:(MapItem*)value {
  if (resultAppInstallationMsg.itemArray == nil) {
    resultAppInstallationMsg.itemArray = [[NSMutableArray alloc]init];
  }
  [resultAppInstallationMsg.itemArray addObject:value];
  return self;
}
- (AppInstallationMsgBuilder *)setItemArray:(NSArray *)array {
  resultAppInstallationMsg.itemArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (AppInstallationMsgBuilder *)clearItem {
  resultAppInstallationMsg.itemArray = nil;
  return self;
}
@end

@interface PushMsg ()
@property (strong) NSString* eventName;
@property (strong) NSString* eventTime;
@property (strong) NSString* sessionId;
@property (strong) NSString* appKey;
@property (strong) NSString* deviceId;
@property (strong) NSString* content;
@property (strong) NSString* uri;
@property (strong) NSString* jobId;
@property (strong) NSMutableArray * itemArray;
@end

@implementation PushMsg

- (BOOL) hasEventName {
  return !!hasEventName_;
}
- (void) setHasEventName:(BOOL) _value_ {
  hasEventName_ = !!_value_;
}
@synthesize eventName;
- (BOOL) hasEventTime {
  return !!hasEventTime_;
}
- (void) setHasEventTime:(BOOL) _value_ {
  hasEventTime_ = !!_value_;
}
@synthesize eventTime;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (BOOL) hasAppKey {
  return !!hasAppKey_;
}
- (void) setHasAppKey:(BOOL) _value_ {
  hasAppKey_ = !!_value_;
}
@synthesize appKey;
- (BOOL) hasDeviceId {
  return !!hasDeviceId_;
}
- (void) setHasDeviceId:(BOOL) _value_ {
  hasDeviceId_ = !!_value_;
}
@synthesize deviceId;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) _value_ {
  hasContent_ = !!_value_;
}
@synthesize content;
- (BOOL) hasUri {
  return !!hasUri_;
}
- (void) setHasUri:(BOOL) _value_ {
  hasUri_ = !!_value_;
}
@synthesize uri;
- (BOOL) hasJobId {
  return !!hasJobId_;
}
- (void) setHasJobId:(BOOL) _value_ {
  hasJobId_ = !!_value_;
}
@synthesize jobId;
@synthesize itemArray;
@dynamic item;
- (instancetype) init {
  if ((self = [super init])) {
    self.eventName = @"";
    self.eventTime = @"";
    self.sessionId = @"";
    self.appKey = @"";
    self.deviceId = @"";
    self.content = @"";
    self.uri = @"";
    self.jobId = @"";
  }
  return self;
}
static PushMsg* defaultPushMsgInstance = nil;
+ (void) initialize {
  if (self == [PushMsg class]) {
    defaultPushMsgInstance = [[PushMsg alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPushMsgInstance;
}
- (instancetype) defaultInstance {
  return defaultPushMsgInstance;
}
- (NSArray *)item {
  return itemArray;
}
- (MapItem*)itemAtIndex:(NSUInteger)index {
  return [itemArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasEventName) {
    return NO;
  }
  if (!self.hasEventTime) {
    return NO;
  }
  if (!self.hasSessionId) {
    return NO;
  }
  if (!self.hasAppKey) {
    return NO;
  }
  if (!self.hasDeviceId) {
    return NO;
  }
  if (!self.hasContent) {
    return NO;
  }
  __block BOOL isInititem = YES;
   [self.item enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInititem = NO;
      *stop = YES;
    }
  }];
  if (!isInititem) return isInititem;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasEventName) {
    [output writeString:1 value:self.eventName];
  }
  if (self.hasEventTime) {
    [output writeString:2 value:self.eventTime];
  }
  if (self.hasSessionId) {
    [output writeString:3 value:self.sessionId];
  }
  if (self.hasAppKey) {
    [output writeString:4 value:self.appKey];
  }
  if (self.hasDeviceId) {
    [output writeString:5 value:self.deviceId];
  }
  if (self.hasContent) {
    [output writeString:6 value:self.content];
  }
  if (self.hasUri) {
    [output writeString:7 value:self.uri];
  }
  if (self.hasJobId) {
    [output writeString:8 value:self.jobId];
  }
  [self.itemArray enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:9 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasEventName) {
    size_ += computeStringSize(1, self.eventName);
  }
  if (self.hasEventTime) {
    size_ += computeStringSize(2, self.eventTime);
  }
  if (self.hasSessionId) {
    size_ += computeStringSize(3, self.sessionId);
  }
  if (self.hasAppKey) {
    size_ += computeStringSize(4, self.appKey);
  }
  if (self.hasDeviceId) {
    size_ += computeStringSize(5, self.deviceId);
  }
  if (self.hasContent) {
    size_ += computeStringSize(6, self.content);
  }
  if (self.hasUri) {
    size_ += computeStringSize(7, self.uri);
  }
  if (self.hasJobId) {
    size_ += computeStringSize(8, self.jobId);
  }
  [self.itemArray enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(9, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PushMsg*) parseFromData:(NSData*) data {
  return (PushMsg*)[[[PushMsg builder] mergeFromData:data] build];
}
+ (PushMsg*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PushMsg*)[[[PushMsg builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PushMsg*) parseFromInputStream:(NSInputStream*) input {
  return (PushMsg*)[[[PushMsg builder] mergeFromInputStream:input] build];
}
+ (PushMsg*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PushMsg*)[[[PushMsg builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PushMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PushMsg*)[[[PushMsg builder] mergeFromCodedInputStream:input] build];
}
+ (PushMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PushMsg*)[[[PushMsg builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PushMsgBuilder*) builder {
  return [[PushMsgBuilder alloc] init];
}
+ (PushMsgBuilder*) builderWithPrototype:(PushMsg*) prototype {
  return [[PushMsg builder] mergeFrom:prototype];
}
- (PushMsgBuilder*) builder {
  return [PushMsg builder];
}
- (PushMsgBuilder*) toBuilder {
  return [PushMsg builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasEventName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventName", self.eventName];
  }
  if (self.hasEventTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventTime", self.eventTime];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", self.sessionId];
  }
  if (self.hasAppKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appKey", self.appKey];
  }
  if (self.hasDeviceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceId", self.deviceId];
  }
  if (self.hasContent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"content", self.content];
  }
  if (self.hasUri) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uri", self.uri];
  }
  if (self.hasJobId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"jobId", self.jobId];
  }
  [self.itemArray enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"item"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasEventName) {
    [dictionary setObject: self.eventName forKey: @"eventName"];
  }
  if (self.hasEventTime) {
    [dictionary setObject: self.eventTime forKey: @"eventTime"];
  }
  if (self.hasSessionId) {
    [dictionary setObject: self.sessionId forKey: @"sessionId"];
  }
  if (self.hasAppKey) {
    [dictionary setObject: self.appKey forKey: @"appKey"];
  }
  if (self.hasDeviceId) {
    [dictionary setObject: self.deviceId forKey: @"deviceId"];
  }
  if (self.hasContent) {
    [dictionary setObject: self.content forKey: @"content"];
  }
  if (self.hasUri) {
    [dictionary setObject: self.uri forKey: @"uri"];
  }
  if (self.hasJobId) {
    [dictionary setObject: self.jobId forKey: @"jobId"];
  }
  for (MapItem* element in self.itemArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"item"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PushMsg class]]) {
    return NO;
  }
  PushMsg *otherMessage = other;
  return
      self.hasEventName == otherMessage.hasEventName &&
      (!self.hasEventName || [self.eventName isEqual:otherMessage.eventName]) &&
      self.hasEventTime == otherMessage.hasEventTime &&
      (!self.hasEventTime || [self.eventTime isEqual:otherMessage.eventTime]) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || [self.sessionId isEqual:otherMessage.sessionId]) &&
      self.hasAppKey == otherMessage.hasAppKey &&
      (!self.hasAppKey || [self.appKey isEqual:otherMessage.appKey]) &&
      self.hasDeviceId == otherMessage.hasDeviceId &&
      (!self.hasDeviceId || [self.deviceId isEqual:otherMessage.deviceId]) &&
      self.hasContent == otherMessage.hasContent &&
      (!self.hasContent || [self.content isEqual:otherMessage.content]) &&
      self.hasUri == otherMessage.hasUri &&
      (!self.hasUri || [self.uri isEqual:otherMessage.uri]) &&
      self.hasJobId == otherMessage.hasJobId &&
      (!self.hasJobId || [self.jobId isEqual:otherMessage.jobId]) &&
      [self.itemArray isEqualToArray:otherMessage.itemArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasEventName) {
    hashCode = hashCode * 31 + [self.eventName hash];
  }
  if (self.hasEventTime) {
    hashCode = hashCode * 31 + [self.eventTime hash];
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [self.sessionId hash];
  }
  if (self.hasAppKey) {
    hashCode = hashCode * 31 + [self.appKey hash];
  }
  if (self.hasDeviceId) {
    hashCode = hashCode * 31 + [self.deviceId hash];
  }
  if (self.hasContent) {
    hashCode = hashCode * 31 + [self.content hash];
  }
  if (self.hasUri) {
    hashCode = hashCode * 31 + [self.uri hash];
  }
  if (self.hasJobId) {
    hashCode = hashCode * 31 + [self.jobId hash];
  }
  [self.itemArray enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PushMsgBuilder()
@property (strong) PushMsg* resultPushMsg;
@end

@implementation PushMsgBuilder
@synthesize resultPushMsg;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPushMsg = [[PushMsg alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPushMsg;
}
- (PushMsgBuilder*) clear {
  self.resultPushMsg = [[PushMsg alloc] init];
  return self;
}
- (PushMsgBuilder*) clone {
  return [PushMsg builderWithPrototype:resultPushMsg];
}
- (PushMsg*) defaultInstance {
  return [PushMsg defaultInstance];
}
- (PushMsg*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PushMsg*) buildPartial {
  PushMsg* returnMe = resultPushMsg;
  self.resultPushMsg = nil;
  return returnMe;
}
- (PushMsgBuilder*) mergeFrom:(PushMsg*) other {
  if (other == [PushMsg defaultInstance]) {
    return self;
  }
  if (other.hasEventName) {
    [self setEventName:other.eventName];
  }
  if (other.hasEventTime) {
    [self setEventTime:other.eventTime];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasAppKey) {
    [self setAppKey:other.appKey];
  }
  if (other.hasDeviceId) {
    [self setDeviceId:other.deviceId];
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  if (other.hasUri) {
    [self setUri:other.uri];
  }
  if (other.hasJobId) {
    [self setJobId:other.jobId];
  }
  if (other.itemArray.count > 0) {
    if (resultPushMsg.itemArray == nil) {
      resultPushMsg.itemArray = [[NSMutableArray alloc] initWithArray:other.itemArray];
    } else {
      [resultPushMsg.itemArray addObjectsFromArray:other.itemArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PushMsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PushMsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setEventName:[input readString]];
        break;
      }
      case 18: {
        [self setEventTime:[input readString]];
        break;
      }
      case 26: {
        [self setSessionId:[input readString]];
        break;
      }
      case 34: {
        [self setAppKey:[input readString]];
        break;
      }
      case 42: {
        [self setDeviceId:[input readString]];
        break;
      }
      case 50: {
        [self setContent:[input readString]];
        break;
      }
      case 58: {
        [self setUri:[input readString]];
        break;
      }
      case 66: {
        [self setJobId:[input readString]];
        break;
      }
      case 74: {
        MapItemBuilder* subBuilder = [MapItem builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addItem:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasEventName {
  return resultPushMsg.hasEventName;
}
- (NSString*) eventName {
  return resultPushMsg.eventName;
}
- (PushMsgBuilder*) setEventName:(NSString*) value {
  resultPushMsg.hasEventName = YES;
  resultPushMsg.eventName = value;
  return self;
}
- (PushMsgBuilder*) clearEventName {
  resultPushMsg.hasEventName = NO;
  resultPushMsg.eventName = @"";
  return self;
}
- (BOOL) hasEventTime {
  return resultPushMsg.hasEventTime;
}
- (NSString*) eventTime {
  return resultPushMsg.eventTime;
}
- (PushMsgBuilder*) setEventTime:(NSString*) value {
  resultPushMsg.hasEventTime = YES;
  resultPushMsg.eventTime = value;
  return self;
}
- (PushMsgBuilder*) clearEventTime {
  resultPushMsg.hasEventTime = NO;
  resultPushMsg.eventTime = @"";
  return self;
}
- (BOOL) hasSessionId {
  return resultPushMsg.hasSessionId;
}
- (NSString*) sessionId {
  return resultPushMsg.sessionId;
}
- (PushMsgBuilder*) setSessionId:(NSString*) value {
  resultPushMsg.hasSessionId = YES;
  resultPushMsg.sessionId = value;
  return self;
}
- (PushMsgBuilder*) clearSessionId {
  resultPushMsg.hasSessionId = NO;
  resultPushMsg.sessionId = @"";
  return self;
}
- (BOOL) hasAppKey {
  return resultPushMsg.hasAppKey;
}
- (NSString*) appKey {
  return resultPushMsg.appKey;
}
- (PushMsgBuilder*) setAppKey:(NSString*) value {
  resultPushMsg.hasAppKey = YES;
  resultPushMsg.appKey = value;
  return self;
}
- (PushMsgBuilder*) clearAppKey {
  resultPushMsg.hasAppKey = NO;
  resultPushMsg.appKey = @"";
  return self;
}
- (BOOL) hasDeviceId {
  return resultPushMsg.hasDeviceId;
}
- (NSString*) deviceId {
  return resultPushMsg.deviceId;
}
- (PushMsgBuilder*) setDeviceId:(NSString*) value {
  resultPushMsg.hasDeviceId = YES;
  resultPushMsg.deviceId = value;
  return self;
}
- (PushMsgBuilder*) clearDeviceId {
  resultPushMsg.hasDeviceId = NO;
  resultPushMsg.deviceId = @"";
  return self;
}
- (BOOL) hasContent {
  return resultPushMsg.hasContent;
}
- (NSString*) content {
  return resultPushMsg.content;
}
- (PushMsgBuilder*) setContent:(NSString*) value {
  resultPushMsg.hasContent = YES;
  resultPushMsg.content = value;
  return self;
}
- (PushMsgBuilder*) clearContent {
  resultPushMsg.hasContent = NO;
  resultPushMsg.content = @"";
  return self;
}
- (BOOL) hasUri {
  return resultPushMsg.hasUri;
}
- (NSString*) uri {
  return resultPushMsg.uri;
}
- (PushMsgBuilder*) setUri:(NSString*) value {
  resultPushMsg.hasUri = YES;
  resultPushMsg.uri = value;
  return self;
}
- (PushMsgBuilder*) clearUri {
  resultPushMsg.hasUri = NO;
  resultPushMsg.uri = @"";
  return self;
}
- (BOOL) hasJobId {
  return resultPushMsg.hasJobId;
}
- (NSString*) jobId {
  return resultPushMsg.jobId;
}
- (PushMsgBuilder*) setJobId:(NSString*) value {
  resultPushMsg.hasJobId = YES;
  resultPushMsg.jobId = value;
  return self;
}
- (PushMsgBuilder*) clearJobId {
  resultPushMsg.hasJobId = NO;
  resultPushMsg.jobId = @"";
  return self;
}
- (NSMutableArray *)item {
  return resultPushMsg.itemArray;
}
- (MapItem*)itemAtIndex:(NSUInteger)index {
  return [resultPushMsg itemAtIndex:index];
}
- (PushMsgBuilder *)addItem:(MapItem*)value {
  if (resultPushMsg.itemArray == nil) {
    resultPushMsg.itemArray = [[NSMutableArray alloc]init];
  }
  [resultPushMsg.itemArray addObject:value];
  return self;
}
- (PushMsgBuilder *)setItemArray:(NSArray *)array {
  resultPushMsg.itemArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PushMsgBuilder *)clearItem {
  resultPushMsg.itemArray = nil;
  return self;
}
@end

@interface ABTestMsg ()
@property (strong) NSString* eventName;
@property (strong) NSString* eventTime;
@property (strong) NSString* sessionId;
@property (strong) NSString* appKey;
@property (strong) NSString* deviceId;
@property (strong) NSString* content;
@property (strong) NSMutableArray * itemArray;
@end

@implementation ABTestMsg

- (BOOL) hasEventName {
  return !!hasEventName_;
}
- (void) setHasEventName:(BOOL) _value_ {
  hasEventName_ = !!_value_;
}
@synthesize eventName;
- (BOOL) hasEventTime {
  return !!hasEventTime_;
}
- (void) setHasEventTime:(BOOL) _value_ {
  hasEventTime_ = !!_value_;
}
@synthesize eventTime;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (BOOL) hasAppKey {
  return !!hasAppKey_;
}
- (void) setHasAppKey:(BOOL) _value_ {
  hasAppKey_ = !!_value_;
}
@synthesize appKey;
- (BOOL) hasDeviceId {
  return !!hasDeviceId_;
}
- (void) setHasDeviceId:(BOOL) _value_ {
  hasDeviceId_ = !!_value_;
}
@synthesize deviceId;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) _value_ {
  hasContent_ = !!_value_;
}
@synthesize content;
@synthesize itemArray;
@dynamic item;
- (instancetype) init {
  if ((self = [super init])) {
    self.eventName = @"";
    self.eventTime = @"";
    self.sessionId = @"";
    self.appKey = @"";
    self.deviceId = @"";
    self.content = @"";
  }
  return self;
}
static ABTestMsg* defaultABTestMsgInstance = nil;
+ (void) initialize {
  if (self == [ABTestMsg class]) {
    defaultABTestMsgInstance = [[ABTestMsg alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultABTestMsgInstance;
}
- (instancetype) defaultInstance {
  return defaultABTestMsgInstance;
}
- (NSArray *)item {
  return itemArray;
}
- (MapItem*)itemAtIndex:(NSUInteger)index {
  return [itemArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasEventName) {
    return NO;
  }
  if (!self.hasEventTime) {
    return NO;
  }
  if (!self.hasSessionId) {
    return NO;
  }
  if (!self.hasAppKey) {
    return NO;
  }
  if (!self.hasDeviceId) {
    return NO;
  }
  if (!self.hasContent) {
    return NO;
  }
  __block BOOL isInititem = YES;
   [self.item enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInititem = NO;
      *stop = YES;
    }
  }];
  if (!isInititem) return isInititem;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasEventName) {
    [output writeString:1 value:self.eventName];
  }
  if (self.hasEventTime) {
    [output writeString:2 value:self.eventTime];
  }
  if (self.hasSessionId) {
    [output writeString:3 value:self.sessionId];
  }
  if (self.hasAppKey) {
    [output writeString:4 value:self.appKey];
  }
  if (self.hasDeviceId) {
    [output writeString:5 value:self.deviceId];
  }
  if (self.hasContent) {
    [output writeString:6 value:self.content];
  }
  [self.itemArray enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:7 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasEventName) {
    size_ += computeStringSize(1, self.eventName);
  }
  if (self.hasEventTime) {
    size_ += computeStringSize(2, self.eventTime);
  }
  if (self.hasSessionId) {
    size_ += computeStringSize(3, self.sessionId);
  }
  if (self.hasAppKey) {
    size_ += computeStringSize(4, self.appKey);
  }
  if (self.hasDeviceId) {
    size_ += computeStringSize(5, self.deviceId);
  }
  if (self.hasContent) {
    size_ += computeStringSize(6, self.content);
  }
  [self.itemArray enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(7, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ABTestMsg*) parseFromData:(NSData*) data {
  return (ABTestMsg*)[[[ABTestMsg builder] mergeFromData:data] build];
}
+ (ABTestMsg*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ABTestMsg*)[[[ABTestMsg builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ABTestMsg*) parseFromInputStream:(NSInputStream*) input {
  return (ABTestMsg*)[[[ABTestMsg builder] mergeFromInputStream:input] build];
}
+ (ABTestMsg*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ABTestMsg*)[[[ABTestMsg builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ABTestMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ABTestMsg*)[[[ABTestMsg builder] mergeFromCodedInputStream:input] build];
}
+ (ABTestMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ABTestMsg*)[[[ABTestMsg builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ABTestMsgBuilder*) builder {
  return [[ABTestMsgBuilder alloc] init];
}
+ (ABTestMsgBuilder*) builderWithPrototype:(ABTestMsg*) prototype {
  return [[ABTestMsg builder] mergeFrom:prototype];
}
- (ABTestMsgBuilder*) builder {
  return [ABTestMsg builder];
}
- (ABTestMsgBuilder*) toBuilder {
  return [ABTestMsg builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasEventName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventName", self.eventName];
  }
  if (self.hasEventTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventTime", self.eventTime];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", self.sessionId];
  }
  if (self.hasAppKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appKey", self.appKey];
  }
  if (self.hasDeviceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceId", self.deviceId];
  }
  if (self.hasContent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"content", self.content];
  }
  [self.itemArray enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"item"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasEventName) {
    [dictionary setObject: self.eventName forKey: @"eventName"];
  }
  if (self.hasEventTime) {
    [dictionary setObject: self.eventTime forKey: @"eventTime"];
  }
  if (self.hasSessionId) {
    [dictionary setObject: self.sessionId forKey: @"sessionId"];
  }
  if (self.hasAppKey) {
    [dictionary setObject: self.appKey forKey: @"appKey"];
  }
  if (self.hasDeviceId) {
    [dictionary setObject: self.deviceId forKey: @"deviceId"];
  }
  if (self.hasContent) {
    [dictionary setObject: self.content forKey: @"content"];
  }
  for (MapItem* element in self.itemArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"item"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ABTestMsg class]]) {
    return NO;
  }
  ABTestMsg *otherMessage = other;
  return
      self.hasEventName == otherMessage.hasEventName &&
      (!self.hasEventName || [self.eventName isEqual:otherMessage.eventName]) &&
      self.hasEventTime == otherMessage.hasEventTime &&
      (!self.hasEventTime || [self.eventTime isEqual:otherMessage.eventTime]) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || [self.sessionId isEqual:otherMessage.sessionId]) &&
      self.hasAppKey == otherMessage.hasAppKey &&
      (!self.hasAppKey || [self.appKey isEqual:otherMessage.appKey]) &&
      self.hasDeviceId == otherMessage.hasDeviceId &&
      (!self.hasDeviceId || [self.deviceId isEqual:otherMessage.deviceId]) &&
      self.hasContent == otherMessage.hasContent &&
      (!self.hasContent || [self.content isEqual:otherMessage.content]) &&
      [self.itemArray isEqualToArray:otherMessage.itemArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasEventName) {
    hashCode = hashCode * 31 + [self.eventName hash];
  }
  if (self.hasEventTime) {
    hashCode = hashCode * 31 + [self.eventTime hash];
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [self.sessionId hash];
  }
  if (self.hasAppKey) {
    hashCode = hashCode * 31 + [self.appKey hash];
  }
  if (self.hasDeviceId) {
    hashCode = hashCode * 31 + [self.deviceId hash];
  }
  if (self.hasContent) {
    hashCode = hashCode * 31 + [self.content hash];
  }
  [self.itemArray enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ABTestMsgBuilder()
@property (strong) ABTestMsg* resultAbtestMsg;
@end

@implementation ABTestMsgBuilder
@synthesize resultAbtestMsg;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAbtestMsg = [[ABTestMsg alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAbtestMsg;
}
- (ABTestMsgBuilder*) clear {
  self.resultAbtestMsg = [[ABTestMsg alloc] init];
  return self;
}
- (ABTestMsgBuilder*) clone {
  return [ABTestMsg builderWithPrototype:resultAbtestMsg];
}
- (ABTestMsg*) defaultInstance {
  return [ABTestMsg defaultInstance];
}
- (ABTestMsg*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ABTestMsg*) buildPartial {
  ABTestMsg* returnMe = resultAbtestMsg;
  self.resultAbtestMsg = nil;
  return returnMe;
}
- (ABTestMsgBuilder*) mergeFrom:(ABTestMsg*) other {
  if (other == [ABTestMsg defaultInstance]) {
    return self;
  }
  if (other.hasEventName) {
    [self setEventName:other.eventName];
  }
  if (other.hasEventTime) {
    [self setEventTime:other.eventTime];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasAppKey) {
    [self setAppKey:other.appKey];
  }
  if (other.hasDeviceId) {
    [self setDeviceId:other.deviceId];
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  if (other.itemArray.count > 0) {
    if (resultAbtestMsg.itemArray == nil) {
      resultAbtestMsg.itemArray = [[NSMutableArray alloc] initWithArray:other.itemArray];
    } else {
      [resultAbtestMsg.itemArray addObjectsFromArray:other.itemArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ABTestMsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ABTestMsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setEventName:[input readString]];
        break;
      }
      case 18: {
        [self setEventTime:[input readString]];
        break;
      }
      case 26: {
        [self setSessionId:[input readString]];
        break;
      }
      case 34: {
        [self setAppKey:[input readString]];
        break;
      }
      case 42: {
        [self setDeviceId:[input readString]];
        break;
      }
      case 50: {
        [self setContent:[input readString]];
        break;
      }
      case 58: {
        MapItemBuilder* subBuilder = [MapItem builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addItem:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasEventName {
  return resultAbtestMsg.hasEventName;
}
- (NSString*) eventName {
  return resultAbtestMsg.eventName;
}
- (ABTestMsgBuilder*) setEventName:(NSString*) value {
  resultAbtestMsg.hasEventName = YES;
  resultAbtestMsg.eventName = value;
  return self;
}
- (ABTestMsgBuilder*) clearEventName {
  resultAbtestMsg.hasEventName = NO;
  resultAbtestMsg.eventName = @"";
  return self;
}
- (BOOL) hasEventTime {
  return resultAbtestMsg.hasEventTime;
}
- (NSString*) eventTime {
  return resultAbtestMsg.eventTime;
}
- (ABTestMsgBuilder*) setEventTime:(NSString*) value {
  resultAbtestMsg.hasEventTime = YES;
  resultAbtestMsg.eventTime = value;
  return self;
}
- (ABTestMsgBuilder*) clearEventTime {
  resultAbtestMsg.hasEventTime = NO;
  resultAbtestMsg.eventTime = @"";
  return self;
}
- (BOOL) hasSessionId {
  return resultAbtestMsg.hasSessionId;
}
- (NSString*) sessionId {
  return resultAbtestMsg.sessionId;
}
- (ABTestMsgBuilder*) setSessionId:(NSString*) value {
  resultAbtestMsg.hasSessionId = YES;
  resultAbtestMsg.sessionId = value;
  return self;
}
- (ABTestMsgBuilder*) clearSessionId {
  resultAbtestMsg.hasSessionId = NO;
  resultAbtestMsg.sessionId = @"";
  return self;
}
- (BOOL) hasAppKey {
  return resultAbtestMsg.hasAppKey;
}
- (NSString*) appKey {
  return resultAbtestMsg.appKey;
}
- (ABTestMsgBuilder*) setAppKey:(NSString*) value {
  resultAbtestMsg.hasAppKey = YES;
  resultAbtestMsg.appKey = value;
  return self;
}
- (ABTestMsgBuilder*) clearAppKey {
  resultAbtestMsg.hasAppKey = NO;
  resultAbtestMsg.appKey = @"";
  return self;
}
- (BOOL) hasDeviceId {
  return resultAbtestMsg.hasDeviceId;
}
- (NSString*) deviceId {
  return resultAbtestMsg.deviceId;
}
- (ABTestMsgBuilder*) setDeviceId:(NSString*) value {
  resultAbtestMsg.hasDeviceId = YES;
  resultAbtestMsg.deviceId = value;
  return self;
}
- (ABTestMsgBuilder*) clearDeviceId {
  resultAbtestMsg.hasDeviceId = NO;
  resultAbtestMsg.deviceId = @"";
  return self;
}
- (BOOL) hasContent {
  return resultAbtestMsg.hasContent;
}
- (NSString*) content {
  return resultAbtestMsg.content;
}
- (ABTestMsgBuilder*) setContent:(NSString*) value {
  resultAbtestMsg.hasContent = YES;
  resultAbtestMsg.content = value;
  return self;
}
- (ABTestMsgBuilder*) clearContent {
  resultAbtestMsg.hasContent = NO;
  resultAbtestMsg.content = @"";
  return self;
}
- (NSMutableArray *)item {
  return resultAbtestMsg.itemArray;
}
- (MapItem*)itemAtIndex:(NSUInteger)index {
  return [resultAbtestMsg itemAtIndex:index];
}
- (ABTestMsgBuilder *)addItem:(MapItem*)value {
  if (resultAbtestMsg.itemArray == nil) {
    resultAbtestMsg.itemArray = [[NSMutableArray alloc]init];
  }
  [resultAbtestMsg.itemArray addObject:value];
  return self;
}
- (ABTestMsgBuilder *)setItemArray:(NSArray *)array {
  resultAbtestMsg.itemArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ABTestMsgBuilder *)clearItem {
  resultAbtestMsg.itemArray = nil;
  return self;
}
@end

@interface LocationMsg ()
@property (strong) NSString* eventName;
@property (strong) NSString* eventTime;
@property (strong) NSString* sessionId;
@property (strong) NSString* appKey;
@property (strong) NSString* deviceId;
@property (strong) NSString* longitude;
@property (strong) NSString* latitude;
@property (strong) NSString* altitude;
@property (strong) NSString* accuracy;
@property (strong) NSString* provider;
@property (strong) NSMutableArray * itemArray;
@end

@implementation LocationMsg

- (BOOL) hasEventName {
  return !!hasEventName_;
}
- (void) setHasEventName:(BOOL) _value_ {
  hasEventName_ = !!_value_;
}
@synthesize eventName;
- (BOOL) hasEventTime {
  return !!hasEventTime_;
}
- (void) setHasEventTime:(BOOL) _value_ {
  hasEventTime_ = !!_value_;
}
@synthesize eventTime;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (BOOL) hasAppKey {
  return !!hasAppKey_;
}
- (void) setHasAppKey:(BOOL) _value_ {
  hasAppKey_ = !!_value_;
}
@synthesize appKey;
- (BOOL) hasDeviceId {
  return !!hasDeviceId_;
}
- (void) setHasDeviceId:(BOOL) _value_ {
  hasDeviceId_ = !!_value_;
}
@synthesize deviceId;
- (BOOL) hasLongitude {
  return !!hasLongitude_;
}
- (void) setHasLongitude:(BOOL) _value_ {
  hasLongitude_ = !!_value_;
}
@synthesize longitude;
- (BOOL) hasLatitude {
  return !!hasLatitude_;
}
- (void) setHasLatitude:(BOOL) _value_ {
  hasLatitude_ = !!_value_;
}
@synthesize latitude;
- (BOOL) hasAltitude {
  return !!hasAltitude_;
}
- (void) setHasAltitude:(BOOL) _value_ {
  hasAltitude_ = !!_value_;
}
@synthesize altitude;
- (BOOL) hasAccuracy {
  return !!hasAccuracy_;
}
- (void) setHasAccuracy:(BOOL) _value_ {
  hasAccuracy_ = !!_value_;
}
@synthesize accuracy;
- (BOOL) hasProvider {
  return !!hasProvider_;
}
- (void) setHasProvider:(BOOL) _value_ {
  hasProvider_ = !!_value_;
}
@synthesize provider;
@synthesize itemArray;
@dynamic item;
- (instancetype) init {
  if ((self = [super init])) {
    self.eventName = @"";
    self.eventTime = @"";
    self.sessionId = @"";
    self.appKey = @"";
    self.deviceId = @"";
    self.longitude = @"";
    self.latitude = @"";
    self.altitude = @"";
    self.accuracy = @"";
    self.provider = @"";
  }
  return self;
}
static LocationMsg* defaultLocationMsgInstance = nil;
+ (void) initialize {
  if (self == [LocationMsg class]) {
    defaultLocationMsgInstance = [[LocationMsg alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultLocationMsgInstance;
}
- (instancetype) defaultInstance {
  return defaultLocationMsgInstance;
}
- (NSArray *)item {
  return itemArray;
}
- (MapItem*)itemAtIndex:(NSUInteger)index {
  return [itemArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasEventName) {
    return NO;
  }
  if (!self.hasEventTime) {
    return NO;
  }
  if (!self.hasSessionId) {
    return NO;
  }
  if (!self.hasAppKey) {
    return NO;
  }
  if (!self.hasDeviceId) {
    return NO;
  }
  if (!self.hasLongitude) {
    return NO;
  }
  if (!self.hasLatitude) {
    return NO;
  }
  __block BOOL isInititem = YES;
   [self.item enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInititem = NO;
      *stop = YES;
    }
  }];
  if (!isInititem) return isInititem;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasEventName) {
    [output writeString:1 value:self.eventName];
  }
  if (self.hasEventTime) {
    [output writeString:2 value:self.eventTime];
  }
  if (self.hasSessionId) {
    [output writeString:3 value:self.sessionId];
  }
  if (self.hasAppKey) {
    [output writeString:4 value:self.appKey];
  }
  if (self.hasDeviceId) {
    [output writeString:5 value:self.deviceId];
  }
  if (self.hasLongitude) {
    [output writeString:6 value:self.longitude];
  }
  if (self.hasLatitude) {
    [output writeString:7 value:self.latitude];
  }
  if (self.hasAltitude) {
    [output writeString:8 value:self.altitude];
  }
  if (self.hasAccuracy) {
    [output writeString:9 value:self.accuracy];
  }
  if (self.hasProvider) {
    [output writeString:10 value:self.provider];
  }
  [self.itemArray enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:11 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasEventName) {
    size_ += computeStringSize(1, self.eventName);
  }
  if (self.hasEventTime) {
    size_ += computeStringSize(2, self.eventTime);
  }
  if (self.hasSessionId) {
    size_ += computeStringSize(3, self.sessionId);
  }
  if (self.hasAppKey) {
    size_ += computeStringSize(4, self.appKey);
  }
  if (self.hasDeviceId) {
    size_ += computeStringSize(5, self.deviceId);
  }
  if (self.hasLongitude) {
    size_ += computeStringSize(6, self.longitude);
  }
  if (self.hasLatitude) {
    size_ += computeStringSize(7, self.latitude);
  }
  if (self.hasAltitude) {
    size_ += computeStringSize(8, self.altitude);
  }
  if (self.hasAccuracy) {
    size_ += computeStringSize(9, self.accuracy);
  }
  if (self.hasProvider) {
    size_ += computeStringSize(10, self.provider);
  }
  [self.itemArray enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(11, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (LocationMsg*) parseFromData:(NSData*) data {
  return (LocationMsg*)[[[LocationMsg builder] mergeFromData:data] build];
}
+ (LocationMsg*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LocationMsg*)[[[LocationMsg builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (LocationMsg*) parseFromInputStream:(NSInputStream*) input {
  return (LocationMsg*)[[[LocationMsg builder] mergeFromInputStream:input] build];
}
+ (LocationMsg*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LocationMsg*)[[[LocationMsg builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LocationMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (LocationMsg*)[[[LocationMsg builder] mergeFromCodedInputStream:input] build];
}
+ (LocationMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LocationMsg*)[[[LocationMsg builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LocationMsgBuilder*) builder {
  return [[LocationMsgBuilder alloc] init];
}
+ (LocationMsgBuilder*) builderWithPrototype:(LocationMsg*) prototype {
  return [[LocationMsg builder] mergeFrom:prototype];
}
- (LocationMsgBuilder*) builder {
  return [LocationMsg builder];
}
- (LocationMsgBuilder*) toBuilder {
  return [LocationMsg builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasEventName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventName", self.eventName];
  }
  if (self.hasEventTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventTime", self.eventTime];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", self.sessionId];
  }
  if (self.hasAppKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appKey", self.appKey];
  }
  if (self.hasDeviceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceId", self.deviceId];
  }
  if (self.hasLongitude) {
    [output appendFormat:@"%@%@: %@\n", indent, @"longitude", self.longitude];
  }
  if (self.hasLatitude) {
    [output appendFormat:@"%@%@: %@\n", indent, @"latitude", self.latitude];
  }
  if (self.hasAltitude) {
    [output appendFormat:@"%@%@: %@\n", indent, @"altitude", self.altitude];
  }
  if (self.hasAccuracy) {
    [output appendFormat:@"%@%@: %@\n", indent, @"accuracy", self.accuracy];
  }
  if (self.hasProvider) {
    [output appendFormat:@"%@%@: %@\n", indent, @"provider", self.provider];
  }
  [self.itemArray enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"item"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasEventName) {
    [dictionary setObject: self.eventName forKey: @"eventName"];
  }
  if (self.hasEventTime) {
    [dictionary setObject: self.eventTime forKey: @"eventTime"];
  }
  if (self.hasSessionId) {
    [dictionary setObject: self.sessionId forKey: @"sessionId"];
  }
  if (self.hasAppKey) {
    [dictionary setObject: self.appKey forKey: @"appKey"];
  }
  if (self.hasDeviceId) {
    [dictionary setObject: self.deviceId forKey: @"deviceId"];
  }
  if (self.hasLongitude) {
    [dictionary setObject: self.longitude forKey: @"longitude"];
  }
  if (self.hasLatitude) {
    [dictionary setObject: self.latitude forKey: @"latitude"];
  }
  if (self.hasAltitude) {
    [dictionary setObject: self.altitude forKey: @"altitude"];
  }
  if (self.hasAccuracy) {
    [dictionary setObject: self.accuracy forKey: @"accuracy"];
  }
  if (self.hasProvider) {
    [dictionary setObject: self.provider forKey: @"provider"];
  }
  for (MapItem* element in self.itemArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"item"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[LocationMsg class]]) {
    return NO;
  }
  LocationMsg *otherMessage = other;
  return
      self.hasEventName == otherMessage.hasEventName &&
      (!self.hasEventName || [self.eventName isEqual:otherMessage.eventName]) &&
      self.hasEventTime == otherMessage.hasEventTime &&
      (!self.hasEventTime || [self.eventTime isEqual:otherMessage.eventTime]) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || [self.sessionId isEqual:otherMessage.sessionId]) &&
      self.hasAppKey == otherMessage.hasAppKey &&
      (!self.hasAppKey || [self.appKey isEqual:otherMessage.appKey]) &&
      self.hasDeviceId == otherMessage.hasDeviceId &&
      (!self.hasDeviceId || [self.deviceId isEqual:otherMessage.deviceId]) &&
      self.hasLongitude == otherMessage.hasLongitude &&
      (!self.hasLongitude || [self.longitude isEqual:otherMessage.longitude]) &&
      self.hasLatitude == otherMessage.hasLatitude &&
      (!self.hasLatitude || [self.latitude isEqual:otherMessage.latitude]) &&
      self.hasAltitude == otherMessage.hasAltitude &&
      (!self.hasAltitude || [self.altitude isEqual:otherMessage.altitude]) &&
      self.hasAccuracy == otherMessage.hasAccuracy &&
      (!self.hasAccuracy || [self.accuracy isEqual:otherMessage.accuracy]) &&
      self.hasProvider == otherMessage.hasProvider &&
      (!self.hasProvider || [self.provider isEqual:otherMessage.provider]) &&
      [self.itemArray isEqualToArray:otherMessage.itemArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasEventName) {
    hashCode = hashCode * 31 + [self.eventName hash];
  }
  if (self.hasEventTime) {
    hashCode = hashCode * 31 + [self.eventTime hash];
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [self.sessionId hash];
  }
  if (self.hasAppKey) {
    hashCode = hashCode * 31 + [self.appKey hash];
  }
  if (self.hasDeviceId) {
    hashCode = hashCode * 31 + [self.deviceId hash];
  }
  if (self.hasLongitude) {
    hashCode = hashCode * 31 + [self.longitude hash];
  }
  if (self.hasLatitude) {
    hashCode = hashCode * 31 + [self.latitude hash];
  }
  if (self.hasAltitude) {
    hashCode = hashCode * 31 + [self.altitude hash];
  }
  if (self.hasAccuracy) {
    hashCode = hashCode * 31 + [self.accuracy hash];
  }
  if (self.hasProvider) {
    hashCode = hashCode * 31 + [self.provider hash];
  }
  [self.itemArray enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface LocationMsgBuilder()
@property (strong) LocationMsg* resultLocationMsg;
@end

@implementation LocationMsgBuilder
@synthesize resultLocationMsg;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultLocationMsg = [[LocationMsg alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultLocationMsg;
}
- (LocationMsgBuilder*) clear {
  self.resultLocationMsg = [[LocationMsg alloc] init];
  return self;
}
- (LocationMsgBuilder*) clone {
  return [LocationMsg builderWithPrototype:resultLocationMsg];
}
- (LocationMsg*) defaultInstance {
  return [LocationMsg defaultInstance];
}
- (LocationMsg*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (LocationMsg*) buildPartial {
  LocationMsg* returnMe = resultLocationMsg;
  self.resultLocationMsg = nil;
  return returnMe;
}
- (LocationMsgBuilder*) mergeFrom:(LocationMsg*) other {
  if (other == [LocationMsg defaultInstance]) {
    return self;
  }
  if (other.hasEventName) {
    [self setEventName:other.eventName];
  }
  if (other.hasEventTime) {
    [self setEventTime:other.eventTime];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasAppKey) {
    [self setAppKey:other.appKey];
  }
  if (other.hasDeviceId) {
    [self setDeviceId:other.deviceId];
  }
  if (other.hasLongitude) {
    [self setLongitude:other.longitude];
  }
  if (other.hasLatitude) {
    [self setLatitude:other.latitude];
  }
  if (other.hasAltitude) {
    [self setAltitude:other.altitude];
  }
  if (other.hasAccuracy) {
    [self setAccuracy:other.accuracy];
  }
  if (other.hasProvider) {
    [self setProvider:other.provider];
  }
  if (other.itemArray.count > 0) {
    if (resultLocationMsg.itemArray == nil) {
      resultLocationMsg.itemArray = [[NSMutableArray alloc] initWithArray:other.itemArray];
    } else {
      [resultLocationMsg.itemArray addObjectsFromArray:other.itemArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LocationMsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LocationMsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setEventName:[input readString]];
        break;
      }
      case 18: {
        [self setEventTime:[input readString]];
        break;
      }
      case 26: {
        [self setSessionId:[input readString]];
        break;
      }
      case 34: {
        [self setAppKey:[input readString]];
        break;
      }
      case 42: {
        [self setDeviceId:[input readString]];
        break;
      }
      case 50: {
        [self setLongitude:[input readString]];
        break;
      }
      case 58: {
        [self setLatitude:[input readString]];
        break;
      }
      case 66: {
        [self setAltitude:[input readString]];
        break;
      }
      case 74: {
        [self setAccuracy:[input readString]];
        break;
      }
      case 82: {
        [self setProvider:[input readString]];
        break;
      }
      case 90: {
        MapItemBuilder* subBuilder = [MapItem builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addItem:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasEventName {
  return resultLocationMsg.hasEventName;
}
- (NSString*) eventName {
  return resultLocationMsg.eventName;
}
- (LocationMsgBuilder*) setEventName:(NSString*) value {
  resultLocationMsg.hasEventName = YES;
  resultLocationMsg.eventName = value;
  return self;
}
- (LocationMsgBuilder*) clearEventName {
  resultLocationMsg.hasEventName = NO;
  resultLocationMsg.eventName = @"";
  return self;
}
- (BOOL) hasEventTime {
  return resultLocationMsg.hasEventTime;
}
- (NSString*) eventTime {
  return resultLocationMsg.eventTime;
}
- (LocationMsgBuilder*) setEventTime:(NSString*) value {
  resultLocationMsg.hasEventTime = YES;
  resultLocationMsg.eventTime = value;
  return self;
}
- (LocationMsgBuilder*) clearEventTime {
  resultLocationMsg.hasEventTime = NO;
  resultLocationMsg.eventTime = @"";
  return self;
}
- (BOOL) hasSessionId {
  return resultLocationMsg.hasSessionId;
}
- (NSString*) sessionId {
  return resultLocationMsg.sessionId;
}
- (LocationMsgBuilder*) setSessionId:(NSString*) value {
  resultLocationMsg.hasSessionId = YES;
  resultLocationMsg.sessionId = value;
  return self;
}
- (LocationMsgBuilder*) clearSessionId {
  resultLocationMsg.hasSessionId = NO;
  resultLocationMsg.sessionId = @"";
  return self;
}
- (BOOL) hasAppKey {
  return resultLocationMsg.hasAppKey;
}
- (NSString*) appKey {
  return resultLocationMsg.appKey;
}
- (LocationMsgBuilder*) setAppKey:(NSString*) value {
  resultLocationMsg.hasAppKey = YES;
  resultLocationMsg.appKey = value;
  return self;
}
- (LocationMsgBuilder*) clearAppKey {
  resultLocationMsg.hasAppKey = NO;
  resultLocationMsg.appKey = @"";
  return self;
}
- (BOOL) hasDeviceId {
  return resultLocationMsg.hasDeviceId;
}
- (NSString*) deviceId {
  return resultLocationMsg.deviceId;
}
- (LocationMsgBuilder*) setDeviceId:(NSString*) value {
  resultLocationMsg.hasDeviceId = YES;
  resultLocationMsg.deviceId = value;
  return self;
}
- (LocationMsgBuilder*) clearDeviceId {
  resultLocationMsg.hasDeviceId = NO;
  resultLocationMsg.deviceId = @"";
  return self;
}
- (BOOL) hasLongitude {
  return resultLocationMsg.hasLongitude;
}
- (NSString*) longitude {
  return resultLocationMsg.longitude;
}
- (LocationMsgBuilder*) setLongitude:(NSString*) value {
  resultLocationMsg.hasLongitude = YES;
  resultLocationMsg.longitude = value;
  return self;
}
- (LocationMsgBuilder*) clearLongitude {
  resultLocationMsg.hasLongitude = NO;
  resultLocationMsg.longitude = @"";
  return self;
}
- (BOOL) hasLatitude {
  return resultLocationMsg.hasLatitude;
}
- (NSString*) latitude {
  return resultLocationMsg.latitude;
}
- (LocationMsgBuilder*) setLatitude:(NSString*) value {
  resultLocationMsg.hasLatitude = YES;
  resultLocationMsg.latitude = value;
  return self;
}
- (LocationMsgBuilder*) clearLatitude {
  resultLocationMsg.hasLatitude = NO;
  resultLocationMsg.latitude = @"";
  return self;
}
- (BOOL) hasAltitude {
  return resultLocationMsg.hasAltitude;
}
- (NSString*) altitude {
  return resultLocationMsg.altitude;
}
- (LocationMsgBuilder*) setAltitude:(NSString*) value {
  resultLocationMsg.hasAltitude = YES;
  resultLocationMsg.altitude = value;
  return self;
}
- (LocationMsgBuilder*) clearAltitude {
  resultLocationMsg.hasAltitude = NO;
  resultLocationMsg.altitude = @"";
  return self;
}
- (BOOL) hasAccuracy {
  return resultLocationMsg.hasAccuracy;
}
- (NSString*) accuracy {
  return resultLocationMsg.accuracy;
}
- (LocationMsgBuilder*) setAccuracy:(NSString*) value {
  resultLocationMsg.hasAccuracy = YES;
  resultLocationMsg.accuracy = value;
  return self;
}
- (LocationMsgBuilder*) clearAccuracy {
  resultLocationMsg.hasAccuracy = NO;
  resultLocationMsg.accuracy = @"";
  return self;
}
- (BOOL) hasProvider {
  return resultLocationMsg.hasProvider;
}
- (NSString*) provider {
  return resultLocationMsg.provider;
}
- (LocationMsgBuilder*) setProvider:(NSString*) value {
  resultLocationMsg.hasProvider = YES;
  resultLocationMsg.provider = value;
  return self;
}
- (LocationMsgBuilder*) clearProvider {
  resultLocationMsg.hasProvider = NO;
  resultLocationMsg.provider = @"";
  return self;
}
- (NSMutableArray *)item {
  return resultLocationMsg.itemArray;
}
- (MapItem*)itemAtIndex:(NSUInteger)index {
  return [resultLocationMsg itemAtIndex:index];
}
- (LocationMsgBuilder *)addItem:(MapItem*)value {
  if (resultLocationMsg.itemArray == nil) {
    resultLocationMsg.itemArray = [[NSMutableArray alloc]init];
  }
  [resultLocationMsg.itemArray addObject:value];
  return self;
}
- (LocationMsgBuilder *)setItemArray:(NSArray *)array {
  resultLocationMsg.itemArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (LocationMsgBuilder *)clearItem {
  resultLocationMsg.itemArray = nil;
  return self;
}
@end

@interface ListScanningMsg ()
@property (strong) NSString* eventName;
@property (strong) NSString* eventTime;
@property (strong) NSString* sessionId;
@property (strong) NSString* appKey;
@property (strong) NSString* deviceId;
@property (strong) NSString* page;
@property (strong) ViewItem* view;
@property (strong) NSMutableArray * showArray;
@property (strong) NSMutableArray * hideArray;
@property (strong) NSMutableArray * itemArray;
@end

@implementation ListScanningMsg

- (BOOL) hasEventName {
  return !!hasEventName_;
}
- (void) setHasEventName:(BOOL) _value_ {
  hasEventName_ = !!_value_;
}
@synthesize eventName;
- (BOOL) hasEventTime {
  return !!hasEventTime_;
}
- (void) setHasEventTime:(BOOL) _value_ {
  hasEventTime_ = !!_value_;
}
@synthesize eventTime;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (BOOL) hasAppKey {
  return !!hasAppKey_;
}
- (void) setHasAppKey:(BOOL) _value_ {
  hasAppKey_ = !!_value_;
}
@synthesize appKey;
- (BOOL) hasDeviceId {
  return !!hasDeviceId_;
}
- (void) setHasDeviceId:(BOOL) _value_ {
  hasDeviceId_ = !!_value_;
}
@synthesize deviceId;
- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) _value_ {
  hasPage_ = !!_value_;
}
@synthesize page;
- (BOOL) hasView {
  return !!hasView_;
}
- (void) setHasView:(BOOL) _value_ {
  hasView_ = !!_value_;
}
@synthesize view;
@synthesize showArray;
@dynamic show;
@synthesize hideArray;
@dynamic hide;
@synthesize itemArray;
@dynamic item;
- (instancetype) init {
  if ((self = [super init])) {
    self.eventName = @"";
    self.eventTime = @"";
    self.sessionId = @"";
    self.appKey = @"";
    self.deviceId = @"";
    self.page = @"";
    self.view = [ViewItem defaultInstance];
  }
  return self;
}
static ListScanningMsg* defaultListScanningMsgInstance = nil;
+ (void) initialize {
  if (self == [ListScanningMsg class]) {
    defaultListScanningMsgInstance = [[ListScanningMsg alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultListScanningMsgInstance;
}
- (instancetype) defaultInstance {
  return defaultListScanningMsgInstance;
}
- (NSArray *)show {
  return showArray;
}
- (MapItem*)showAtIndex:(NSUInteger)index {
  return [showArray objectAtIndex:index];
}
- (NSArray *)hide {
  return hideArray;
}
- (MapItem*)hideAtIndex:(NSUInteger)index {
  return [hideArray objectAtIndex:index];
}
- (NSArray *)item {
  return itemArray;
}
- (MapItem*)itemAtIndex:(NSUInteger)index {
  return [itemArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasEventName) {
    return NO;
  }
  if (!self.hasEventTime) {
    return NO;
  }
  if (!self.hasSessionId) {
    return NO;
  }
  if (!self.hasAppKey) {
    return NO;
  }
  if (!self.hasDeviceId) {
    return NO;
  }
  if (!self.hasPage) {
    return NO;
  }
  if (!self.hasView) {
    return NO;
  }
  __block BOOL isInitshow = YES;
   [self.show enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitshow = NO;
      *stop = YES;
    }
  }];
  if (!isInitshow) return isInitshow;
  __block BOOL isInithide = YES;
   [self.hide enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInithide = NO;
      *stop = YES;
    }
  }];
  if (!isInithide) return isInithide;
  __block BOOL isInititem = YES;
   [self.item enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInititem = NO;
      *stop = YES;
    }
  }];
  if (!isInititem) return isInititem;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasEventName) {
    [output writeString:1 value:self.eventName];
  }
  if (self.hasEventTime) {
    [output writeString:2 value:self.eventTime];
  }
  if (self.hasSessionId) {
    [output writeString:3 value:self.sessionId];
  }
  if (self.hasAppKey) {
    [output writeString:4 value:self.appKey];
  }
  if (self.hasDeviceId) {
    [output writeString:5 value:self.deviceId];
  }
  if (self.hasPage) {
    [output writeString:6 value:self.page];
  }
  if (self.hasView) {
    [output writeMessage:7 value:self.view];
  }
  [self.showArray enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:8 value:element];
  }];
  [self.hideArray enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:9 value:element];
  }];
  [self.itemArray enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:10 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasEventName) {
    size_ += computeStringSize(1, self.eventName);
  }
  if (self.hasEventTime) {
    size_ += computeStringSize(2, self.eventTime);
  }
  if (self.hasSessionId) {
    size_ += computeStringSize(3, self.sessionId);
  }
  if (self.hasAppKey) {
    size_ += computeStringSize(4, self.appKey);
  }
  if (self.hasDeviceId) {
    size_ += computeStringSize(5, self.deviceId);
  }
  if (self.hasPage) {
    size_ += computeStringSize(6, self.page);
  }
  if (self.hasView) {
    size_ += computeMessageSize(7, self.view);
  }
  [self.showArray enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(8, element);
  }];
  [self.hideArray enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(9, element);
  }];
  [self.itemArray enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(10, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ListScanningMsg*) parseFromData:(NSData*) data {
  return (ListScanningMsg*)[[[ListScanningMsg builder] mergeFromData:data] build];
}
+ (ListScanningMsg*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ListScanningMsg*)[[[ListScanningMsg builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ListScanningMsg*) parseFromInputStream:(NSInputStream*) input {
  return (ListScanningMsg*)[[[ListScanningMsg builder] mergeFromInputStream:input] build];
}
+ (ListScanningMsg*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ListScanningMsg*)[[[ListScanningMsg builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ListScanningMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ListScanningMsg*)[[[ListScanningMsg builder] mergeFromCodedInputStream:input] build];
}
+ (ListScanningMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ListScanningMsg*)[[[ListScanningMsg builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ListScanningMsgBuilder*) builder {
  return [[ListScanningMsgBuilder alloc] init];
}
+ (ListScanningMsgBuilder*) builderWithPrototype:(ListScanningMsg*) prototype {
  return [[ListScanningMsg builder] mergeFrom:prototype];
}
- (ListScanningMsgBuilder*) builder {
  return [ListScanningMsg builder];
}
- (ListScanningMsgBuilder*) toBuilder {
  return [ListScanningMsg builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasEventName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventName", self.eventName];
  }
  if (self.hasEventTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventTime", self.eventTime];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", self.sessionId];
  }
  if (self.hasAppKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appKey", self.appKey];
  }
  if (self.hasDeviceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceId", self.deviceId];
  }
  if (self.hasPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"page", self.page];
  }
  if (self.hasView) {
    [output appendFormat:@"%@%@ {\n", indent, @"view"];
    [self.view writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.showArray enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"show"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.hideArray enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"hide"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.itemArray enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"item"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasEventName) {
    [dictionary setObject: self.eventName forKey: @"eventName"];
  }
  if (self.hasEventTime) {
    [dictionary setObject: self.eventTime forKey: @"eventTime"];
  }
  if (self.hasSessionId) {
    [dictionary setObject: self.sessionId forKey: @"sessionId"];
  }
  if (self.hasAppKey) {
    [dictionary setObject: self.appKey forKey: @"appKey"];
  }
  if (self.hasDeviceId) {
    [dictionary setObject: self.deviceId forKey: @"deviceId"];
  }
  if (self.hasPage) {
    [dictionary setObject: self.page forKey: @"page"];
  }
  if (self.hasView) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.view storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"view"];
  }
  for (MapItem* element in self.showArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"show"];
  }
  for (MapItem* element in self.hideArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"hide"];
  }
  for (MapItem* element in self.itemArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"item"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ListScanningMsg class]]) {
    return NO;
  }
  ListScanningMsg *otherMessage = other;
  return
      self.hasEventName == otherMessage.hasEventName &&
      (!self.hasEventName || [self.eventName isEqual:otherMessage.eventName]) &&
      self.hasEventTime == otherMessage.hasEventTime &&
      (!self.hasEventTime || [self.eventTime isEqual:otherMessage.eventTime]) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || [self.sessionId isEqual:otherMessage.sessionId]) &&
      self.hasAppKey == otherMessage.hasAppKey &&
      (!self.hasAppKey || [self.appKey isEqual:otherMessage.appKey]) &&
      self.hasDeviceId == otherMessage.hasDeviceId &&
      (!self.hasDeviceId || [self.deviceId isEqual:otherMessage.deviceId]) &&
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || [self.page isEqual:otherMessage.page]) &&
      self.hasView == otherMessage.hasView &&
      (!self.hasView || [self.view isEqual:otherMessage.view]) &&
      [self.showArray isEqualToArray:otherMessage.showArray] &&
      [self.hideArray isEqualToArray:otherMessage.hideArray] &&
      [self.itemArray isEqualToArray:otherMessage.itemArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasEventName) {
    hashCode = hashCode * 31 + [self.eventName hash];
  }
  if (self.hasEventTime) {
    hashCode = hashCode * 31 + [self.eventTime hash];
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [self.sessionId hash];
  }
  if (self.hasAppKey) {
    hashCode = hashCode * 31 + [self.appKey hash];
  }
  if (self.hasDeviceId) {
    hashCode = hashCode * 31 + [self.deviceId hash];
  }
  if (self.hasPage) {
    hashCode = hashCode * 31 + [self.page hash];
  }
  if (self.hasView) {
    hashCode = hashCode * 31 + [self.view hash];
  }
  [self.showArray enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.hideArray enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.itemArray enumerateObjectsUsingBlock:^(MapItem *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ListScanningMsgBuilder()
@property (strong) ListScanningMsg* resultListScanningMsg;
@end

@implementation ListScanningMsgBuilder
@synthesize resultListScanningMsg;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultListScanningMsg = [[ListScanningMsg alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultListScanningMsg;
}
- (ListScanningMsgBuilder*) clear {
  self.resultListScanningMsg = [[ListScanningMsg alloc] init];
  return self;
}
- (ListScanningMsgBuilder*) clone {
  return [ListScanningMsg builderWithPrototype:resultListScanningMsg];
}
- (ListScanningMsg*) defaultInstance {
  return [ListScanningMsg defaultInstance];
}
- (ListScanningMsg*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ListScanningMsg*) buildPartial {
  ListScanningMsg* returnMe = resultListScanningMsg;
  self.resultListScanningMsg = nil;
  return returnMe;
}
- (ListScanningMsgBuilder*) mergeFrom:(ListScanningMsg*) other {
  if (other == [ListScanningMsg defaultInstance]) {
    return self;
  }
  if (other.hasEventName) {
    [self setEventName:other.eventName];
  }
  if (other.hasEventTime) {
    [self setEventTime:other.eventTime];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasAppKey) {
    [self setAppKey:other.appKey];
  }
  if (other.hasDeviceId) {
    [self setDeviceId:other.deviceId];
  }
  if (other.hasPage) {
    [self setPage:other.page];
  }
  if (other.hasView) {
    [self mergeView:other.view];
  }
  if (other.showArray.count > 0) {
    if (resultListScanningMsg.showArray == nil) {
      resultListScanningMsg.showArray = [[NSMutableArray alloc] initWithArray:other.showArray];
    } else {
      [resultListScanningMsg.showArray addObjectsFromArray:other.showArray];
    }
  }
  if (other.hideArray.count > 0) {
    if (resultListScanningMsg.hideArray == nil) {
      resultListScanningMsg.hideArray = [[NSMutableArray alloc] initWithArray:other.hideArray];
    } else {
      [resultListScanningMsg.hideArray addObjectsFromArray:other.hideArray];
    }
  }
  if (other.itemArray.count > 0) {
    if (resultListScanningMsg.itemArray == nil) {
      resultListScanningMsg.itemArray = [[NSMutableArray alloc] initWithArray:other.itemArray];
    } else {
      [resultListScanningMsg.itemArray addObjectsFromArray:other.itemArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ListScanningMsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ListScanningMsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setEventName:[input readString]];
        break;
      }
      case 18: {
        [self setEventTime:[input readString]];
        break;
      }
      case 26: {
        [self setSessionId:[input readString]];
        break;
      }
      case 34: {
        [self setAppKey:[input readString]];
        break;
      }
      case 42: {
        [self setDeviceId:[input readString]];
        break;
      }
      case 50: {
        [self setPage:[input readString]];
        break;
      }
      case 58: {
        ViewItemBuilder* subBuilder = [ViewItem builder];
        if (self.hasView) {
          [subBuilder mergeFrom:self.view];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setView:[subBuilder buildPartial]];
        break;
      }
      case 66: {
        MapItemBuilder* subBuilder = [MapItem builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addShow:[subBuilder buildPartial]];
        break;
      }
      case 74: {
        MapItemBuilder* subBuilder = [MapItem builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addHide:[subBuilder buildPartial]];
        break;
      }
      case 82: {
        MapItemBuilder* subBuilder = [MapItem builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addItem:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasEventName {
  return resultListScanningMsg.hasEventName;
}
- (NSString*) eventName {
  return resultListScanningMsg.eventName;
}
- (ListScanningMsgBuilder*) setEventName:(NSString*) value {
  resultListScanningMsg.hasEventName = YES;
  resultListScanningMsg.eventName = value;
  return self;
}
- (ListScanningMsgBuilder*) clearEventName {
  resultListScanningMsg.hasEventName = NO;
  resultListScanningMsg.eventName = @"";
  return self;
}
- (BOOL) hasEventTime {
  return resultListScanningMsg.hasEventTime;
}
- (NSString*) eventTime {
  return resultListScanningMsg.eventTime;
}
- (ListScanningMsgBuilder*) setEventTime:(NSString*) value {
  resultListScanningMsg.hasEventTime = YES;
  resultListScanningMsg.eventTime = value;
  return self;
}
- (ListScanningMsgBuilder*) clearEventTime {
  resultListScanningMsg.hasEventTime = NO;
  resultListScanningMsg.eventTime = @"";
  return self;
}
- (BOOL) hasSessionId {
  return resultListScanningMsg.hasSessionId;
}
- (NSString*) sessionId {
  return resultListScanningMsg.sessionId;
}
- (ListScanningMsgBuilder*) setSessionId:(NSString*) value {
  resultListScanningMsg.hasSessionId = YES;
  resultListScanningMsg.sessionId = value;
  return self;
}
- (ListScanningMsgBuilder*) clearSessionId {
  resultListScanningMsg.hasSessionId = NO;
  resultListScanningMsg.sessionId = @"";
  return self;
}
- (BOOL) hasAppKey {
  return resultListScanningMsg.hasAppKey;
}
- (NSString*) appKey {
  return resultListScanningMsg.appKey;
}
- (ListScanningMsgBuilder*) setAppKey:(NSString*) value {
  resultListScanningMsg.hasAppKey = YES;
  resultListScanningMsg.appKey = value;
  return self;
}
- (ListScanningMsgBuilder*) clearAppKey {
  resultListScanningMsg.hasAppKey = NO;
  resultListScanningMsg.appKey = @"";
  return self;
}
- (BOOL) hasDeviceId {
  return resultListScanningMsg.hasDeviceId;
}
- (NSString*) deviceId {
  return resultListScanningMsg.deviceId;
}
- (ListScanningMsgBuilder*) setDeviceId:(NSString*) value {
  resultListScanningMsg.hasDeviceId = YES;
  resultListScanningMsg.deviceId = value;
  return self;
}
- (ListScanningMsgBuilder*) clearDeviceId {
  resultListScanningMsg.hasDeviceId = NO;
  resultListScanningMsg.deviceId = @"";
  return self;
}
- (BOOL) hasPage {
  return resultListScanningMsg.hasPage;
}
- (NSString*) page {
  return resultListScanningMsg.page;
}
- (ListScanningMsgBuilder*) setPage:(NSString*) value {
  resultListScanningMsg.hasPage = YES;
  resultListScanningMsg.page = value;
  return self;
}
- (ListScanningMsgBuilder*) clearPage {
  resultListScanningMsg.hasPage = NO;
  resultListScanningMsg.page = @"";
  return self;
}
- (BOOL) hasView {
  return resultListScanningMsg.hasView;
}
- (ViewItem*) view {
  return resultListScanningMsg.view;
}
- (ListScanningMsgBuilder*) setView:(ViewItem*) value {
  resultListScanningMsg.hasView = YES;
  resultListScanningMsg.view = value;
  return self;
}
- (ListScanningMsgBuilder*) setViewBuilder:(ViewItemBuilder*) builderForValue {
  return [self setView:[builderForValue build]];
}
- (ListScanningMsgBuilder*) mergeView:(ViewItem*) value {
  if (resultListScanningMsg.hasView &&
      resultListScanningMsg.view != [ViewItem defaultInstance]) {
    resultListScanningMsg.view =
      [[[ViewItem builderWithPrototype:resultListScanningMsg.view] mergeFrom:value] buildPartial];
  } else {
    resultListScanningMsg.view = value;
  }
  resultListScanningMsg.hasView = YES;
  return self;
}
- (ListScanningMsgBuilder*) clearView {
  resultListScanningMsg.hasView = NO;
  resultListScanningMsg.view = [ViewItem defaultInstance];
  return self;
}
- (NSMutableArray *)show {
  return resultListScanningMsg.showArray;
}
- (MapItem*)showAtIndex:(NSUInteger)index {
  return [resultListScanningMsg showAtIndex:index];
}
- (ListScanningMsgBuilder *)addShow:(MapItem*)value {
  if (resultListScanningMsg.showArray == nil) {
    resultListScanningMsg.showArray = [[NSMutableArray alloc]init];
  }
  [resultListScanningMsg.showArray addObject:value];
  return self;
}
- (ListScanningMsgBuilder *)setShowArray:(NSArray *)array {
  resultListScanningMsg.showArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ListScanningMsgBuilder *)clearShow {
  resultListScanningMsg.showArray = nil;
  return self;
}
- (NSMutableArray *)hide {
  return resultListScanningMsg.hideArray;
}
- (MapItem*)hideAtIndex:(NSUInteger)index {
  return [resultListScanningMsg hideAtIndex:index];
}
- (ListScanningMsgBuilder *)addHide:(MapItem*)value {
  if (resultListScanningMsg.hideArray == nil) {
    resultListScanningMsg.hideArray = [[NSMutableArray alloc]init];
  }
  [resultListScanningMsg.hideArray addObject:value];
  return self;
}
- (ListScanningMsgBuilder *)setHideArray:(NSArray *)array {
  resultListScanningMsg.hideArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ListScanningMsgBuilder *)clearHide {
  resultListScanningMsg.hideArray = nil;
  return self;
}
- (NSMutableArray *)item {
  return resultListScanningMsg.itemArray;
}
- (MapItem*)itemAtIndex:(NSUInteger)index {
  return [resultListScanningMsg itemAtIndex:index];
}
- (ListScanningMsgBuilder *)addItem:(MapItem*)value {
  if (resultListScanningMsg.itemArray == nil) {
    resultListScanningMsg.itemArray = [[NSMutableArray alloc]init];
  }
  [resultListScanningMsg.itemArray addObject:value];
  return self;
}
- (ListScanningMsgBuilder *)setItemArray:(NSArray *)array {
  resultListScanningMsg.itemArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ListScanningMsgBuilder *)clearItem {
  resultListScanningMsg.itemArray = nil;
  return self;
}
@end

@interface ViewItem ()
@property (strong) NSString* viewClass;
@property (strong) NSString* path;
@property (strong) NSString* frame;
@property (strong) NSString* title;
@property (strong) NSString* depthPath;
@property (strong) NSString* viewId;
@end

@implementation ViewItem

- (BOOL) hasViewClass {
  return !!hasViewClass_;
}
- (void) setHasViewClass:(BOOL) _value_ {
  hasViewClass_ = !!_value_;
}
@synthesize viewClass;
- (BOOL) hasPath {
  return !!hasPath_;
}
- (void) setHasPath:(BOOL) _value_ {
  hasPath_ = !!_value_;
}
@synthesize path;
- (BOOL) hasFrame {
  return !!hasFrame_;
}
- (void) setHasFrame:(BOOL) _value_ {
  hasFrame_ = !!_value_;
}
@synthesize frame;
- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) _value_ {
  hasTitle_ = !!_value_;
}
@synthesize title;
- (BOOL) hasDepthPath {
  return !!hasDepthPath_;
}
- (void) setHasDepthPath:(BOOL) _value_ {
  hasDepthPath_ = !!_value_;
}
@synthesize depthPath;
- (BOOL) hasViewId {
  return !!hasViewId_;
}
- (void) setHasViewId:(BOOL) _value_ {
  hasViewId_ = !!_value_;
}
@synthesize viewId;
- (instancetype) init {
  if ((self = [super init])) {
    self.viewClass = @"";
    self.path = @"";
    self.frame = @"";
    self.title = @"";
    self.depthPath = @"";
    self.viewId = @"";
  }
  return self;
}
static ViewItem* defaultViewItemInstance = nil;
+ (void) initialize {
  if (self == [ViewItem class]) {
    defaultViewItemInstance = [[ViewItem alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultViewItemInstance;
}
- (instancetype) defaultInstance {
  return defaultViewItemInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasViewClass) {
    [output writeString:1 value:self.viewClass];
  }
  if (self.hasPath) {
    [output writeString:2 value:self.path];
  }
  if (self.hasFrame) {
    [output writeString:3 value:self.frame];
  }
  if (self.hasTitle) {
    [output writeString:4 value:self.title];
  }
  if (self.hasDepthPath) {
    [output writeString:5 value:self.depthPath];
  }
  if (self.hasViewId) {
    [output writeString:6 value:self.viewId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasViewClass) {
    size_ += computeStringSize(1, self.viewClass);
  }
  if (self.hasPath) {
    size_ += computeStringSize(2, self.path);
  }
  if (self.hasFrame) {
    size_ += computeStringSize(3, self.frame);
  }
  if (self.hasTitle) {
    size_ += computeStringSize(4, self.title);
  }
  if (self.hasDepthPath) {
    size_ += computeStringSize(5, self.depthPath);
  }
  if (self.hasViewId) {
    size_ += computeStringSize(6, self.viewId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ViewItem*) parseFromData:(NSData*) data {
  return (ViewItem*)[[[ViewItem builder] mergeFromData:data] build];
}
+ (ViewItem*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ViewItem*)[[[ViewItem builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ViewItem*) parseFromInputStream:(NSInputStream*) input {
  return (ViewItem*)[[[ViewItem builder] mergeFromInputStream:input] build];
}
+ (ViewItem*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ViewItem*)[[[ViewItem builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ViewItem*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ViewItem*)[[[ViewItem builder] mergeFromCodedInputStream:input] build];
}
+ (ViewItem*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ViewItem*)[[[ViewItem builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ViewItemBuilder*) builder {
  return [[ViewItemBuilder alloc] init];
}
+ (ViewItemBuilder*) builderWithPrototype:(ViewItem*) prototype {
  return [[ViewItem builder] mergeFrom:prototype];
}
- (ViewItemBuilder*) builder {
  return [ViewItem builder];
}
- (ViewItemBuilder*) toBuilder {
  return [ViewItem builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasViewClass) {
    [output appendFormat:@"%@%@: %@\n", indent, @"viewClass", self.viewClass];
  }
  if (self.hasPath) {
    [output appendFormat:@"%@%@: %@\n", indent, @"path", self.path];
  }
  if (self.hasFrame) {
    [output appendFormat:@"%@%@: %@\n", indent, @"frame", self.frame];
  }
  if (self.hasTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"title", self.title];
  }
  if (self.hasDepthPath) {
    [output appendFormat:@"%@%@: %@\n", indent, @"depthPath", self.depthPath];
  }
  if (self.hasViewId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"viewId", self.viewId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasViewClass) {
    [dictionary setObject: self.viewClass forKey: @"viewClass"];
  }
  if (self.hasPath) {
    [dictionary setObject: self.path forKey: @"path"];
  }
  if (self.hasFrame) {
    [dictionary setObject: self.frame forKey: @"frame"];
  }
  if (self.hasTitle) {
    [dictionary setObject: self.title forKey: @"title"];
  }
  if (self.hasDepthPath) {
    [dictionary setObject: self.depthPath forKey: @"depthPath"];
  }
  if (self.hasViewId) {
    [dictionary setObject: self.viewId forKey: @"viewId"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ViewItem class]]) {
    return NO;
  }
  ViewItem *otherMessage = other;
  return
      self.hasViewClass == otherMessage.hasViewClass &&
      (!self.hasViewClass || [self.viewClass isEqual:otherMessage.viewClass]) &&
      self.hasPath == otherMessage.hasPath &&
      (!self.hasPath || [self.path isEqual:otherMessage.path]) &&
      self.hasFrame == otherMessage.hasFrame &&
      (!self.hasFrame || [self.frame isEqual:otherMessage.frame]) &&
      self.hasTitle == otherMessage.hasTitle &&
      (!self.hasTitle || [self.title isEqual:otherMessage.title]) &&
      self.hasDepthPath == otherMessage.hasDepthPath &&
      (!self.hasDepthPath || [self.depthPath isEqual:otherMessage.depthPath]) &&
      self.hasViewId == otherMessage.hasViewId &&
      (!self.hasViewId || [self.viewId isEqual:otherMessage.viewId]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasViewClass) {
    hashCode = hashCode * 31 + [self.viewClass hash];
  }
  if (self.hasPath) {
    hashCode = hashCode * 31 + [self.path hash];
  }
  if (self.hasFrame) {
    hashCode = hashCode * 31 + [self.frame hash];
  }
  if (self.hasTitle) {
    hashCode = hashCode * 31 + [self.title hash];
  }
  if (self.hasDepthPath) {
    hashCode = hashCode * 31 + [self.depthPath hash];
  }
  if (self.hasViewId) {
    hashCode = hashCode * 31 + [self.viewId hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ViewItemBuilder()
@property (strong) ViewItem* resultViewItem;
@end

@implementation ViewItemBuilder
@synthesize resultViewItem;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultViewItem = [[ViewItem alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultViewItem;
}
- (ViewItemBuilder*) clear {
  self.resultViewItem = [[ViewItem alloc] init];
  return self;
}
- (ViewItemBuilder*) clone {
  return [ViewItem builderWithPrototype:resultViewItem];
}
- (ViewItem*) defaultInstance {
  return [ViewItem defaultInstance];
}
- (ViewItem*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ViewItem*) buildPartial {
  ViewItem* returnMe = resultViewItem;
  self.resultViewItem = nil;
  return returnMe;
}
- (ViewItemBuilder*) mergeFrom:(ViewItem*) other {
  if (other == [ViewItem defaultInstance]) {
    return self;
  }
  if (other.hasViewClass) {
    [self setViewClass:other.viewClass];
  }
  if (other.hasPath) {
    [self setPath:other.path];
  }
  if (other.hasFrame) {
    [self setFrame:other.frame];
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  if (other.hasDepthPath) {
    [self setDepthPath:other.depthPath];
  }
  if (other.hasViewId) {
    [self setViewId:other.viewId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ViewItemBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ViewItemBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setViewClass:[input readString]];
        break;
      }
      case 18: {
        [self setPath:[input readString]];
        break;
      }
      case 26: {
        [self setFrame:[input readString]];
        break;
      }
      case 34: {
        [self setTitle:[input readString]];
        break;
      }
      case 42: {
        [self setDepthPath:[input readString]];
        break;
      }
      case 50: {
        [self setViewId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasViewClass {
  return resultViewItem.hasViewClass;
}
- (NSString*) viewClass {
  return resultViewItem.viewClass;
}
- (ViewItemBuilder*) setViewClass:(NSString*) value {
  resultViewItem.hasViewClass = YES;
  resultViewItem.viewClass = value;
  return self;
}
- (ViewItemBuilder*) clearViewClass {
  resultViewItem.hasViewClass = NO;
  resultViewItem.viewClass = @"";
  return self;
}
- (BOOL) hasPath {
  return resultViewItem.hasPath;
}
- (NSString*) path {
  return resultViewItem.path;
}
- (ViewItemBuilder*) setPath:(NSString*) value {
  resultViewItem.hasPath = YES;
  resultViewItem.path = value;
  return self;
}
- (ViewItemBuilder*) clearPath {
  resultViewItem.hasPath = NO;
  resultViewItem.path = @"";
  return self;
}
- (BOOL) hasFrame {
  return resultViewItem.hasFrame;
}
- (NSString*) frame {
  return resultViewItem.frame;
}
- (ViewItemBuilder*) setFrame:(NSString*) value {
  resultViewItem.hasFrame = YES;
  resultViewItem.frame = value;
  return self;
}
- (ViewItemBuilder*) clearFrame {
  resultViewItem.hasFrame = NO;
  resultViewItem.frame = @"";
  return self;
}
- (BOOL) hasTitle {
  return resultViewItem.hasTitle;
}
- (NSString*) title {
  return resultViewItem.title;
}
- (ViewItemBuilder*) setTitle:(NSString*) value {
  resultViewItem.hasTitle = YES;
  resultViewItem.title = value;
  return self;
}
- (ViewItemBuilder*) clearTitle {
  resultViewItem.hasTitle = NO;
  resultViewItem.title = @"";
  return self;
}
- (BOOL) hasDepthPath {
  return resultViewItem.hasDepthPath;
}
- (NSString*) depthPath {
  return resultViewItem.depthPath;
}
- (ViewItemBuilder*) setDepthPath:(NSString*) value {
  resultViewItem.hasDepthPath = YES;
  resultViewItem.depthPath = value;
  return self;
}
- (ViewItemBuilder*) clearDepthPath {
  resultViewItem.hasDepthPath = NO;
  resultViewItem.depthPath = @"";
  return self;
}
- (BOOL) hasViewId {
  return resultViewItem.hasViewId;
}
- (NSString*) viewId {
  return resultViewItem.viewId;
}
- (ViewItemBuilder*) setViewId:(NSString*) value {
  resultViewItem.hasViewId = YES;
  resultViewItem.viewId = value;
  return self;
}
- (ViewItemBuilder*) clearViewId {
  resultViewItem.hasViewId = NO;
  resultViewItem.viewId = @"";
  return self;
}
@end

@interface MapItem ()
@property (strong) NSString* key;
@property (strong) NSString* value;
@end

@implementation MapItem

- (BOOL) hasKey {
  return !!hasKey_;
}
- (void) setHasKey:(BOOL) _value_ {
  hasKey_ = !!_value_;
}
@synthesize key;
- (BOOL) hasValue {
  return !!hasValue_;
}
- (void) setHasValue:(BOOL) _value_ {
  hasValue_ = !!_value_;
}
@synthesize value;
- (instancetype) init {
  if ((self = [super init])) {
    self.key = @"";
    self.value = @"";
  }
  return self;
}
static MapItem* defaultMapItemInstance = nil;
+ (void) initialize {
  if (self == [MapItem class]) {
    defaultMapItemInstance = [[MapItem alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMapItemInstance;
}
- (instancetype) defaultInstance {
  return defaultMapItemInstance;
}
- (BOOL) isInitialized {
  if (!self.hasKey) {
    return NO;
  }
  if (!self.hasValue) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasKey) {
    [output writeString:1 value:self.key];
  }
  if (self.hasValue) {
    [output writeString:2 value:self.value];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasKey) {
    size_ += computeStringSize(1, self.key);
  }
  if (self.hasValue) {
    size_ += computeStringSize(2, self.value);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MapItem*) parseFromData:(NSData*) data {
  return (MapItem*)[[[MapItem builder] mergeFromData:data] build];
}
+ (MapItem*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MapItem*)[[[MapItem builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MapItem*) parseFromInputStream:(NSInputStream*) input {
  return (MapItem*)[[[MapItem builder] mergeFromInputStream:input] build];
}
+ (MapItem*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MapItem*)[[[MapItem builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MapItem*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MapItem*)[[[MapItem builder] mergeFromCodedInputStream:input] build];
}
+ (MapItem*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MapItem*)[[[MapItem builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MapItemBuilder*) builder {
  return [[MapItemBuilder alloc] init];
}
+ (MapItemBuilder*) builderWithPrototype:(MapItem*) prototype {
  return [[MapItem builder] mergeFrom:prototype];
}
- (MapItemBuilder*) builder {
  return [MapItem builder];
}
- (MapItemBuilder*) toBuilder {
  return [MapItem builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"key", self.key];
  }
  if (self.hasValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"value", self.value];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasKey) {
    [dictionary setObject: self.key forKey: @"key"];
  }
  if (self.hasValue) {
    [dictionary setObject: self.value forKey: @"value"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MapItem class]]) {
    return NO;
  }
  MapItem *otherMessage = other;
  return
      self.hasKey == otherMessage.hasKey &&
      (!self.hasKey || [self.key isEqual:otherMessage.key]) &&
      self.hasValue == otherMessage.hasValue &&
      (!self.hasValue || [self.value isEqual:otherMessage.value]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasKey) {
    hashCode = hashCode * 31 + [self.key hash];
  }
  if (self.hasValue) {
    hashCode = hashCode * 31 + [self.value hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MapItemBuilder()
@property (strong) MapItem* resultMapItem;
@end

@implementation MapItemBuilder
@synthesize resultMapItem;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultMapItem = [[MapItem alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultMapItem;
}
- (MapItemBuilder*) clear {
  self.resultMapItem = [[MapItem alloc] init];
  return self;
}
- (MapItemBuilder*) clone {
  return [MapItem builderWithPrototype:resultMapItem];
}
- (MapItem*) defaultInstance {
  return [MapItem defaultInstance];
}
- (MapItem*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MapItem*) buildPartial {
  MapItem* returnMe = resultMapItem;
  self.resultMapItem = nil;
  return returnMe;
}
- (MapItemBuilder*) mergeFrom:(MapItem*) other {
  if (other == [MapItem defaultInstance]) {
    return self;
  }
  if (other.hasKey) {
    [self setKey:other.key];
  }
  if (other.hasValue) {
    [self setValue:other.value];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MapItemBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MapItemBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setKey:[input readString]];
        break;
      }
      case 18: {
        [self setValue:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasKey {
  return resultMapItem.hasKey;
}
- (NSString*) key {
  return resultMapItem.key;
}
- (MapItemBuilder*) setKey:(NSString*) value {
  resultMapItem.hasKey = YES;
  resultMapItem.key = value;
  return self;
}
- (MapItemBuilder*) clearKey {
  resultMapItem.hasKey = NO;
  resultMapItem.key = @"";
  return self;
}
- (BOOL) hasValue {
  return resultMapItem.hasValue;
}
- (NSString*) value {
  return resultMapItem.value;
}
- (MapItemBuilder*) setValue:(NSString*) value {
  resultMapItem.hasValue = YES;
  resultMapItem.value = value;
  return self;
}
- (MapItemBuilder*) clearValue {
  resultMapItem.hasValue = NO;
  resultMapItem.value = @"";
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
