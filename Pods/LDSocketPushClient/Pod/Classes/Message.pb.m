// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Message.pb.h"
// @@protoc_insertion_point(imports)

@implementation MessageRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [MessageRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL SubTypeIsValidValue(SubType value) {
  switch (value) {
    case SubTypeSub:
    case SubTypeUnsub:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromSubType(SubType value) {
  switch (value) {
    case SubTypeSub:
      return @"SubTypeSub";
    case SubTypeUnsub:
      return @"SubTypeUnsub";
    default:
      return nil;
  }
}

BOOL DevTypeIsValidValue(DevType value) {
  switch (value) {
    case DevTypeIos:
    case DevTypeAndroid:
    case DevTypeWp:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromDevType(DevType value) {
  switch (value) {
    case DevTypeIos:
      return @"DevTypeIos";
    case DevTypeAndroid:
      return @"DevTypeAndroid";
    case DevTypeWp:
      return @"DevTypeWp";
    default:
      return nil;
  }
}

BOOL PushTypeIsValidValue(PushType value) {
  switch (value) {
    case PushTypeGroup:
    case PushTypeSpecial:
    case PushTypeMulti:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPushType(PushType value) {
  switch (value) {
    case PushTypeGroup:
      return @"PushTypeGroup";
    case PushTypeSpecial:
      return @"PushTypeSpecial";
    case PushTypeMulti:
      return @"PushTypeMulti";
    default:
      return nil;
  }
}

BOOL RetCodeIsValidValue(RetCode value) {
  switch (value) {
    case RetCodeSuccess:
    case RetCodeFail:
    case RetCodeCached:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromRetCode(RetCode value) {
  switch (value) {
    case RetCodeSuccess:
      return @"RetCodeSuccess";
    case RetCodeFail:
      return @"RetCodeFail";
    case RetCodeCached:
      return @"RetCodeCached";
    default:
      return nil;
  }
}

@interface HeartBeat ()
@property SInt32 requestId;
@end

@implementation HeartBeat

- (BOOL) hasRequestId {
  return !!hasRequestId_;
}
- (void) setHasRequestId:(BOOL) _value_ {
  hasRequestId_ = !!_value_;
}
@synthesize requestId;
- (instancetype) init {
  if ((self = [super init])) {
    self.requestId = 0;
  }
  return self;
}
static HeartBeat* defaultHeartBeatInstance = nil;
+ (void) initialize {
  if (self == [HeartBeat class]) {
    defaultHeartBeatInstance = [[HeartBeat alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultHeartBeatInstance;
}
- (instancetype) defaultInstance {
  return defaultHeartBeatInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRequestId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRequestId) {
    [output writeInt32:1 value:self.requestId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRequestId) {
    size_ += computeInt32Size(1, self.requestId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (HeartBeat*) parseFromData:(NSData*) data {
  return (HeartBeat*)[[[HeartBeat builder] mergeFromData:data] build];
}
+ (HeartBeat*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HeartBeat*)[[[HeartBeat builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (HeartBeat*) parseFromInputStream:(NSInputStream*) input {
  return (HeartBeat*)[[[HeartBeat builder] mergeFromInputStream:input] build];
}
+ (HeartBeat*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HeartBeat*)[[[HeartBeat builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (HeartBeat*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (HeartBeat*)[[[HeartBeat builder] mergeFromCodedInputStream:input] build];
}
+ (HeartBeat*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HeartBeat*)[[[HeartBeat builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (HeartBeatBuilder*) builder {
  return [[HeartBeatBuilder alloc] init];
}
+ (HeartBeatBuilder*) builderWithPrototype:(HeartBeat*) prototype {
  return [[HeartBeat builder] mergeFrom:prototype];
}
- (HeartBeatBuilder*) builder {
  return [HeartBeat builder];
}
- (HeartBeatBuilder*) toBuilder {
  return [HeartBeat builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRequestId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"requestId", [NSNumber numberWithInteger:self.requestId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRequestId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.requestId] forKey: @"requestId"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[HeartBeat class]]) {
    return NO;
  }
  HeartBeat *otherMessage = other;
  return
      self.hasRequestId == otherMessage.hasRequestId &&
      (!self.hasRequestId || self.requestId == otherMessage.requestId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRequestId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.requestId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface HeartBeatBuilder()
@property (strong) HeartBeat* resultHeartBeat;
@end

@implementation HeartBeatBuilder
@synthesize resultHeartBeat;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultHeartBeat = [[HeartBeat alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultHeartBeat;
}
- (HeartBeatBuilder*) clear {
  self.resultHeartBeat = [[HeartBeat alloc] init];
  return self;
}
- (HeartBeatBuilder*) clone {
  return [HeartBeat builderWithPrototype:resultHeartBeat];
}
- (HeartBeat*) defaultInstance {
  return [HeartBeat defaultInstance];
}
- (HeartBeat*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (HeartBeat*) buildPartial {
  HeartBeat* returnMe = resultHeartBeat;
  self.resultHeartBeat = nil;
  return returnMe;
}
- (HeartBeatBuilder*) mergeFrom:(HeartBeat*) other {
  if (other == [HeartBeat defaultInstance]) {
    return self;
  }
  if (other.hasRequestId) {
    [self setRequestId:other.requestId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (HeartBeatBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (HeartBeatBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setRequestId:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasRequestId {
  return resultHeartBeat.hasRequestId;
}
- (SInt32) requestId {
  return resultHeartBeat.requestId;
}
- (HeartBeatBuilder*) setRequestId:(SInt32) value {
  resultHeartBeat.hasRequestId = YES;
  resultHeartBeat.requestId = value;
  return self;
}
- (HeartBeatBuilder*) clearRequestId {
  resultHeartBeat.hasRequestId = NO;
  resultHeartBeat.requestId = 0;
  return self;
}
@end

@interface RegDev ()
@property SInt32 requestId;
@property SInt32 productCode;
@property (strong) NSString* deviceId;
@property DevType devType;
@property (strong) NSString* token;
@end

@implementation RegDev

- (BOOL) hasRequestId {
  return !!hasRequestId_;
}
- (void) setHasRequestId:(BOOL) _value_ {
  hasRequestId_ = !!_value_;
}
@synthesize requestId;
- (BOOL) hasProductCode {
  return !!hasProductCode_;
}
- (void) setHasProductCode:(BOOL) _value_ {
  hasProductCode_ = !!_value_;
}
@synthesize productCode;
- (BOOL) hasDeviceId {
  return !!hasDeviceId_;
}
- (void) setHasDeviceId:(BOOL) _value_ {
  hasDeviceId_ = !!_value_;
}
@synthesize deviceId;
- (BOOL) hasDevType {
  return !!hasDevType_;
}
- (void) setHasDevType:(BOOL) _value_ {
  hasDevType_ = !!_value_;
}
@synthesize devType;
- (BOOL) hasToken {
  return !!hasToken_;
}
- (void) setHasToken:(BOOL) _value_ {
  hasToken_ = !!_value_;
}
@synthesize token;
- (instancetype) init {
  if ((self = [super init])) {
    self.requestId = 0;
    self.productCode = 0;
    self.deviceId = @"";
    self.devType = DevTypeIos;
    self.token = @"";
  }
  return self;
}
static RegDev* defaultRegDevInstance = nil;
+ (void) initialize {
  if (self == [RegDev class]) {
    defaultRegDevInstance = [[RegDev alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRegDevInstance;
}
- (instancetype) defaultInstance {
  return defaultRegDevInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRequestId) {
    return NO;
  }
  if (!self.hasProductCode) {
    return NO;
  }
  if (!self.hasDeviceId) {
    return NO;
  }
  if (!self.hasDevType) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRequestId) {
    [output writeInt32:1 value:self.requestId];
  }
  if (self.hasProductCode) {
    [output writeInt32:2 value:self.productCode];
  }
  if (self.hasDeviceId) {
    [output writeString:3 value:self.deviceId];
  }
  if (self.hasDevType) {
    [output writeEnum:4 value:self.devType];
  }
  if (self.hasToken) {
    [output writeString:5 value:self.token];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRequestId) {
    size_ += computeInt32Size(1, self.requestId);
  }
  if (self.hasProductCode) {
    size_ += computeInt32Size(2, self.productCode);
  }
  if (self.hasDeviceId) {
    size_ += computeStringSize(3, self.deviceId);
  }
  if (self.hasDevType) {
    size_ += computeEnumSize(4, self.devType);
  }
  if (self.hasToken) {
    size_ += computeStringSize(5, self.token);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RegDev*) parseFromData:(NSData*) data {
  return (RegDev*)[[[RegDev builder] mergeFromData:data] build];
}
+ (RegDev*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RegDev*)[[[RegDev builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RegDev*) parseFromInputStream:(NSInputStream*) input {
  return (RegDev*)[[[RegDev builder] mergeFromInputStream:input] build];
}
+ (RegDev*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RegDev*)[[[RegDev builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RegDev*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RegDev*)[[[RegDev builder] mergeFromCodedInputStream:input] build];
}
+ (RegDev*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RegDev*)[[[RegDev builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RegDevBuilder*) builder {
  return [[RegDevBuilder alloc] init];
}
+ (RegDevBuilder*) builderWithPrototype:(RegDev*) prototype {
  return [[RegDev builder] mergeFrom:prototype];
}
- (RegDevBuilder*) builder {
  return [RegDev builder];
}
- (RegDevBuilder*) toBuilder {
  return [RegDev builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRequestId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"requestId", [NSNumber numberWithInteger:self.requestId]];
  }
  if (self.hasProductCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"productCode", [NSNumber numberWithInteger:self.productCode]];
  }
  if (self.hasDeviceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceId", self.deviceId];
  }
  if (self.hasDevType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"devType", NSStringFromDevType(self.devType)];
  }
  if (self.hasToken) {
    [output appendFormat:@"%@%@: %@\n", indent, @"token", self.token];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRequestId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.requestId] forKey: @"requestId"];
  }
  if (self.hasProductCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.productCode] forKey: @"productCode"];
  }
  if (self.hasDeviceId) {
    [dictionary setObject: self.deviceId forKey: @"deviceId"];
  }
  if (self.hasDevType) {
    [dictionary setObject: @(self.devType) forKey: @"devType"];
  }
  if (self.hasToken) {
    [dictionary setObject: self.token forKey: @"token"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RegDev class]]) {
    return NO;
  }
  RegDev *otherMessage = other;
  return
      self.hasRequestId == otherMessage.hasRequestId &&
      (!self.hasRequestId || self.requestId == otherMessage.requestId) &&
      self.hasProductCode == otherMessage.hasProductCode &&
      (!self.hasProductCode || self.productCode == otherMessage.productCode) &&
      self.hasDeviceId == otherMessage.hasDeviceId &&
      (!self.hasDeviceId || [self.deviceId isEqual:otherMessage.deviceId]) &&
      self.hasDevType == otherMessage.hasDevType &&
      (!self.hasDevType || self.devType == otherMessage.devType) &&
      self.hasToken == otherMessage.hasToken &&
      (!self.hasToken || [self.token isEqual:otherMessage.token]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRequestId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.requestId] hash];
  }
  if (self.hasProductCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.productCode] hash];
  }
  if (self.hasDeviceId) {
    hashCode = hashCode * 31 + [self.deviceId hash];
  }
  if (self.hasDevType) {
    hashCode = hashCode * 31 + self.devType;
  }
  if (self.hasToken) {
    hashCode = hashCode * 31 + [self.token hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RegDevBuilder()
@property (strong) RegDev* resultRegDev;
@end

@implementation RegDevBuilder
@synthesize resultRegDev;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRegDev = [[RegDev alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRegDev;
}
- (RegDevBuilder*) clear {
  self.resultRegDev = [[RegDev alloc] init];
  return self;
}
- (RegDevBuilder*) clone {
  return [RegDev builderWithPrototype:resultRegDev];
}
- (RegDev*) defaultInstance {
  return [RegDev defaultInstance];
}
- (RegDev*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RegDev*) buildPartial {
  RegDev* returnMe = resultRegDev;
  self.resultRegDev = nil;
  return returnMe;
}
- (RegDevBuilder*) mergeFrom:(RegDev*) other {
  if (other == [RegDev defaultInstance]) {
    return self;
  }
  if (other.hasRequestId) {
    [self setRequestId:other.requestId];
  }
  if (other.hasProductCode) {
    [self setProductCode:other.productCode];
  }
  if (other.hasDeviceId) {
    [self setDeviceId:other.deviceId];
  }
  if (other.hasDevType) {
    [self setDevType:other.devType];
  }
  if (other.hasToken) {
    [self setToken:other.token];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RegDevBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RegDevBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setRequestId:[input readInt32]];
        break;
      }
      case 16: {
        [self setProductCode:[input readInt32]];
        break;
      }
      case 26: {
        [self setDeviceId:[input readString]];
        break;
      }
      case 32: {
        DevType value = (DevType)[input readEnum];
        if (DevTypeIsValidValue(value)) {
          [self setDevType:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
      case 42: {
        [self setToken:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasRequestId {
  return resultRegDev.hasRequestId;
}
- (SInt32) requestId {
  return resultRegDev.requestId;
}
- (RegDevBuilder*) setRequestId:(SInt32) value {
  resultRegDev.hasRequestId = YES;
  resultRegDev.requestId = value;
  return self;
}
- (RegDevBuilder*) clearRequestId {
  resultRegDev.hasRequestId = NO;
  resultRegDev.requestId = 0;
  return self;
}
- (BOOL) hasProductCode {
  return resultRegDev.hasProductCode;
}
- (SInt32) productCode {
  return resultRegDev.productCode;
}
- (RegDevBuilder*) setProductCode:(SInt32) value {
  resultRegDev.hasProductCode = YES;
  resultRegDev.productCode = value;
  return self;
}
- (RegDevBuilder*) clearProductCode {
  resultRegDev.hasProductCode = NO;
  resultRegDev.productCode = 0;
  return self;
}
- (BOOL) hasDeviceId {
  return resultRegDev.hasDeviceId;
}
- (NSString*) deviceId {
  return resultRegDev.deviceId;
}
- (RegDevBuilder*) setDeviceId:(NSString*) value {
  resultRegDev.hasDeviceId = YES;
  resultRegDev.deviceId = value;
  return self;
}
- (RegDevBuilder*) clearDeviceId {
  resultRegDev.hasDeviceId = NO;
  resultRegDev.deviceId = @"";
  return self;
}
- (BOOL) hasDevType {
  return resultRegDev.hasDevType;
}
- (DevType) devType {
  return resultRegDev.devType;
}
- (RegDevBuilder*) setDevType:(DevType) value {
  resultRegDev.hasDevType = YES;
  resultRegDev.devType = value;
  return self;
}
- (RegDevBuilder*) clearDevType {
  resultRegDev.hasDevType = NO;
  resultRegDev.devType = DevTypeIos;
  return self;
}
- (BOOL) hasToken {
  return resultRegDev.hasToken;
}
- (NSString*) token {
  return resultRegDev.token;
}
- (RegDevBuilder*) setToken:(NSString*) value {
  resultRegDev.hasToken = YES;
  resultRegDev.token = value;
  return self;
}
- (RegDevBuilder*) clearToken {
  resultRegDev.hasToken = NO;
  resultRegDev.token = @"";
  return self;
}
@end

@interface Subscribe ()
@property SInt32 requestId;
@property (strong) NSString* topic;
@property SubType subType;
@property PushType pushType;
@property (strong) NSString* accountId;
@end

@implementation Subscribe

- (BOOL) hasRequestId {
  return !!hasRequestId_;
}
- (void) setHasRequestId:(BOOL) _value_ {
  hasRequestId_ = !!_value_;
}
@synthesize requestId;
- (BOOL) hasTopic {
  return !!hasTopic_;
}
- (void) setHasTopic:(BOOL) _value_ {
  hasTopic_ = !!_value_;
}
@synthesize topic;
- (BOOL) hasSubType {
  return !!hasSubType_;
}
- (void) setHasSubType:(BOOL) _value_ {
  hasSubType_ = !!_value_;
}
@synthesize subType;
- (BOOL) hasPushType {
  return !!hasPushType_;
}
- (void) setHasPushType:(BOOL) _value_ {
  hasPushType_ = !!_value_;
}
@synthesize pushType;
- (BOOL) hasAccountId {
  return !!hasAccountId_;
}
- (void) setHasAccountId:(BOOL) _value_ {
  hasAccountId_ = !!_value_;
}
@synthesize accountId;
- (instancetype) init {
  if ((self = [super init])) {
    self.requestId = 0;
    self.topic = @"";
    self.subType = SubTypeSub;
    self.pushType = PushTypeGroup;
    self.accountId = @"";
  }
  return self;
}
static Subscribe* defaultSubscribeInstance = nil;
+ (void) initialize {
  if (self == [Subscribe class]) {
    defaultSubscribeInstance = [[Subscribe alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSubscribeInstance;
}
- (instancetype) defaultInstance {
  return defaultSubscribeInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRequestId) {
    return NO;
  }
  if (!self.hasTopic) {
    return NO;
  }
  if (!self.hasSubType) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRequestId) {
    [output writeInt32:1 value:self.requestId];
  }
  if (self.hasTopic) {
    [output writeString:2 value:self.topic];
  }
  if (self.hasSubType) {
    [output writeEnum:3 value:self.subType];
  }
  if (self.hasAccountId) {
    [output writeString:4 value:self.accountId];
  }
  if (self.hasPushType) {
    [output writeEnum:6 value:self.pushType];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRequestId) {
    size_ += computeInt32Size(1, self.requestId);
  }
  if (self.hasTopic) {
    size_ += computeStringSize(2, self.topic);
  }
  if (self.hasSubType) {
    size_ += computeEnumSize(3, self.subType);
  }
  if (self.hasAccountId) {
    size_ += computeStringSize(4, self.accountId);
  }
  if (self.hasPushType) {
    size_ += computeEnumSize(6, self.pushType);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Subscribe*) parseFromData:(NSData*) data {
  return (Subscribe*)[[[Subscribe builder] mergeFromData:data] build];
}
+ (Subscribe*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Subscribe*)[[[Subscribe builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Subscribe*) parseFromInputStream:(NSInputStream*) input {
  return (Subscribe*)[[[Subscribe builder] mergeFromInputStream:input] build];
}
+ (Subscribe*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Subscribe*)[[[Subscribe builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Subscribe*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Subscribe*)[[[Subscribe builder] mergeFromCodedInputStream:input] build];
}
+ (Subscribe*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Subscribe*)[[[Subscribe builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SubscribeBuilder*) builder {
  return [[SubscribeBuilder alloc] init];
}
+ (SubscribeBuilder*) builderWithPrototype:(Subscribe*) prototype {
  return [[Subscribe builder] mergeFrom:prototype];
}
- (SubscribeBuilder*) builder {
  return [Subscribe builder];
}
- (SubscribeBuilder*) toBuilder {
  return [Subscribe builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRequestId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"requestId", [NSNumber numberWithInteger:self.requestId]];
  }
  if (self.hasTopic) {
    [output appendFormat:@"%@%@: %@\n", indent, @"topic", self.topic];
  }
  if (self.hasSubType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"subType", NSStringFromSubType(self.subType)];
  }
  if (self.hasAccountId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"accountId", self.accountId];
  }
  if (self.hasPushType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pushType", NSStringFromPushType(self.pushType)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRequestId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.requestId] forKey: @"requestId"];
  }
  if (self.hasTopic) {
    [dictionary setObject: self.topic forKey: @"topic"];
  }
  if (self.hasSubType) {
    [dictionary setObject: @(self.subType) forKey: @"subType"];
  }
  if (self.hasAccountId) {
    [dictionary setObject: self.accountId forKey: @"accountId"];
  }
  if (self.hasPushType) {
    [dictionary setObject: @(self.pushType) forKey: @"pushType"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Subscribe class]]) {
    return NO;
  }
  Subscribe *otherMessage = other;
  return
      self.hasRequestId == otherMessage.hasRequestId &&
      (!self.hasRequestId || self.requestId == otherMessage.requestId) &&
      self.hasTopic == otherMessage.hasTopic &&
      (!self.hasTopic || [self.topic isEqual:otherMessage.topic]) &&
      self.hasSubType == otherMessage.hasSubType &&
      (!self.hasSubType || self.subType == otherMessage.subType) &&
      self.hasAccountId == otherMessage.hasAccountId &&
      (!self.hasAccountId || [self.accountId isEqual:otherMessage.accountId]) &&
      self.hasPushType == otherMessage.hasPushType &&
      (!self.hasPushType || self.pushType == otherMessage.pushType) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRequestId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.requestId] hash];
  }
  if (self.hasTopic) {
    hashCode = hashCode * 31 + [self.topic hash];
  }
  if (self.hasSubType) {
    hashCode = hashCode * 31 + self.subType;
  }
  if (self.hasAccountId) {
    hashCode = hashCode * 31 + [self.accountId hash];
  }
  if (self.hasPushType) {
    hashCode = hashCode * 31 + self.pushType;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SubscribeBuilder()
@property (strong) Subscribe* resultSubscribe;
@end

@implementation SubscribeBuilder
@synthesize resultSubscribe;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSubscribe = [[Subscribe alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSubscribe;
}
- (SubscribeBuilder*) clear {
  self.resultSubscribe = [[Subscribe alloc] init];
  return self;
}
- (SubscribeBuilder*) clone {
  return [Subscribe builderWithPrototype:resultSubscribe];
}
- (Subscribe*) defaultInstance {
  return [Subscribe defaultInstance];
}
- (Subscribe*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Subscribe*) buildPartial {
  Subscribe* returnMe = resultSubscribe;
  self.resultSubscribe = nil;
  return returnMe;
}
- (SubscribeBuilder*) mergeFrom:(Subscribe*) other {
  if (other == [Subscribe defaultInstance]) {
    return self;
  }
  if (other.hasRequestId) {
    [self setRequestId:other.requestId];
  }
  if (other.hasTopic) {
    [self setTopic:other.topic];
  }
  if (other.hasSubType) {
    [self setSubType:other.subType];
  }
  if (other.hasPushType) {
    [self setPushType:other.pushType];
  }
  if (other.hasAccountId) {
    [self setAccountId:other.accountId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SubscribeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SubscribeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setRequestId:[input readInt32]];
        break;
      }
      case 18: {
        [self setTopic:[input readString]];
        break;
      }
      case 24: {
        SubType value = (SubType)[input readEnum];
        if (SubTypeIsValidValue(value)) {
          [self setSubType:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 34: {
        [self setAccountId:[input readString]];
        break;
      }
      case 48: {
        PushType value = (PushType)[input readEnum];
        if (PushTypeIsValidValue(value)) {
          [self setPushType:value];
        } else {
          [unknownFields mergeVarintField:6 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasRequestId {
  return resultSubscribe.hasRequestId;
}
- (SInt32) requestId {
  return resultSubscribe.requestId;
}
- (SubscribeBuilder*) setRequestId:(SInt32) value {
  resultSubscribe.hasRequestId = YES;
  resultSubscribe.requestId = value;
  return self;
}
- (SubscribeBuilder*) clearRequestId {
  resultSubscribe.hasRequestId = NO;
  resultSubscribe.requestId = 0;
  return self;
}
- (BOOL) hasTopic {
  return resultSubscribe.hasTopic;
}
- (NSString*) topic {
  return resultSubscribe.topic;
}
- (SubscribeBuilder*) setTopic:(NSString*) value {
  resultSubscribe.hasTopic = YES;
  resultSubscribe.topic = value;
  return self;
}
- (SubscribeBuilder*) clearTopic {
  resultSubscribe.hasTopic = NO;
  resultSubscribe.topic = @"";
  return self;
}
- (BOOL) hasSubType {
  return resultSubscribe.hasSubType;
}
- (SubType) subType {
  return resultSubscribe.subType;
}
- (SubscribeBuilder*) setSubType:(SubType) value {
  resultSubscribe.hasSubType = YES;
  resultSubscribe.subType = value;
  return self;
}
- (SubscribeBuilder*) clearSubType {
  resultSubscribe.hasSubType = NO;
  resultSubscribe.subType = SubTypeSub;
  return self;
}
- (BOOL) hasPushType {
  return resultSubscribe.hasPushType;
}
- (PushType) pushType {
  return resultSubscribe.pushType;
}
- (SubscribeBuilder*) setPushType:(PushType) value {
  resultSubscribe.hasPushType = YES;
  resultSubscribe.pushType = value;
  return self;
}
- (SubscribeBuilder*) clearPushType {
  resultSubscribe.hasPushType = NO;
  resultSubscribe.pushType = PushTypeGroup;
  return self;
}
- (BOOL) hasAccountId {
  return resultSubscribe.hasAccountId;
}
- (NSString*) accountId {
  return resultSubscribe.accountId;
}
- (SubscribeBuilder*) setAccountId:(NSString*) value {
  resultSubscribe.hasAccountId = YES;
  resultSubscribe.accountId = value;
  return self;
}
- (SubscribeBuilder*) clearAccountId {
  resultSubscribe.hasAccountId = NO;
  resultSubscribe.accountId = @"";
  return self;
}
@end

@interface RetMsg ()
@property (strong) NSData* body;
@property (strong) NSString* topic;
@property PushType pushType;
@end

@implementation RetMsg

- (BOOL) hasBody {
  return !!hasBody_;
}
- (void) setHasBody:(BOOL) _value_ {
  hasBody_ = !!_value_;
}
@synthesize body;
- (BOOL) hasTopic {
  return !!hasTopic_;
}
- (void) setHasTopic:(BOOL) _value_ {
  hasTopic_ = !!_value_;
}
@synthesize topic;
- (BOOL) hasPushType {
  return !!hasPushType_;
}
- (void) setHasPushType:(BOOL) _value_ {
  hasPushType_ = !!_value_;
}
@synthesize pushType;
- (instancetype) init {
  if ((self = [super init])) {
    self.body = [NSData data];
    self.topic = @"";
    self.pushType = PushTypeGroup;
  }
  return self;
}
static RetMsg* defaultRetMsgInstance = nil;
+ (void) initialize {
  if (self == [RetMsg class]) {
    defaultRetMsgInstance = [[RetMsg alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRetMsgInstance;
}
- (instancetype) defaultInstance {
  return defaultRetMsgInstance;
}
- (BOOL) isInitialized {
  if (!self.hasBody) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBody) {
    [output writeData:1 value:self.body];
  }
  if (self.hasTopic) {
    [output writeString:2 value:self.topic];
  }
  if (self.hasPushType) {
    [output writeEnum:3 value:self.pushType];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasBody) {
    size_ += computeDataSize(1, self.body);
  }
  if (self.hasTopic) {
    size_ += computeStringSize(2, self.topic);
  }
  if (self.hasPushType) {
    size_ += computeEnumSize(3, self.pushType);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RetMsg*) parseFromData:(NSData*) data {
  return (RetMsg*)[[[RetMsg builder] mergeFromData:data] build];
}
+ (RetMsg*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RetMsg*)[[[RetMsg builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RetMsg*) parseFromInputStream:(NSInputStream*) input {
  return (RetMsg*)[[[RetMsg builder] mergeFromInputStream:input] build];
}
+ (RetMsg*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RetMsg*)[[[RetMsg builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RetMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RetMsg*)[[[RetMsg builder] mergeFromCodedInputStream:input] build];
}
+ (RetMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RetMsg*)[[[RetMsg builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RetMsgBuilder*) builder {
  return [[RetMsgBuilder alloc] init];
}
+ (RetMsgBuilder*) builderWithPrototype:(RetMsg*) prototype {
  return [[RetMsg builder] mergeFrom:prototype];
}
- (RetMsgBuilder*) builder {
  return [RetMsg builder];
}
- (RetMsgBuilder*) toBuilder {
  return [RetMsg builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasBody) {
    [output appendFormat:@"%@%@: %@\n", indent, @"body", self.body];
  }
  if (self.hasTopic) {
    [output appendFormat:@"%@%@: %@\n", indent, @"topic", self.topic];
  }
  if (self.hasPushType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pushType", NSStringFromPushType(self.pushType)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasBody) {
    [dictionary setObject: self.body forKey: @"body"];
  }
  if (self.hasTopic) {
    [dictionary setObject: self.topic forKey: @"topic"];
  }
  if (self.hasPushType) {
    [dictionary setObject: @(self.pushType) forKey: @"pushType"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RetMsg class]]) {
    return NO;
  }
  RetMsg *otherMessage = other;
  return
      self.hasBody == otherMessage.hasBody &&
      (!self.hasBody || [self.body isEqual:otherMessage.body]) &&
      self.hasTopic == otherMessage.hasTopic &&
      (!self.hasTopic || [self.topic isEqual:otherMessage.topic]) &&
      self.hasPushType == otherMessage.hasPushType &&
      (!self.hasPushType || self.pushType == otherMessage.pushType) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasBody) {
    hashCode = hashCode * 31 + [self.body hash];
  }
  if (self.hasTopic) {
    hashCode = hashCode * 31 + [self.topic hash];
  }
  if (self.hasPushType) {
    hashCode = hashCode * 31 + self.pushType;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RetMsgBuilder()
@property (strong) RetMsg* resultRetMsg;
@end

@implementation RetMsgBuilder
@synthesize resultRetMsg;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRetMsg = [[RetMsg alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRetMsg;
}
- (RetMsgBuilder*) clear {
  self.resultRetMsg = [[RetMsg alloc] init];
  return self;
}
- (RetMsgBuilder*) clone {
  return [RetMsg builderWithPrototype:resultRetMsg];
}
- (RetMsg*) defaultInstance {
  return [RetMsg defaultInstance];
}
- (RetMsg*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RetMsg*) buildPartial {
  RetMsg* returnMe = resultRetMsg;
  self.resultRetMsg = nil;
  return returnMe;
}
- (RetMsgBuilder*) mergeFrom:(RetMsg*) other {
  if (other == [RetMsg defaultInstance]) {
    return self;
  }
  if (other.hasBody) {
    [self setBody:other.body];
  }
  if (other.hasTopic) {
    [self setTopic:other.topic];
  }
  if (other.hasPushType) {
    [self setPushType:other.pushType];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RetMsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RetMsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setBody:[input readData]];
        break;
      }
      case 18: {
        [self setTopic:[input readString]];
        break;
      }
      case 24: {
        PushType value = (PushType)[input readEnum];
        if (PushTypeIsValidValue(value)) {
          [self setPushType:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasBody {
  return resultRetMsg.hasBody;
}
- (NSData*) body {
  return resultRetMsg.body;
}
- (RetMsgBuilder*) setBody:(NSData*) value {
  resultRetMsg.hasBody = YES;
  resultRetMsg.body = value;
  return self;
}
- (RetMsgBuilder*) clearBody {
  resultRetMsg.hasBody = NO;
  resultRetMsg.body = [NSData data];
  return self;
}
- (BOOL) hasTopic {
  return resultRetMsg.hasTopic;
}
- (NSString*) topic {
  return resultRetMsg.topic;
}
- (RetMsgBuilder*) setTopic:(NSString*) value {
  resultRetMsg.hasTopic = YES;
  resultRetMsg.topic = value;
  return self;
}
- (RetMsgBuilder*) clearTopic {
  resultRetMsg.hasTopic = NO;
  resultRetMsg.topic = @"";
  return self;
}
- (BOOL) hasPushType {
  return resultRetMsg.hasPushType;
}
- (PushType) pushType {
  return resultRetMsg.pushType;
}
- (RetMsgBuilder*) setPushType:(PushType) value {
  resultRetMsg.hasPushType = YES;
  resultRetMsg.pushType = value;
  return self;
}
- (RetMsgBuilder*) clearPushType {
  resultRetMsg.hasPushType = NO;
  resultRetMsg.pushType = PushTypeGroup;
  return self;
}
@end

@interface Response ()
@property SInt32 requestId;
@property RetCode retCode;
@property (strong) NSString* rightHost;
@end

@implementation Response

- (BOOL) hasRequestId {
  return !!hasRequestId_;
}
- (void) setHasRequestId:(BOOL) _value_ {
  hasRequestId_ = !!_value_;
}
@synthesize requestId;
- (BOOL) hasRetCode {
  return !!hasRetCode_;
}
- (void) setHasRetCode:(BOOL) _value_ {
  hasRetCode_ = !!_value_;
}
@synthesize retCode;
- (BOOL) hasRightHost {
  return !!hasRightHost_;
}
- (void) setHasRightHost:(BOOL) _value_ {
  hasRightHost_ = !!_value_;
}
@synthesize rightHost;
- (instancetype) init {
  if ((self = [super init])) {
    self.requestId = 0;
    self.retCode = RetCodeSuccess;
    self.rightHost = @"";
  }
  return self;
}
static Response* defaultResponseInstance = nil;
+ (void) initialize {
  if (self == [Response class]) {
    defaultResponseInstance = [[Response alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultResponseInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRequestId) {
    return NO;
  }
  if (!self.hasRetCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRequestId) {
    [output writeInt32:1 value:self.requestId];
  }
  if (self.hasRetCode) {
    [output writeEnum:2 value:self.retCode];
  }
  if (self.hasRightHost) {
    [output writeString:3 value:self.rightHost];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRequestId) {
    size_ += computeInt32Size(1, self.requestId);
  }
  if (self.hasRetCode) {
    size_ += computeEnumSize(2, self.retCode);
  }
  if (self.hasRightHost) {
    size_ += computeStringSize(3, self.rightHost);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Response*) parseFromData:(NSData*) data {
  return (Response*)[[[Response builder] mergeFromData:data] build];
}
+ (Response*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Response*)[[[Response builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Response*) parseFromInputStream:(NSInputStream*) input {
  return (Response*)[[[Response builder] mergeFromInputStream:input] build];
}
+ (Response*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Response*)[[[Response builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Response*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Response*)[[[Response builder] mergeFromCodedInputStream:input] build];
}
+ (Response*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Response*)[[[Response builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseBuilder*) builder {
  return [[ResponseBuilder alloc] init];
}
+ (ResponseBuilder*) builderWithPrototype:(Response*) prototype {
  return [[Response builder] mergeFrom:prototype];
}
- (ResponseBuilder*) builder {
  return [Response builder];
}
- (ResponseBuilder*) toBuilder {
  return [Response builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRequestId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"requestId", [NSNumber numberWithInteger:self.requestId]];
  }
  if (self.hasRetCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"retCode", NSStringFromRetCode(self.retCode)];
  }
  if (self.hasRightHost) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rightHost", self.rightHost];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRequestId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.requestId] forKey: @"requestId"];
  }
  if (self.hasRetCode) {
    [dictionary setObject: @(self.retCode) forKey: @"retCode"];
  }
  if (self.hasRightHost) {
    [dictionary setObject: self.rightHost forKey: @"rightHost"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Response class]]) {
    return NO;
  }
  Response *otherMessage = other;
  return
      self.hasRequestId == otherMessage.hasRequestId &&
      (!self.hasRequestId || self.requestId == otherMessage.requestId) &&
      self.hasRetCode == otherMessage.hasRetCode &&
      (!self.hasRetCode || self.retCode == otherMessage.retCode) &&
      self.hasRightHost == otherMessage.hasRightHost &&
      (!self.hasRightHost || [self.rightHost isEqual:otherMessage.rightHost]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRequestId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.requestId] hash];
  }
  if (self.hasRetCode) {
    hashCode = hashCode * 31 + self.retCode;
  }
  if (self.hasRightHost) {
    hashCode = hashCode * 31 + [self.rightHost hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ResponseBuilder()
@property (strong) Response* resultResponse;
@end

@implementation ResponseBuilder
@synthesize resultResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultResponse = [[Response alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultResponse;
}
- (ResponseBuilder*) clear {
  self.resultResponse = [[Response alloc] init];
  return self;
}
- (ResponseBuilder*) clone {
  return [Response builderWithPrototype:resultResponse];
}
- (Response*) defaultInstance {
  return [Response defaultInstance];
}
- (Response*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Response*) buildPartial {
  Response* returnMe = resultResponse;
  self.resultResponse = nil;
  return returnMe;
}
- (ResponseBuilder*) mergeFrom:(Response*) other {
  if (other == [Response defaultInstance]) {
    return self;
  }
  if (other.hasRequestId) {
    [self setRequestId:other.requestId];
  }
  if (other.hasRetCode) {
    [self setRetCode:other.retCode];
  }
  if (other.hasRightHost) {
    [self setRightHost:other.rightHost];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setRequestId:[input readInt32]];
        break;
      }
      case 16: {
        RetCode value = (RetCode)[input readEnum];
        if (RetCodeIsValidValue(value)) {
          [self setRetCode:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 26: {
        [self setRightHost:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasRequestId {
  return resultResponse.hasRequestId;
}
- (SInt32) requestId {
  return resultResponse.requestId;
}
- (ResponseBuilder*) setRequestId:(SInt32) value {
  resultResponse.hasRequestId = YES;
  resultResponse.requestId = value;
  return self;
}
- (ResponseBuilder*) clearRequestId {
  resultResponse.hasRequestId = NO;
  resultResponse.requestId = 0;
  return self;
}
- (BOOL) hasRetCode {
  return resultResponse.hasRetCode;
}
- (RetCode) retCode {
  return resultResponse.retCode;
}
- (ResponseBuilder*) setRetCode:(RetCode) value {
  resultResponse.hasRetCode = YES;
  resultResponse.retCode = value;
  return self;
}
- (ResponseBuilder*) clearRetCode {
  resultResponse.hasRetCode = NO;
  resultResponse.retCode = RetCodeSuccess;
  return self;
}
- (BOOL) hasRightHost {
  return resultResponse.hasRightHost;
}
- (NSString*) rightHost {
  return resultResponse.rightHost;
}
- (ResponseBuilder*) setRightHost:(NSString*) value {
  resultResponse.hasRightHost = YES;
  resultResponse.rightHost = value;
  return self;
}
- (ResponseBuilder*) clearRightHost {
  resultResponse.hasRightHost = NO;
  resultResponse.rightHost = @"";
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
