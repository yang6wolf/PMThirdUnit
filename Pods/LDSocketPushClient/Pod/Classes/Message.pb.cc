// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Message.pb.h"

#include <algorithm>

#include "common.h"
#include "once.h"
#include "coded_stream.h"
#include "wire_format_lite_inl.h"
#include "descriptor.h"
#include "generated_message_reflection.h"
#include "reflection_ops.h"
#include "wire_format.h"
// @@protoc_insertion_point(includes)

namespace message {

namespace {

const ::google::protobuf::Descriptor* HeartBeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartBeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* Publish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Publish_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthBackend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthBackend_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegDev_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegDev_reflection_ = NULL;
const ::google::protobuf::Descriptor* Subscribe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Subscribe_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SubType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DevType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PushType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RetCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Message_2eproto() {
  protobuf_AddDesc_Message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Message.proto");
  GOOGLE_CHECK(file != NULL);
  HeartBeat_descriptor_ = file->message_type(0);
  static const int HeartBeat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, requestid_),
  };
  HeartBeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartBeat_descriptor_,
      HeartBeat::default_instance_,
      HeartBeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartBeat));
  Publish_descriptor_ = file->message_type(1);
  static const int Publish_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Publish, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Publish, productcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Publish, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Publish, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Publish, pushtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Publish, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Publish, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Publish, expiry_),
  };
  Publish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Publish_descriptor_,
      Publish::default_instance_,
      Publish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Publish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Publish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Publish));
  AuthBackend_descriptor_ = file->message_type(2);
  static const int AuthBackend_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthBackend, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthBackend, productcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthBackend, authtoken_),
  };
  AuthBackend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthBackend_descriptor_,
      AuthBackend::default_instance_,
      AuthBackend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthBackend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthBackend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthBackend));
  RegDev_descriptor_ = file->message_type(3);
  static const int RegDev_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegDev, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegDev, productcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegDev, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegDev, devtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegDev, token_),
  };
  RegDev_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegDev_descriptor_,
      RegDev::default_instance_,
      RegDev_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegDev, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegDev, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegDev));
  Subscribe_descriptor_ = file->message_type(4);
  static const int Subscribe_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscribe, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscribe, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscribe, subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscribe, pushtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscribe, accountid_),
  };
  Subscribe_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Subscribe_descriptor_,
      Subscribe::default_instance_,
      Subscribe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscribe, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscribe, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Subscribe));
  RetMsg_descriptor_ = file->message_type(5);
  static const int RetMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetMsg, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetMsg, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetMsg, pushtype_),
  };
  RetMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetMsg_descriptor_,
      RetMsg::default_instance_,
      RetMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetMsg));
  Response_descriptor_ = file->message_type(6);
  static const int Response_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, righthost_),
  };
  Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response));
  SubType_descriptor_ = file->enum_type(0);
  DevType_descriptor_ = file->enum_type(1);
  PushType_descriptor_ = file->enum_type(2);
  RetCode_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartBeat_descriptor_, &HeartBeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Publish_descriptor_, &Publish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthBackend_descriptor_, &AuthBackend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegDev_descriptor_, &RegDev::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Subscribe_descriptor_, &Subscribe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetMsg_descriptor_, &RetMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_descriptor_, &Response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Message_2eproto() {
  delete HeartBeat::default_instance_;
  delete HeartBeat_reflection_;
  delete Publish::default_instance_;
  delete Publish_reflection_;
  delete AuthBackend::default_instance_;
  delete AuthBackend_reflection_;
  delete RegDev::default_instance_;
  delete RegDev_reflection_;
  delete Subscribe::default_instance_;
  delete Subscribe_reflection_;
  delete RetMsg::default_instance_;
  delete RetMsg_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
}

void protobuf_AddDesc_Message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rMessage.proto\022\007message\"\036\n\tHeartBeat\022\021\n"
    "\trequestId\030\001 \002(\005\"\262\001\n\007Publish\022\021\n\trequestI"
    "d\030\001 \002(\005\022\023\n\013productCode\030\002 \002(\005\022\r\n\005topic\030\003 "
    "\002(\t\022\014\n\004body\030\004 \001(\014\022*\n\010pushType\030\005 \001(\0162\021.me"
    "ssage.PushType:\005GROUP\022\020\n\010deviceId\030\006 \001(\t\022"
    "\021\n\taccountId\030\007 \001(\t\022\021\n\006expiry\030\010 \001(\003:\0010\"H\n"
    "\013AuthBackend\022\021\n\trequestId\030\001 \002(\005\022\023\n\013produ"
    "ctCode\030\002 \002(\005\022\021\n\tauthToken\030\003 \002(\t\"t\n\006RegDe"
    "v\022\021\n\trequestId\030\001 \002(\005\022\023\n\013productCode\030\002 \002("
    "\005\022\020\n\010deviceId\030\003 \002(\t\022!\n\007devType\030\004 \002(\0162\020.m"
    "essage.DevType\022\r\n\005token\030\005 \001(\t\"\217\001\n\tSubscr"
    "ibe\022\021\n\trequestId\030\001 \002(\005\022\r\n\005topic\030\002 \002(\t\022!\n"
    "\007subType\030\003 \002(\0162\020.message.SubType\022*\n\010push"
    "Type\030\006 \001(\0162\021.message.PushType:\005GROUP\022\021\n\t"
    "accountId\030\004 \001(\t\"Q\n\006RetMsg\022\014\n\004body\030\001 \002(\014\022"
    "\r\n\005topic\030\002 \001(\t\022*\n\010pushType\030\003 \001(\0162\021.messa"
    "ge.PushType:\005GROUP\"S\n\010Response\022\021\n\treques"
    "tId\030\001 \002(\005\022!\n\007retCode\030\002 \002(\0162\020.message.Ret"
    "Code\022\021\n\trightHost\030\003 \001(\t*\035\n\007SubType\022\007\n\003SU"
    "B\020\001\022\t\n\005UNSUB\020\002*\'\n\007DevType\022\007\n\003IOS\020\001\022\013\n\007AN"
    "DROID\020\002\022\006\n\002WP\020\003*-\n\010PushType\022\t\n\005GROUP\020\001\022\013"
    "\n\007SPECIAL\020\002\022\t\n\005MULTI\020\003*,\n\007RetCode\022\013\n\007SUC"
    "CESS\020\001\022\010\n\004FAIL\020\002\022\n\n\006CACHED\020\003B%\n\032com.nete"
    "ase.alive.protobufB\007Message", 947);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Message.proto", &protobuf_RegisterTypes);
  HeartBeat::default_instance_ = new HeartBeat();
  Publish::default_instance_ = new Publish();
  AuthBackend::default_instance_ = new AuthBackend();
  RegDev::default_instance_ = new RegDev();
  Subscribe::default_instance_ = new Subscribe();
  RetMsg::default_instance_ = new RetMsg();
  Response::default_instance_ = new Response();
  HeartBeat::default_instance_->InitAsDefaultInstance();
  Publish::default_instance_->InitAsDefaultInstance();
  AuthBackend::default_instance_->InitAsDefaultInstance();
  RegDev::default_instance_->InitAsDefaultInstance();
  Subscribe::default_instance_->InitAsDefaultInstance();
  RetMsg::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Message_2eproto {
  StaticDescriptorInitializer_Message_2eproto() {
    protobuf_AddDesc_Message_2eproto();
  }
} static_descriptor_initializer_Message_2eproto_;
const ::google::protobuf::EnumDescriptor* SubType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubType_descriptor_;
}
bool SubType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DevType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DevType_descriptor_;
}
bool DevType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PushType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushType_descriptor_;
}
bool PushType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RetCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetCode_descriptor_;
}
bool RetCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int HeartBeat::kRequestIdFieldNumber;
#endif  // !_MSC_VER

HeartBeat::HeartBeat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.HeartBeat)
}

void HeartBeat::InitAsDefaultInstance() {
}

HeartBeat::HeartBeat(const HeartBeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.HeartBeat)
}

void HeartBeat::SharedCtor() {
  _cached_size_ = 0;
  requestid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartBeat::~HeartBeat() {
  // @@protoc_insertion_point(destructor:message.HeartBeat)
  SharedDtor();
}

void HeartBeat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeartBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartBeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartBeat_descriptor_;
}

const HeartBeat& HeartBeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

HeartBeat* HeartBeat::default_instance_ = NULL;

HeartBeat* HeartBeat::New() const {
  return new HeartBeat;
}

void HeartBeat::Clear() {
  requestid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.HeartBeat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 requestId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.HeartBeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.HeartBeat)
  return false;
#undef DO_
}

void HeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.HeartBeat)
  // required int32 requestId = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.HeartBeat)
}

::google::protobuf::uint8* HeartBeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.HeartBeat)
  // required int32 requestId = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.HeartBeat)
  return target;
}

int HeartBeat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 requestId = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartBeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartBeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartBeat::MergeFrom(const HeartBeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartBeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeat::CopyFrom(const HeartBeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HeartBeat::Swap(HeartBeat* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartBeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartBeat_descriptor_;
  metadata.reflection = HeartBeat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Publish::kRequestIdFieldNumber;
const int Publish::kProductCodeFieldNumber;
const int Publish::kTopicFieldNumber;
const int Publish::kBodyFieldNumber;
const int Publish::kPushTypeFieldNumber;
const int Publish::kDeviceIdFieldNumber;
const int Publish::kAccountIdFieldNumber;
const int Publish::kExpiryFieldNumber;
#endif  // !_MSC_VER

Publish::Publish()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.Publish)
}

void Publish::InitAsDefaultInstance() {
}

Publish::Publish(const Publish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.Publish)
}

void Publish::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requestid_ = 0;
  productcode_ = 0;
  topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pushtype_ = 1;
  deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accountid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expiry_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Publish::~Publish() {
  // @@protoc_insertion_point(destructor:message.Publish)
  SharedDtor();
}

void Publish::SharedDtor() {
  if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete topic_;
  }
  if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete body_;
  }
  if (deviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deviceid_;
  }
  if (accountid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete accountid_;
  }
  if (this != default_instance_) {
  }
}

void Publish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Publish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Publish_descriptor_;
}

const Publish& Publish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

Publish* Publish::default_instance_ = NULL;

Publish* Publish::New() const {
  return new Publish;
}

void Publish::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Publish*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(requestid_, productcode_);
    if (has_topic()) {
      if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        topic_->clear();
      }
    }
    if (has_body()) {
      if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        body_->clear();
      }
    }
    pushtype_ = 1;
    if (has_deviceid()) {
      if (deviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        deviceid_->clear();
      }
    }
    if (has_accountid()) {
      if (accountid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        accountid_->clear();
      }
    }
    expiry_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Publish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.Publish)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 requestId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_productCode;
        break;
      }

      // required int32 productCode = 2;
      case 2: {
        if (tag == 16) {
         parse_productCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &productcode_)));
          set_has_productcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_topic;
        break;
      }

      // required string topic = 3;
      case 3: {
        if (tag == 26) {
         parse_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "topic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_body;
        break;
      }

      // optional bytes body = 4;
      case 4: {
        if (tag == 34) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pushType;
        break;
      }

      // optional .message.PushType pushType = 5 [default = GROUP];
      case 5: {
        if (tag == 40) {
         parse_pushType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message::PushType_IsValid(value)) {
            set_pushtype(static_cast< ::message::PushType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_deviceId;
        break;
      }

      // optional string deviceId = 6;
      case 6: {
        if (tag == 50) {
         parse_deviceId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "deviceid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_accountId;
        break;
      }

      // optional string accountId = 7;
      case 7: {
        if (tag == 58) {
         parse_accountId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->accountid().data(), this->accountid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "accountid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_expiry;
        break;
      }

      // optional int64 expiry = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_expiry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expiry_)));
          set_has_expiry();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.Publish)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.Publish)
  return false;
#undef DO_
}

void Publish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.Publish)
  // required int32 requestId = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // required int32 productCode = 2;
  if (has_productcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->productcode(), output);
  }

  // required string topic = 3;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->topic(), output);
  }

  // optional bytes body = 4;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->body(), output);
  }

  // optional .message.PushType pushType = 5 [default = GROUP];
  if (has_pushtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->pushtype(), output);
  }

  // optional string deviceId = 6;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deviceid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->deviceid(), output);
  }

  // optional string accountId = 7;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accountid().data(), this->accountid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "accountid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->accountid(), output);
  }

  // optional int64 expiry = 8 [default = 0];
  if (has_expiry()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->expiry(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.Publish)
}

::google::protobuf::uint8* Publish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.Publish)
  // required int32 requestId = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // required int32 productCode = 2;
  if (has_productcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->productcode(), target);
  }

  // required string topic = 3;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->topic(), target);
  }

  // optional bytes body = 4;
  if (has_body()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->body(), target);
  }

  // optional .message.PushType pushType = 5 [default = GROUP];
  if (has_pushtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->pushtype(), target);
  }

  // optional string deviceId = 6;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deviceid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->deviceid(), target);
  }

  // optional string accountId = 7;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accountid().data(), this->accountid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "accountid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->accountid(), target);
  }

  // optional int64 expiry = 8 [default = 0];
  if (has_expiry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->expiry(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.Publish)
  return target;
}

int Publish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 requestId = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // required int32 productCode = 2;
    if (has_productcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->productcode());
    }

    // required string topic = 3;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topic());
    }

    // optional bytes body = 4;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->body());
    }

    // optional .message.PushType pushType = 5 [default = GROUP];
    if (has_pushtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pushtype());
    }

    // optional string deviceId = 6;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceid());
    }

    // optional string accountId = 7;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountid());
    }

    // optional int64 expiry = 8 [default = 0];
    if (has_expiry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expiry());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Publish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Publish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Publish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Publish::MergeFrom(const Publish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_productcode()) {
      set_productcode(from.productcode());
    }
    if (from.has_topic()) {
      set_topic(from.topic());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
    if (from.has_pushtype()) {
      set_pushtype(from.pushtype());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_expiry()) {
      set_expiry(from.expiry());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Publish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Publish::CopyFrom(const Publish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Publish::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Publish::Swap(Publish* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(productcode_, other->productcode_);
    std::swap(topic_, other->topic_);
    std::swap(body_, other->body_);
    std::swap(pushtype_, other->pushtype_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(accountid_, other->accountid_);
    std::swap(expiry_, other->expiry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Publish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Publish_descriptor_;
  metadata.reflection = Publish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuthBackend::kRequestIdFieldNumber;
const int AuthBackend::kProductCodeFieldNumber;
const int AuthBackend::kAuthTokenFieldNumber;
#endif  // !_MSC_VER

AuthBackend::AuthBackend()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.AuthBackend)
}

void AuthBackend::InitAsDefaultInstance() {
}

AuthBackend::AuthBackend(const AuthBackend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.AuthBackend)
}

void AuthBackend::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requestid_ = 0;
  productcode_ = 0;
  authtoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthBackend::~AuthBackend() {
  // @@protoc_insertion_point(destructor:message.AuthBackend)
  SharedDtor();
}

void AuthBackend::SharedDtor() {
  if (authtoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete authtoken_;
  }
  if (this != default_instance_) {
  }
}

void AuthBackend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthBackend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthBackend_descriptor_;
}

const AuthBackend& AuthBackend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

AuthBackend* AuthBackend::default_instance_ = NULL;

AuthBackend* AuthBackend::New() const {
  return new AuthBackend;
}

void AuthBackend::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AuthBackend*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(requestid_, productcode_);
    if (has_authtoken()) {
      if (authtoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        authtoken_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthBackend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.AuthBackend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 requestId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_productCode;
        break;
      }

      // required int32 productCode = 2;
      case 2: {
        if (tag == 16) {
         parse_productCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &productcode_)));
          set_has_productcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_authToken;
        break;
      }

      // required string authToken = 3;
      case 3: {
        if (tag == 26) {
         parse_authToken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authtoken()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->authtoken().data(), this->authtoken().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "authtoken");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.AuthBackend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.AuthBackend)
  return false;
#undef DO_
}

void AuthBackend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.AuthBackend)
  // required int32 requestId = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // required int32 productCode = 2;
  if (has_productcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->productcode(), output);
  }

  // required string authToken = 3;
  if (has_authtoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authtoken().data(), this->authtoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "authtoken");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->authtoken(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.AuthBackend)
}

::google::protobuf::uint8* AuthBackend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.AuthBackend)
  // required int32 requestId = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // required int32 productCode = 2;
  if (has_productcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->productcode(), target);
  }

  // required string authToken = 3;
  if (has_authtoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authtoken().data(), this->authtoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "authtoken");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->authtoken(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.AuthBackend)
  return target;
}

int AuthBackend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 requestId = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // required int32 productCode = 2;
    if (has_productcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->productcode());
    }

    // required string authToken = 3;
    if (has_authtoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authtoken());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthBackend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthBackend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthBackend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthBackend::MergeFrom(const AuthBackend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_productcode()) {
      set_productcode(from.productcode());
    }
    if (from.has_authtoken()) {
      set_authtoken(from.authtoken());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthBackend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthBackend::CopyFrom(const AuthBackend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthBackend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AuthBackend::Swap(AuthBackend* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(productcode_, other->productcode_);
    std::swap(authtoken_, other->authtoken_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthBackend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthBackend_descriptor_;
  metadata.reflection = AuthBackend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegDev::kRequestIdFieldNumber;
const int RegDev::kProductCodeFieldNumber;
const int RegDev::kDeviceIdFieldNumber;
const int RegDev::kDevTypeFieldNumber;
const int RegDev::kTokenFieldNumber;
#endif  // !_MSC_VER

RegDev::RegDev()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.RegDev)
}

void RegDev::InitAsDefaultInstance() {
}

RegDev::RegDev(const RegDev& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.RegDev)
}

void RegDev::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requestid_ = 0;
  productcode_ = 0;
  deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devtype_ = 1;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegDev::~RegDev() {
  // @@protoc_insertion_point(destructor:message.RegDev)
  SharedDtor();
}

void RegDev::SharedDtor() {
  if (deviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deviceid_;
  }
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void RegDev::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegDev::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegDev_descriptor_;
}

const RegDev& RegDev::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

RegDev* RegDev::default_instance_ = NULL;

RegDev* RegDev::New() const {
  return new RegDev;
}

void RegDev::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RegDev*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(requestid_, productcode_);
    if (has_deviceid()) {
      if (deviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        deviceid_->clear();
      }
    }
    devtype_ = 1;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegDev::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.RegDev)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 requestId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_productCode;
        break;
      }

      // required int32 productCode = 2;
      case 2: {
        if (tag == 16) {
         parse_productCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &productcode_)));
          set_has_productcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_deviceId;
        break;
      }

      // required string deviceId = 3;
      case 3: {
        if (tag == 26) {
         parse_deviceId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "deviceid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_devType;
        break;
      }

      // required .message.DevType devType = 4;
      case 4: {
        if (tag == 32) {
         parse_devType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message::DevType_IsValid(value)) {
            set_devtype(static_cast< ::message::DevType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_token;
        break;
      }

      // optional string token = 5;
      case 5: {
        if (tag == 42) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.RegDev)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.RegDev)
  return false;
#undef DO_
}

void RegDev::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.RegDev)
  // required int32 requestId = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // required int32 productCode = 2;
  if (has_productcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->productcode(), output);
  }

  // required string deviceId = 3;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deviceid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->deviceid(), output);
  }

  // required .message.DevType devType = 4;
  if (has_devtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->devtype(), output);
  }

  // optional string token = 5;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.RegDev)
}

::google::protobuf::uint8* RegDev::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.RegDev)
  // required int32 requestId = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // required int32 productCode = 2;
  if (has_productcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->productcode(), target);
  }

  // required string deviceId = 3;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deviceid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->deviceid(), target);
  }

  // required .message.DevType devType = 4;
  if (has_devtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->devtype(), target);
  }

  // optional string token = 5;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.RegDev)
  return target;
}

int RegDev::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 requestId = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // required int32 productCode = 2;
    if (has_productcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->productcode());
    }

    // required string deviceId = 3;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceid());
    }

    // required .message.DevType devType = 4;
    if (has_devtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->devtype());
    }

    // optional string token = 5;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegDev::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegDev* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegDev*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegDev::MergeFrom(const RegDev& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_productcode()) {
      set_productcode(from.productcode());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_devtype()) {
      set_devtype(from.devtype());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegDev::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegDev::CopyFrom(const RegDev& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegDev::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RegDev::Swap(RegDev* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(productcode_, other->productcode_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(devtype_, other->devtype_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegDev::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegDev_descriptor_;
  metadata.reflection = RegDev_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Subscribe::kRequestIdFieldNumber;
const int Subscribe::kTopicFieldNumber;
const int Subscribe::kSubTypeFieldNumber;
const int Subscribe::kPushTypeFieldNumber;
const int Subscribe::kAccountIdFieldNumber;
#endif  // !_MSC_VER

Subscribe::Subscribe()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.Subscribe)
}

void Subscribe::InitAsDefaultInstance() {
}

Subscribe::Subscribe(const Subscribe& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.Subscribe)
}

void Subscribe::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requestid_ = 0;
  topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subtype_ = 1;
  pushtype_ = 1;
  accountid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Subscribe::~Subscribe() {
  // @@protoc_insertion_point(destructor:message.Subscribe)
  SharedDtor();
}

void Subscribe::SharedDtor() {
  if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete topic_;
  }
  if (accountid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete accountid_;
  }
  if (this != default_instance_) {
  }
}

void Subscribe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Subscribe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Subscribe_descriptor_;
}

const Subscribe& Subscribe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

Subscribe* Subscribe::default_instance_ = NULL;

Subscribe* Subscribe::New() const {
  return new Subscribe;
}

void Subscribe::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    requestid_ = 0;
    if (has_topic()) {
      if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        topic_->clear();
      }
    }
    subtype_ = 1;
    pushtype_ = 1;
    if (has_accountid()) {
      if (accountid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        accountid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Subscribe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.Subscribe)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 requestId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_topic;
        break;
      }

      // required string topic = 2;
      case 2: {
        if (tag == 18) {
         parse_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "topic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_subType;
        break;
      }

      // required .message.SubType subType = 3;
      case 3: {
        if (tag == 24) {
         parse_subType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message::SubType_IsValid(value)) {
            set_subtype(static_cast< ::message::SubType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_accountId;
        break;
      }

      // optional string accountId = 4;
      case 4: {
        if (tag == 34) {
         parse_accountId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->accountid().data(), this->accountid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "accountid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_pushType;
        break;
      }

      // optional .message.PushType pushType = 6 [default = GROUP];
      case 6: {
        if (tag == 48) {
         parse_pushType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message::PushType_IsValid(value)) {
            set_pushtype(static_cast< ::message::PushType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.Subscribe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.Subscribe)
  return false;
#undef DO_
}

void Subscribe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.Subscribe)
  // required int32 requestId = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // required string topic = 2;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->topic(), output);
  }

  // required .message.SubType subType = 3;
  if (has_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->subtype(), output);
  }

  // optional string accountId = 4;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accountid().data(), this->accountid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "accountid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->accountid(), output);
  }

  // optional .message.PushType pushType = 6 [default = GROUP];
  if (has_pushtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->pushtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.Subscribe)
}

::google::protobuf::uint8* Subscribe::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.Subscribe)
  // required int32 requestId = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // required string topic = 2;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->topic(), target);
  }

  // required .message.SubType subType = 3;
  if (has_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->subtype(), target);
  }

  // optional string accountId = 4;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accountid().data(), this->accountid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "accountid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->accountid(), target);
  }

  // optional .message.PushType pushType = 6 [default = GROUP];
  if (has_pushtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->pushtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.Subscribe)
  return target;
}

int Subscribe::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 requestId = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // required string topic = 2;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topic());
    }

    // required .message.SubType subType = 3;
    if (has_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->subtype());
    }

    // optional .message.PushType pushType = 6 [default = GROUP];
    if (has_pushtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pushtype());
    }

    // optional string accountId = 4;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Subscribe::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Subscribe* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Subscribe*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Subscribe::MergeFrom(const Subscribe& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_topic()) {
      set_topic(from.topic());
    }
    if (from.has_subtype()) {
      set_subtype(from.subtype());
    }
    if (from.has_pushtype()) {
      set_pushtype(from.pushtype());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Subscribe::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Subscribe::CopyFrom(const Subscribe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Subscribe::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Subscribe::Swap(Subscribe* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(topic_, other->topic_);
    std::swap(subtype_, other->subtype_);
    std::swap(pushtype_, other->pushtype_);
    std::swap(accountid_, other->accountid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Subscribe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Subscribe_descriptor_;
  metadata.reflection = Subscribe_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetMsg::kBodyFieldNumber;
const int RetMsg::kTopicFieldNumber;
const int RetMsg::kPushTypeFieldNumber;
#endif  // !_MSC_VER

RetMsg::RetMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.RetMsg)
}

void RetMsg::InitAsDefaultInstance() {
}

RetMsg::RetMsg(const RetMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.RetMsg)
}

void RetMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pushtype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetMsg::~RetMsg() {
  // @@protoc_insertion_point(destructor:message.RetMsg)
  SharedDtor();
}

void RetMsg::SharedDtor() {
  if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete body_;
  }
  if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete topic_;
  }
  if (this != default_instance_) {
  }
}

void RetMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetMsg_descriptor_;
}

const RetMsg& RetMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

RetMsg* RetMsg::default_instance_ = NULL;

RetMsg* RetMsg::New() const {
  return new RetMsg;
}

void RetMsg::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_body()) {
      if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        body_->clear();
      }
    }
    if (has_topic()) {
      if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        topic_->clear();
      }
    }
    pushtype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.RetMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes body = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_topic;
        break;
      }

      // optional string topic = 2;
      case 2: {
        if (tag == 18) {
         parse_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "topic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pushType;
        break;
      }

      // optional .message.PushType pushType = 3 [default = GROUP];
      case 3: {
        if (tag == 24) {
         parse_pushType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message::PushType_IsValid(value)) {
            set_pushtype(static_cast< ::message::PushType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.RetMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.RetMsg)
  return false;
#undef DO_
}

void RetMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.RetMsg)
  // required bytes body = 1;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->body(), output);
  }

  // optional string topic = 2;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->topic(), output);
  }

  // optional .message.PushType pushType = 3 [default = GROUP];
  if (has_pushtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->pushtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.RetMsg)
}

::google::protobuf::uint8* RetMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.RetMsg)
  // required bytes body = 1;
  if (has_body()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->body(), target);
  }

  // optional string topic = 2;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->topic(), target);
  }

  // optional .message.PushType pushType = 3 [default = GROUP];
  if (has_pushtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->pushtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.RetMsg)
  return target;
}

int RetMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes body = 1;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->body());
    }

    // optional string topic = 2;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topic());
    }

    // optional .message.PushType pushType = 3 [default = GROUP];
    if (has_pushtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pushtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetMsg::MergeFrom(const RetMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_body()) {
      set_body(from.body());
    }
    if (from.has_topic()) {
      set_topic(from.topic());
    }
    if (from.has_pushtype()) {
      set_pushtype(from.pushtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetMsg::CopyFrom(const RetMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RetMsg::Swap(RetMsg* other) {
  if (other != this) {
    std::swap(body_, other->body_);
    std::swap(topic_, other->topic_);
    std::swap(pushtype_, other->pushtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetMsg_descriptor_;
  metadata.reflection = RetMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Response::kRequestIdFieldNumber;
const int Response::kRetCodeFieldNumber;
const int Response::kRightHostFieldNumber;
#endif  // !_MSC_VER

Response::Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.Response)
}

void Response::InitAsDefaultInstance() {
}

Response::Response(const Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.Response)
}

void Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requestid_ = 0;
  retcode_ = 1;
  righthost_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:message.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (righthost_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete righthost_;
  }
  if (this != default_instance_) {
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New() const {
  return new Response;
}

void Response::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    requestid_ = 0;
    retcode_ = 1;
    if (has_righthost()) {
      if (righthost_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        righthost_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 requestId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_retCode;
        break;
      }

      // required .message.RetCode retCode = 2;
      case 2: {
        if (tag == 16) {
         parse_retCode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message::RetCode_IsValid(value)) {
            set_retcode(static_cast< ::message::RetCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rightHost;
        break;
      }

      // optional string rightHost = 3;
      case 3: {
        if (tag == 26) {
         parse_rightHost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_righthost()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->righthost().data(), this->righthost().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "righthost");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.Response)
  // required int32 requestId = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // required .message.RetCode retCode = 2;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->retcode(), output);
  }

  // optional string rightHost = 3;
  if (has_righthost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->righthost().data(), this->righthost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "righthost");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->righthost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.Response)
}

::google::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.Response)
  // required int32 requestId = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // required .message.RetCode retCode = 2;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->retcode(), target);
  }

  // optional string rightHost = 3;
  if (has_righthost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->righthost().data(), this->righthost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "righthost");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->righthost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.Response)
  return target;
}

int Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 requestId = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // required .message.RetCode retCode = 2;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->retcode());
    }

    // optional string rightHost = 3;
    if (has_righthost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->righthost());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_righthost()) {
      set_righthost(from.righthost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Response::Swap(Response* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(retcode_, other->retcode_);
    std::swap(righthost_, other->righthost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
